/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@tyriar/fibonacci-heap/lib/fibonacciHeap.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tyriar/fibonacci-heap/lib/fibonacciHeap.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @license\n * Copyright Daniel Imms <http://www.growingwiththeweb.com>\n * Released under MIT license. See LICENSE in the project root for details.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar node_1 = __webpack_require__(/*! ./node */ \"./node_modules/@tyriar/fibonacci-heap/lib/node.js\");\nvar nodeListIterator_1 = __webpack_require__(/*! ./nodeListIterator */ \"./node_modules/@tyriar/fibonacci-heap/lib/nodeListIterator.js\");\nvar FibonacciHeap = /** @class */ (function () {\n    function FibonacciHeap(compare) {\n        this._minNode = null;\n        this._nodeCount = 0;\n        this._compare = compare ? compare : this._defaultCompare;\n    }\n    /**\n     * Clears the heap's data, making it an empty heap.\n     */\n    FibonacciHeap.prototype.clear = function () {\n        this._minNode = null;\n        this._nodeCount = 0;\n    };\n    /**\n     * Decreases a key of a node.\n     * @param node The node to decrease the key of.\n     * @param newKey The new key to assign to the node.\n     */\n    FibonacciHeap.prototype.decreaseKey = function (node, newKey) {\n        if (!node) {\n            throw new Error('Cannot decrease key of non-existent node');\n        }\n        if (this._compare({ key: newKey }, { key: node.key }) > 0) {\n            throw new Error('New key is larger than old key');\n        }\n        node.key = newKey;\n        var parent = node.parent;\n        if (parent && this._compare(node, parent) < 0) {\n            this._cut(node, parent, this._minNode);\n            this._cascadingCut(parent, this._minNode);\n        }\n        if (this._compare(node, this._minNode) < 0) {\n            this._minNode = node;\n        }\n    };\n    /**\n     * Deletes a node.\n     * @param node The node to delete.\n     */\n    FibonacciHeap.prototype.delete = function (node) {\n        // This is a special implementation of decreaseKey that sets the argument to\n        // the minimum value. This is necessary to make generic keys work, since there\n        // is no MIN_VALUE constant for generic types.\n        var parent = node.parent;\n        if (parent) {\n            this._cut(node, parent, this._minNode);\n            this._cascadingCut(parent, this._minNode);\n        }\n        this._minNode = node;\n        this.extractMinimum();\n    };\n    /**\n     * Extracts and returns the minimum node from the heap.\n     * @return The heap's minimum node or null if the heap is empty.\n     */\n    FibonacciHeap.prototype.extractMinimum = function () {\n        var extractedMin = this._minNode;\n        if (extractedMin) {\n            // Set parent to null for the minimum's children\n            if (extractedMin.child) {\n                var child = extractedMin.child;\n                do {\n                    child.parent = null;\n                    child = child.next;\n                } while (child !== extractedMin.child);\n            }\n            var nextInRootList = null;\n            if (extractedMin.next !== extractedMin) {\n                nextInRootList = extractedMin.next;\n            }\n            // Remove min from root list\n            this._removeNodeFromList(extractedMin);\n            this._nodeCount--;\n            // Merge the children of the minimum node with the root list\n            this._minNode = this._mergeLists(nextInRootList, extractedMin.child);\n            if (this._minNode) {\n                this._minNode = this._consolidate(this._minNode);\n            }\n        }\n        return extractedMin;\n    };\n    /**\n     * Returns the minimum node from the heap.\n     * @return The heap's minimum node or null if the heap is empty.\n     */\n    FibonacciHeap.prototype.findMinimum = function () {\n        return this._minNode;\n    };\n    /**\n     * Inserts a new key-value pair into the heap.\n     * @param key The key to insert.\n     * @param value The value to insert.\n     * @return node The inserted node.\n     */\n    FibonacciHeap.prototype.insert = function (key, value) {\n        var node = new node_1.Node(key, value);\n        this._minNode = this._mergeLists(this._minNode, node);\n        this._nodeCount++;\n        return node;\n    };\n    /**\n     * @return Whether the heap is empty.\n     */\n    FibonacciHeap.prototype.isEmpty = function () {\n        return this._minNode === null;\n    };\n    /**\n     * @return The size of the heap.\n     */\n    FibonacciHeap.prototype.size = function () {\n        if (this._minNode === null) {\n            return 0;\n        }\n        return this._getNodeListSize(this._minNode);\n    };\n    /**\n     * Joins another heap to this heap.\n     * @param other The other heap.\n     */\n    FibonacciHeap.prototype.union = function (other) {\n        this._minNode = this._mergeLists(this._minNode, other._minNode);\n        this._nodeCount += other._nodeCount;\n    };\n    /**\n     * Compares two nodes with each other.\n     * @param a The first key to compare.\n     * @param b The second key to compare.\n     * @return -1, 0 or 1 if a < b, a == b or a > b respectively.\n     */\n    FibonacciHeap.prototype._defaultCompare = function (a, b) {\n        if (a.key > b.key) {\n            return 1;\n        }\n        if (a.key < b.key) {\n            return -1;\n        }\n        return 0;\n    };\n    /**\n     * Cut the link between a node and its parent, moving the node to the root list.\n     * @param node The node being cut.\n     * @param parent The parent of the node being cut.\n     * @param minNode The minimum node in the root list.\n     * @return The heap's new minimum node.\n     */\n    FibonacciHeap.prototype._cut = function (node, parent, minNode) {\n        node.parent = null;\n        parent.degree--;\n        if (node.next === node) {\n            parent.child = null;\n        }\n        else {\n            parent.child = node.next;\n        }\n        this._removeNodeFromList(node);\n        var newMinNode = this._mergeLists(minNode, node);\n        node.isMarked = false;\n        return newMinNode;\n    };\n    /**\n     * Perform a cascading cut on a node; mark the node if it is not marked,\n     * otherwise cut the node and perform a cascading cut on its parent.\n     * @param node The node being considered to be cut.\n     * @param minNode The minimum node in the root list.\n     * @return The heap's new minimum node.\n     */\n    FibonacciHeap.prototype._cascadingCut = function (node, minNode) {\n        var parent = node.parent;\n        if (parent) {\n            if (node.isMarked) {\n                minNode = this._cut(node, parent, minNode);\n                minNode = this._cascadingCut(parent, minNode);\n            }\n            else {\n                node.isMarked = true;\n            }\n        }\n        return minNode;\n    };\n    /**\n     * Merge all trees of the same order together until there are no two trees of\n     * the same order.\n     * @param minNode The current minimum node.\n     * @return The new minimum node.\n     */\n    FibonacciHeap.prototype._consolidate = function (minNode) {\n        var aux = [];\n        var it = new nodeListIterator_1.NodeListIterator(minNode);\n        while (it.hasNext()) {\n            var current = it.next();\n            // If there exists another node with the same degree, merge them\n            var auxCurrent = aux[current.degree];\n            while (auxCurrent) {\n                if (this._compare(current, auxCurrent) > 0) {\n                    var temp = current;\n                    current = auxCurrent;\n                    auxCurrent = temp;\n                }\n                this._linkHeaps(auxCurrent, current);\n                aux[current.degree] = null;\n                current.degree++;\n                auxCurrent = aux[current.degree];\n            }\n            aux[current.degree] = current;\n        }\n        var newMinNode = null;\n        for (var i = 0; i < aux.length; i++) {\n            var node = aux[i];\n            if (node) {\n                // Remove siblings before merging\n                node.next = node;\n                node.prev = node;\n                newMinNode = this._mergeLists(newMinNode, node);\n            }\n        }\n        return newMinNode;\n    };\n    /**\n     * Removes a node from a node list.\n     * @param node The node to remove.\n     */\n    FibonacciHeap.prototype._removeNodeFromList = function (node) {\n        var prev = node.prev;\n        var next = node.next;\n        prev.next = next;\n        next.prev = prev;\n        node.next = node;\n        node.prev = node;\n    };\n    /**\n     * Links two heaps of the same order together.\n     *\n     * @private\n     * @param max The heap with the larger root.\n     * @param min The heap with the smaller root.\n     */\n    FibonacciHeap.prototype._linkHeaps = function (max, min) {\n        this._removeNodeFromList(max);\n        min.child = this._mergeLists(max, min.child);\n        max.parent = min;\n        max.isMarked = false;\n    };\n    /**\n     * Merge two lists of nodes together.\n     *\n     * @private\n     * @param a The first list to merge.\n     * @param b The second list to merge.\n     * @return The new minimum node from the two lists.\n     */\n    FibonacciHeap.prototype._mergeLists = function (a, b) {\n        if (!a) {\n            if (!b) {\n                return null;\n            }\n            return b;\n        }\n        if (!b) {\n            return a;\n        }\n        var temp = a.next;\n        a.next = b.next;\n        a.next.prev = a;\n        b.next = temp;\n        b.next.prev = b;\n        return this._compare(a, b) < 0 ? a : b;\n    };\n    /**\n     * Gets the size of a node list.\n     * @param node A node within the node list.\n     * @return The size of the node list.\n     */\n    FibonacciHeap.prototype._getNodeListSize = function (node) {\n        var count = 0;\n        var current = node;\n        do {\n            count++;\n            if (current.child) {\n                count += this._getNodeListSize(current.child);\n            }\n            current = current.next;\n        } while (current !== node);\n        return count;\n    };\n    return FibonacciHeap;\n}());\nexports.FibonacciHeap = FibonacciHeap;\n//# sourceMappingURL=fibonacciHeap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@tyriar/fibonacci-heap/lib/fibonacciHeap.js\n");

/***/ }),

/***/ "./node_modules/@tyriar/fibonacci-heap/lib/node.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tyriar/fibonacci-heap/lib/node.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @license\n * Copyright Daniel Imms <http://www.growingwiththeweb.com>\n * Released under MIT license. See LICENSE in the project root for details.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node = /** @class */ (function () {\n    function Node(key, value) {\n        this.parent = null;\n        this.child = null;\n        this.degree = 0;\n        this.isMarked = false;\n        this.key = key;\n        this.value = value;\n        this.prev = this;\n        this.next = this;\n    }\n    return Node;\n}());\nexports.Node = Node;\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR5cmlhci9maWJvbmFjY2ktaGVhcC9saWIvbm9kZS5qcz9hMjdkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B0eXJpYXIvZmlib25hY2NpLWhlYXAvbGliL25vZGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBEYW5pZWwgSW1tcyA8aHR0cDovL3d3dy5ncm93aW5nd2l0aHRoZXdlYi5jb20+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZGV0YWlscy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE5vZGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTm9kZShrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5jaGlsZCA9IG51bGw7XG4gICAgICAgIHRoaXMuZGVncmVlID0gMDtcbiAgICAgICAgdGhpcy5pc01hcmtlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnByZXYgPSB0aGlzO1xuICAgICAgICB0aGlzLm5leHQgPSB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gTm9kZTtcbn0oKSk7XG5leHBvcnRzLk5vZGUgPSBOb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@tyriar/fibonacci-heap/lib/node.js\n");

/***/ }),

/***/ "./node_modules/@tyriar/fibonacci-heap/lib/nodeListIterator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@tyriar/fibonacci-heap/lib/nodeListIterator.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * @license\n * Copyright Daniel Imms <http://www.growingwiththeweb.com>\n * Released under MIT license. See LICENSE in the project root for details.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar NodeListIterator = /** @class */ (function () {\n    /**\n     * Creates an Iterator used to simplify the consolidate() method. It works by\n     * making a shallow copy of the nodes in the root list and iterating over the\n     * shallow copy instead of the source as the source will be modified.\n     * @param start A node from the root list.\n     */\n    function NodeListIterator(start) {\n        this._index = -1;\n        this._items = [];\n        var current = start;\n        do {\n            this._items.push(current);\n            current = current.next;\n        } while (start !== current);\n    }\n    /**\n     * @return Whether there is a next node in the iterator.\n     */\n    NodeListIterator.prototype.hasNext = function () {\n        return this._index < this._items.length - 1;\n    };\n    /**\n     * @return The next node.\n     */\n    NodeListIterator.prototype.next = function () {\n        return this._items[++this._index];\n    };\n    return NodeListIterator;\n}());\nexports.NodeListIterator = NodeListIterator;\n//# sourceMappingURL=nodeListIterator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHR5cmlhci9maWJvbmFjY2ktaGVhcC9saWIvbm9kZUxpc3RJdGVyYXRvci5qcz84ZDdlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B0eXJpYXIvZmlib25hY2NpLWhlYXAvbGliL25vZGVMaXN0SXRlcmF0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBEYW5pZWwgSW1tcyA8aHR0cDovL3d3dy5ncm93aW5nd2l0aHRoZXdlYi5jb20+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgZGV0YWlscy5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE5vZGVMaXN0SXRlcmF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBJdGVyYXRvciB1c2VkIHRvIHNpbXBsaWZ5IHRoZSBjb25zb2xpZGF0ZSgpIG1ldGhvZC4gSXQgd29ya3MgYnlcbiAgICAgKiBtYWtpbmcgYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5vZGVzIGluIHRoZSByb290IGxpc3QgYW5kIGl0ZXJhdGluZyBvdmVyIHRoZVxuICAgICAqIHNoYWxsb3cgY29weSBpbnN0ZWFkIG9mIHRoZSBzb3VyY2UgYXMgdGhlIHNvdXJjZSB3aWxsIGJlIG1vZGlmaWVkLlxuICAgICAqIEBwYXJhbSBzdGFydCBBIG5vZGUgZnJvbSB0aGUgcm9vdCBsaXN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE5vZGVMaXN0SXRlcmF0b3Ioc3RhcnQpIHtcbiAgICAgICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5faXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBzdGFydDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdGhpcy5faXRlbXMucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gICAgICAgIH0gd2hpbGUgKHN0YXJ0ICE9PSBjdXJyZW50KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHJldHVybiBXaGV0aGVyIHRoZXJlIGlzIGEgbmV4dCBub2RlIGluIHRoZSBpdGVyYXRvci5cbiAgICAgKi9cbiAgICBOb2RlTGlzdEl0ZXJhdG9yLnByb3RvdHlwZS5oYXNOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5kZXggPCB0aGlzLl9pdGVtcy5sZW5ndGggLSAxO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBUaGUgbmV4dCBub2RlLlxuICAgICAqL1xuICAgIE5vZGVMaXN0SXRlcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pdGVtc1srK3RoaXMuX2luZGV4XTtcbiAgICB9O1xuICAgIHJldHVybiBOb2RlTGlzdEl0ZXJhdG9yO1xufSgpKTtcbmV4cG9ydHMuTm9kZUxpc3RJdGVyYXRvciA9IE5vZGVMaXN0SXRlcmF0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlTGlzdEl0ZXJhdG9yLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@tyriar/fibonacci-heap/lib/nodeListIterator.js\n");

/***/ }),

/***/ "./node_modules/gradient-path/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/gradient-path/dist/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n   true ? factory(exports, __webpack_require__(/*! tinygradient */ \"./node_modules/tinygradient/browser.js\")) :\n  undefined;\n}(this, function (exports, tinygradient) { 'use strict';\n\n  tinygradient = tinygradient && tinygradient.hasOwnProperty('default') ? tinygradient['default'] : tinygradient;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function _objectSpread(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n      var ownKeys = Object.keys(source);\n\n      if (typeof Object.getOwnPropertySymbols === 'function') {\n        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        }));\n      }\n\n      ownKeys.forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    }\n\n    return target;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n      return arr2;\n    }\n  }\n\n  function _iterableToArray(iter) {\n    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n  }\n\n  var Sample = function Sample(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        progress = _ref.progress,\n        segment = _ref.segment;\n\n    _classCallCheck(this, Sample);\n\n    this.x = x;\n    this.y = y;\n    this.progress = progress;\n    this.segment = segment;\n  };\n\n  var svgElem = function svgElem(type, attrs) {\n    var elem = document.createElementNS('http://www.w3.org/2000/svg', type),\n        attributes = Object.keys(attrs);\n\n    for (var i = 0; i < attributes.length; i++) {\n      var attr = attributes[i];\n      elem.setAttribute(attr, attrs[attr]);\n    }\n\n    return elem;\n  }; // An internal function to help with the repetition of adding fill, stroke, and stroke-width attributes\n\n  var styleAttrs = function styleAttrs(fill, stroke, strokeWidth, progress) {\n    var determineColor = function determineColor(type, progress) {\n      return typeof type === 'string' ? type : tinygradient(type).rgbAt(progress);\n    };\n\n    var attrs = {};\n\n    if (stroke) {\n      attrs['stroke'] = determineColor(stroke, progress);\n      attrs['stroke-width'] = strokeWidth;\n    }\n\n    if (fill) {\n      attrs['fill'] = determineColor(fill, progress);\n    }\n\n    return attrs;\n  }; // An internal function to convert any array of samples into a \"d\" attribute to be passed to an SVG path\n\n  var segmentToD = function segmentToD(samples) {\n    var d = '';\n\n    for (var i = 0; i < samples.length; i++) {\n      var _samples$i = samples[i],\n          x = _samples$i.x,\n          y = _samples$i.y,\n          prevSample = i === 0 ? null : samples[i - 1];\n\n      if (i === 0 && i !== samples.length - 1) {\n        d += \"M\".concat(x, \",\").concat(y);\n      } else if (x !== prevSample.x && y !== prevSample.y) {\n        d += \"L\".concat(x, \",\").concat(y);\n      } else if (x !== prevSample.x) {\n        d += \"H\".concat(x);\n      } else if (y !== prevSample.y) {\n        d += \"V\".concat(y);\n      }\n\n      if (i === samples.length - 1) {\n        d += 'Z';\n      }\n    }\n\n    return d;\n  }; // An internal function for getting the colors of a segment, we need to get middle most sample (sorted by progress along the path)\n\n  var getMiddleSample = function getMiddleSample(samples) {\n    var sortedSamples = _toConsumableArray(samples).sort(function (a, b) {\n      return a.progress - b.progress;\n    });\n\n    return sortedSamples[sortedSamples.length / 2 | 0];\n  }; // An internal function for converting any D3 selection or DOM-like element into a DOM node\n\n  var convertPathToNode = function convertPathToNode(path) {\n    return path instanceof Element || path instanceof HTMLDocument ? path : path.node();\n  };\n\n  var Segment = function Segment(_ref) {\n    var samples = _ref.samples;\n\n    _classCallCheck(this, Segment);\n\n    this.samples = samples;\n    this.progress = getMiddleSample(samples).progress;\n  };\n\n  // This will take a path, number of samples, number of samples, and a precision value\n  // It will return an array of Segments, which in turn contains an array of Samples\n  // This can later be used to generate a stroked path, converted to outlines for a filled path, or flattened for plotting SVG circles\n\n  var getData = function getData(_ref) {\n    var path = _ref.path,\n        segments = _ref.segments,\n        samples = _ref.samples,\n        _ref$precision = _ref.precision,\n        precision = _ref$precision === void 0 ? DEFAULT_PRECISION : _ref$precision;\n    // Convert the given path to a DOM node if it isn't already one\n    path = convertPathToNode(path); // We decrement the number of samples per segment because when we group them later we will add on the first sample of the following segment\n\n    if (samples > 1) samples--; // Get total length of path, total number of samples we will be generating, and two blank arrays to hold samples and segments\n\n    var pathLength = path.getTotalLength(),\n        totalSamples = segments * samples,\n        allSamples = [],\n        allSegments = []; // For the number of total samples, get the x, y, and progress values for each sample along the path\n\n    for (var sample = 0; sample <= totalSamples; sample++) {\n      var progress = sample / totalSamples;\n\n      var _path$getPointAtLengt = path.getPointAtLength(progress * pathLength),\n          x = _path$getPointAtLengt.x,\n          y = _path$getPointAtLengt.y; // If the user asks to round our x and y values, do so\n\n\n      if (precision) {\n        x = +x.toFixed(precision);\n        y = +y.toFixed(precision);\n      } // Create a new Sample and push it onto the allSamples array\n\n\n      allSamples.push(new Sample({\n        x: x,\n        y: y,\n        progress: progress\n      }));\n    } // Out of all the samples gathered previously, sort them into groups of segments\n    // Each group includes the samples of the current segment, with the last sample being first sample from the next segment\n\n\n    for (var segment = 0; segment < segments; segment++) {\n      var currentStart = segment * samples,\n          nextStart = currentStart + samples,\n          segmentSamples = []; // Push all current samples onto segmentSamples\n\n      for (var samInSeg = 0; samInSeg < samples; samInSeg++) {\n        segmentSamples.push(allSamples[currentStart + samInSeg]);\n      } // Push the first sample from the next segment onto segmentSamples\n\n\n      segmentSamples.push(allSamples[nextStart]); // Create a new Segment with the samples from segmentSamples\n\n      allSegments.push(new Segment({\n        samples: segmentSamples\n      }));\n    } // Return our group of segments\n\n\n    return allSegments;\n  }; // The function responsible for converting strokable data (from getData()) into fillable data\n  // This allows any SVG path to be filled instead of just stroked, allowing for the user to fill and stroke paths simultaneously\n  // We start by outlining the stroked data given a specified width and the we average together the edges where adjacent segments touch\n\n  var strokeToFill = function strokeToFill(data, width, precision) {\n    var outlinedStrokes = outlineStrokes(data, width, precision),\n        averagedSegmentJoins = averageSegmentJoins(outlinedStrokes, precision);\n    return averagedSegmentJoins;\n  }; // An internal function for outlining stroked data\n\n  var outlineStrokes = function outlineStrokes(data, width, precision) {\n    // We need to get the points perpendicular to a startPoint, given an angle, radius, and precision\n    var getPerpSamples = function getPerpSamples(angle, radius, precision, startPoint) {\n      var p0 = new Sample(_objectSpread({}, startPoint, {\n        x: Math.sin(angle) * radius + startPoint.x,\n        y: -Math.cos(angle) * radius + startPoint.y\n      })),\n          p1 = new Sample(_objectSpread({}, startPoint, {\n        x: -Math.sin(angle) * radius + startPoint.x,\n        y: Math.cos(angle) * radius + startPoint.y\n      })); // If the user asks to round our x and y values, do so\n\n      if (precision) {\n        p0.x = +p0.x.toFixed(precision);\n        p0.y = +p0.y.toFixed(precision);\n        p1.x = +p1.x.toFixed(precision);\n        p1.y = +p1.y.toFixed(precision);\n      }\n\n      return [p0, p1];\n    }; // We need to set the radius (half of the width) and have a holding array for outlined Segments\n\n\n    var radius = width / 2,\n        outlinedData = [];\n\n    for (var i = 0; i < data.length; i++) {\n      var samples = data[i].samples,\n          segmentSamples = []; // For each sample point and the following sample point (if there is one) compute the angle\n      // Also compute the sample's various perpendicular points (with a distance of radius away from the sample point)\n\n      for (var j = 0; j < samples.length; j++) {\n        // If we're at the end of the segment and there are no further points, get outta here!\n        if (samples[j + 1] === undefined) break;\n        var p0 = samples[j],\n            // First point\n        p1 = samples[j + 1],\n            // Second point\n        angle = Math.atan2(p1.y - p0.y, p1.x - p0.x),\n            // Perpendicular angle to p0 and p1\n        p0Perps = getPerpSamples(angle, radius, precision, p0),\n            // Get perpedicular points with a distance of radius away from p0\n        p1Perps = getPerpSamples(angle, radius, precision, p1); // Get perpedicular points with a distance of radius away from p1\n        // We only need the p0 perpendenciular points for the first sample\n        // The p0 for j > 0 will always be the same as p1 anyhow, so let's not add redundant points\n\n        if (j === 0) {\n          segmentSamples.push.apply(segmentSamples, _toConsumableArray(p0Perps));\n        } // Always push the second sample point's perpendicular points\n\n\n        segmentSamples.push.apply(segmentSamples, _toConsumableArray(p1Perps));\n      } // segmentSamples is out of order...\n      // Given a segmentSamples length of 8, the points need to be rearranged from: 0, 2, 4, 6, 7, 5, 3, 1\n\n\n      outlinedData.push(new Segment({\n        samples: [].concat(_toConsumableArray(segmentSamples.filter(function (s, i) {\n          return i % 2 === 0;\n        })), _toConsumableArray(segmentSamples.filter(function (s, i) {\n          return i % 2 === 1;\n        }).reverse()))\n      }));\n    }\n\n    return outlinedData;\n  }; // An internal function taking outlinedData (from outlineStrokes()) and averaging adjacent edges\n  // If we didn't do this, our data would be fillable, but it would look stroked\n  // This function fixes where segments overlap and underlap each other\n\n\n  var averageSegmentJoins = function averageSegmentJoins(outlinedData, precision) {\n    // Find the average x and y between two points (p0 and p1)\n    var avg = function avg(p0, p1) {\n      return {\n        x: (p0.x + p1.x) / 2,\n        y: (p0.y + p1.y) / 2\n      };\n    }; // Recombine the new x and y positions with all the other keys in the object\n\n\n    var combine = function combine(segment, pos, avg) {\n      return _objectSpread({}, segment[pos], {\n        x: avg.x,\n        y: avg.y\n      });\n    };\n\n    for (var i = 0; i < outlinedData.length; i++) {\n      var currentSamples = outlinedData[i].samples,\n          // The current segment's samples\n      nextSamples = outlinedData[i + 1] ? outlinedData[i + 1].samples : outlinedData[0].samples,\n          // The next segment's samples, otherwise, the first segment's samples\n      currentMiddle = currentSamples.length / 2,\n          // The \"middle\" sample in the current segment's samples\n      nextEnd = nextSamples.length - 1; // The last sample in the next segment's samples\n      // Average two sets of outlined samples to create p0Average and p1Average\n\n      var p0Average = avg(currentSamples[currentMiddle - 1], nextSamples[0]),\n          p1Average = avg(currentSamples[currentMiddle], nextSamples[nextEnd]); // If the user asks to round our x and y values, do so\n\n      if (precision) {\n        p0Average.x = +p0Average.x.toFixed(precision);\n        p0Average.y = +p0Average.y.toFixed(precision);\n        p1Average.x = +p1Average.x.toFixed(precision);\n        p1Average.y = +p1Average.y.toFixed(precision);\n      } // Replace the previous values with new Samples\n\n\n      currentSamples[currentMiddle - 1] = new Sample(_objectSpread({}, combine(currentSamples, currentMiddle - 1, p0Average)));\n      currentSamples[currentMiddle] = new Sample(_objectSpread({}, combine(currentSamples, currentMiddle, p1Average)));\n      nextSamples[0] = new Sample(_objectSpread({}, combine(nextSamples, 0, p0Average)));\n      nextSamples[nextEnd] = new Sample(_objectSpread({}, combine(nextSamples, nextEnd, p1Average)));\n    }\n\n    return outlinedData;\n  };\n\n  var DEFAULT_PRECISION = 2;\n\n  var GradientPath =\n  /*#__PURE__*/\n  function () {\n    function GradientPath(_ref) {\n      var path = _ref.path,\n          segments = _ref.segments,\n          samples = _ref.samples,\n          _ref$precision = _ref.precision,\n          precision = _ref$precision === void 0 ? DEFAULT_PRECISION : _ref$precision;\n\n      _classCallCheck(this, GradientPath);\n\n      // If the path being passed isn't a DOM node already, make it one\n      this.path = convertPathToNode(path);\n      this.segments = segments;\n      this.samples = samples;\n      this.precision = precision; // Store the render cycles that the user creates\n\n      this.renders = []; // Append a group to the SVG to capture everything we render and ensure our paths and circles are properly encapsulated\n\n      this.svg = path.closest('svg');\n      this.group = svgElem('g', {\n        class: 'gradient-path'\n      }); // Get the data\n\n      this.data = getData({\n        path: path,\n        segments: segments,\n        samples: samples,\n        precision: precision\n      }); // Append the main group to the SVG\n\n      this.svg.appendChild(this.group); // Remove the main path once we have the data values\n\n      this.path.parentNode.removeChild(this.path);\n    }\n\n    _createClass(GradientPath, [{\n      key: \"render\",\n      value: function render(_ref2) {\n        var type = _ref2.type,\n            stroke = _ref2.stroke,\n            strokeWidth = _ref2.strokeWidth,\n            fill = _ref2.fill,\n            width = _ref2.width;\n        // Store information from this render cycle\n        var renderCycle = {}; // Create a group for each element\n\n        var elemGroup = svgElem('g', {\n          class: \"element-\".concat(type)\n        });\n        this.group.appendChild(elemGroup);\n        renderCycle.group = elemGroup;\n\n        if (type === 'path') {\n          // If we specify a width and fill, then we need to outline the path and then average the join points of the segments\n          // If we do not specify a width and fill, then we will be stroking and can leave the data \"as is\"\n          renderCycle.data = width && fill ? strokeToFill(this.data, width, this.precision) : this.data;\n\n          for (var j = 0; j < renderCycle.data.length; j++) {\n            var _renderCycle$data$j = renderCycle.data[j],\n                samples = _renderCycle$data$j.samples,\n                progress = _renderCycle$data$j.progress; // Create a path for each segment and append it to its elemGroup\n\n            elemGroup.appendChild(svgElem('path', _objectSpread({\n              class: 'path-segment',\n              d: segmentToD(samples)\n            }, styleAttrs(fill, stroke, strokeWidth, progress))));\n          }\n        } else if (type === 'circle') {\n          renderCycle.data = this.data.flatMap(function (_ref3) {\n            var samples = _ref3.samples;\n            return samples;\n          });\n\n          for (var _j = 0; _j < renderCycle.data.length; _j++) {\n            var _renderCycle$data$_j = renderCycle.data[_j],\n                x = _renderCycle$data$_j.x,\n                y = _renderCycle$data$_j.y,\n                progress = _renderCycle$data$_j.progress; // Create a circle for each sample and append it to its elemGroup\n\n            elemGroup.appendChild(svgElem('circle', _objectSpread({\n              class: 'circle-sample',\n              cx: x,\n              cy: y,\n              r: width / 2\n            }, styleAttrs(fill, stroke, strokeWidth, progress))));\n          }\n        } // Save the information in the current renderCycle and pop it onto the renders array\n\n\n        this.renders.push(renderCycle); // Return this for method chaining\n\n        return this;\n      }\n    }]);\n\n    return GradientPath;\n  }();\n\n  exports.default = GradientPath;\n  exports.getData = getData;\n  exports.strokeToFill = strokeToFill;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/gradient-path/dist/index.js\n");

/***/ }),

/***/ "./node_modules/svg.js/dist/svg.js":
/*!*****************************************!*\
  !*** ./node_modules/svg.js/dist/svg.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*!\n* svg.js - A lightweight library for manipulating and animating SVG.\n* @version 2.7.1\n* https://svgdotjs.github.io/\n*\n* @copyright Wout Fierens <wout@mick-wout.com>\n* @license MIT\n*\n* BUILT: Fri Nov 30 2018 10:01:55 GMT+0100 (GMT+01:00)\n*/;\n(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){\r\n      return factory(root, root.document)\r\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\r\n  } else {}\r\n}(typeof window !== \"undefined\" ? window : this, function(window, document) {\r\n\r\n// Find global reference - uses 'this' by default when available,\r\n// falls back to 'window' otherwise (for bundlers like Webpack)\r\nvar globalRef = (typeof this !== \"undefined\") ? this : window;\r\n\r\n// The main wrapping element\r\nvar SVG = globalRef.SVG = function(element) {\r\n  if (SVG.supported) {\r\n    element = new SVG.Doc(element)\r\n\r\n    if(!SVG.parser.draw)\r\n      SVG.prepare()\r\n\r\n    return element\r\n  }\r\n}\r\n\r\n// Default namespaces\r\nSVG.ns    = 'http://www.w3.org/2000/svg'\r\nSVG.xmlns = 'http://www.w3.org/2000/xmlns/'\r\nSVG.xlink = 'http://www.w3.org/1999/xlink'\r\nSVG.svgjs = 'http://svgjs.com/svgjs'\r\n\r\n// Svg support test\r\nSVG.supported = (function() {\r\n  return !! document.createElementNS &&\r\n         !! document.createElementNS(SVG.ns,'svg').createSVGRect\r\n})()\r\n\r\n// Don't bother to continue if SVG is not supported\r\nif (!SVG.supported) return false\r\n\r\n// Element id sequence\r\nSVG.did  = 1000\r\n\r\n// Get next named element id\r\nSVG.eid = function(name) {\r\n  return 'Svgjs' + capitalize(name) + (SVG.did++)\r\n}\r\n\r\n// Method for element creation\r\nSVG.create = function(name) {\r\n  // create element\r\n  var element = document.createElementNS(this.ns, name)\r\n\r\n  // apply unique id\r\n  element.setAttribute('id', this.eid(name))\r\n\r\n  return element\r\n}\r\n\r\n// Method for extending objects\r\nSVG.extend = function() {\r\n  var modules, methods, key, i\r\n\r\n  // Get list of modules\r\n  modules = [].slice.call(arguments)\r\n\r\n  // Get object with extensions\r\n  methods = modules.pop()\r\n\r\n  for (i = modules.length - 1; i >= 0; i--)\r\n    if (modules[i])\r\n      for (key in methods)\r\n        modules[i].prototype[key] = methods[key]\r\n\r\n  // Make sure SVG.Set inherits any newly added methods\r\n  if (SVG.Set && SVG.Set.inherit)\r\n    SVG.Set.inherit()\r\n}\r\n\r\n// Invent new element\r\nSVG.invent = function(config) {\r\n  // Create element initializer\r\n  var initializer = typeof config.create == 'function' ?\r\n    config.create :\r\n    function() {\r\n      this.constructor.call(this, SVG.create(config.create))\r\n    }\r\n\r\n  // Inherit prototype\r\n  if (config.inherit)\r\n    initializer.prototype = new config.inherit\r\n\r\n  // Extend with methods\r\n  if (config.extend)\r\n    SVG.extend(initializer, config.extend)\r\n\r\n  // Attach construct method to parent\r\n  if (config.construct)\r\n    SVG.extend(config.parent || SVG.Container, config.construct)\r\n\r\n  return initializer\r\n}\r\n\r\n// Adopt existing svg elements\r\nSVG.adopt = function(node) {\r\n  // check for presence of node\r\n  if (!node) return null\r\n\r\n  // make sure a node isn't already adopted\r\n  if (node.instance) return node.instance\r\n\r\n  // initialize variables\r\n  var element\r\n\r\n  // adopt with element-specific settings\r\n  if (node.nodeName == 'svg')\r\n    element = node.parentNode instanceof window.SVGElement ? new SVG.Nested : new SVG.Doc\r\n  else if (node.nodeName == 'linearGradient')\r\n    element = new SVG.Gradient('linear')\r\n  else if (node.nodeName == 'radialGradient')\r\n    element = new SVG.Gradient('radial')\r\n  else if (SVG[capitalize(node.nodeName)])\r\n    element = new SVG[capitalize(node.nodeName)]\r\n  else\r\n    element = new SVG.Element(node)\r\n\r\n  // ensure references\r\n  element.type  = node.nodeName\r\n  element.node  = node\r\n  node.instance = element\r\n\r\n  // SVG.Class specific preparations\r\n  if (element instanceof SVG.Doc)\r\n    element.namespace().defs()\r\n\r\n  // pull svgjs data from the dom (getAttributeNS doesn't work in html5)\r\n  element.setData(JSON.parse(node.getAttribute('svgjs:data')) || {})\r\n\r\n  return element\r\n}\r\n\r\n// Initialize parsing element\r\nSVG.prepare = function() {\r\n  // Select document body and create invisible svg element\r\n  var body = document.getElementsByTagName('body')[0]\r\n    , draw = (body ? new SVG.Doc(body) : SVG.adopt(document.documentElement).nested()).size(2, 0)\r\n\r\n  // Create parser object\r\n  SVG.parser = {\r\n    body: body || document.documentElement\r\n  , draw: draw.style('opacity:0;position:absolute;left:-100%;top:-100%;overflow:hidden').attr('focusable', 'false').node\r\n  , poly: draw.polyline().node\r\n  , path: draw.path().node\r\n  , native: SVG.create('svg')\r\n  }\r\n}\r\n\r\nSVG.parser = {\r\n  native: SVG.create('svg')\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  if(!SVG.parser.draw)\r\n    SVG.prepare()\r\n}, false)\r\n\n// Storage for regular expressions\r\nSVG.regex = {\r\n  // Parse unit value\r\n  numberAndUnit:    /^([+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?)([a-z%]*)$/i\r\n\r\n  // Parse hex value\r\n, hex:              /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i\r\n\r\n  // Parse rgb value\r\n, rgb:              /rgb\\((\\d+),(\\d+),(\\d+)\\)/\r\n\r\n  // Parse reference id\r\n, reference:        /#([a-z0-9\\-_]+)/i\r\n\r\n  // splits a transformation chain\r\n, transforms:       /\\)\\s*,?\\s*/\r\n\r\n  // Whitespace\r\n, whitespace:       /\\s/g\r\n\r\n  // Test hex value\r\n, isHex:            /^#[a-f0-9]{3,6}$/i\r\n\r\n  // Test rgb value\r\n, isRgb:            /^rgb\\(/\r\n\r\n  // Test css declaration\r\n, isCss:            /[^:]+:[^;]+;?/\r\n\r\n  // Test for blank string\r\n, isBlank:          /^(\\s+)?$/\r\n\r\n  // Test for numeric string\r\n, isNumber:         /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i\r\n\r\n  // Test for percent value\r\n, isPercent:        /^-?[\\d\\.]+%$/\r\n\r\n  // Test for image url\r\n, isImage:          /\\.(jpg|jpeg|png|gif|svg)(\\?[^=]+.*)?/i\r\n\r\n  // split at whitespace and comma\r\n, delimiter:        /[\\s,]+/\r\n\r\n  // The following regex are used to parse the d attribute of a path\r\n\r\n  // Matches all hyphens which are not after an exponent\r\n, hyphen:           /([^e])\\-/gi\r\n\r\n  // Replaces and tests for all path letters\r\n, pathLetters:      /[MLHVCSQTAZ]/gi\r\n\r\n  // yes we need this one, too\r\n, isPathLetter:     /[MLHVCSQTAZ]/i\r\n\r\n  // matches 0.154.23.45\r\n, numbersWithDots:  /((\\d?\\.\\d+(?:e[+-]?\\d+)?)((?:\\.\\d+(?:e[+-]?\\d+)?)+))+/gi\r\n\r\n  // matches .\r\n, dots:             /\\./g\r\n}\r\n\nSVG.utils = {\r\n  // Map function\r\n  map: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      result.push(block(array[i]))\r\n\r\n    return result\r\n  }\r\n\r\n  // Filter function\r\n, filter: function(array, block) {\r\n    var i\r\n      , il = array.length\r\n      , result = []\r\n\r\n    for (i = 0; i < il; i++)\r\n      if (block(array[i]))\r\n        result.push(array[i])\r\n\r\n    return result\r\n  }\r\n\r\n  // Degrees to radians\r\n, radians: function(d) {\r\n    return d % 360 * Math.PI / 180\r\n  }\r\n\r\n  // Radians to degrees\r\n, degrees: function(r) {\r\n    return r * 180 / Math.PI % 360\r\n  }\r\n\r\n, filterSVGElements: function(nodes) {\r\n    return this.filter( nodes, function(el) { return el instanceof window.SVGElement })\r\n  }\r\n\r\n}\n\r\nSVG.defaults = {\r\n  // Default attribute values\r\n  attrs: {\r\n    // fill and stroke\r\n    'fill-opacity':     1\r\n  , 'stroke-opacity':   1\r\n  , 'stroke-width':     0\r\n  , 'stroke-linejoin':  'miter'\r\n  , 'stroke-linecap':   'butt'\r\n  , fill:               '#000000'\r\n  , stroke:             '#000000'\r\n  , opacity:            1\r\n    // position\r\n  , x:                  0\r\n  , y:                  0\r\n  , cx:                 0\r\n  , cy:                 0\r\n    // size\r\n  , width:              0\r\n  , height:             0\r\n    // radius\r\n  , r:                  0\r\n  , rx:                 0\r\n  , ry:                 0\r\n    // gradient\r\n  , offset:             0\r\n  , 'stop-opacity':     1\r\n  , 'stop-color':       '#000000'\r\n    // text\r\n  , 'font-size':        16\r\n  , 'font-family':      'Helvetica, Arial, sans-serif'\r\n  , 'text-anchor':      'start'\r\n  }\r\n\r\n}\n// Module for color convertions\r\nSVG.Color = function(color) {\r\n  var match\r\n\r\n  // initialize defaults\r\n  this.r = 0\r\n  this.g = 0\r\n  this.b = 0\r\n\r\n  if(!color) return\r\n\r\n  // parse color\r\n  if (typeof color === 'string') {\r\n    if (SVG.regex.isRgb.test(color)) {\r\n      // get rgb values\r\n      match = SVG.regex.rgb.exec(color.replace(SVG.regex.whitespace,''))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1])\r\n      this.g = parseInt(match[2])\r\n      this.b = parseInt(match[3])\r\n\r\n    } else if (SVG.regex.isHex.test(color)) {\r\n      // get hex values\r\n      match = SVG.regex.hex.exec(fullHex(color))\r\n\r\n      // parse numeric values\r\n      this.r = parseInt(match[1], 16)\r\n      this.g = parseInt(match[2], 16)\r\n      this.b = parseInt(match[3], 16)\r\n\r\n    }\r\n\r\n  } else if (typeof color === 'object') {\r\n    this.r = color.r\r\n    this.g = color.g\r\n    this.b = color.b\r\n\r\n  }\r\n\r\n}\r\n\r\nSVG.extend(SVG.Color, {\r\n  // Default to hex conversion\r\n  toString: function() {\r\n    return this.toHex()\r\n  }\r\n  // Build hex value\r\n, toHex: function() {\r\n    return '#'\r\n      + compToHex(this.r)\r\n      + compToHex(this.g)\r\n      + compToHex(this.b)\r\n  }\r\n  // Build rgb value\r\n, toRgb: function() {\r\n    return 'rgb(' + [this.r, this.g, this.b].join() + ')'\r\n  }\r\n  // Calculate true brightness\r\n, brightness: function() {\r\n    return (this.r / 255 * 0.30)\r\n         + (this.g / 255 * 0.59)\r\n         + (this.b / 255 * 0.11)\r\n  }\r\n  // Make color morphable\r\n, morph: function(color) {\r\n    this.destination = new SVG.Color(color)\r\n\r\n    return this\r\n  }\r\n  // Get morphed color at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // normalise pos\r\n    pos = pos < 0 ? 0 : pos > 1 ? 1 : pos\r\n\r\n    // generate morphed color\r\n    return new SVG.Color({\r\n      r: ~~(this.r + (this.destination.r - this.r) * pos)\r\n    , g: ~~(this.g + (this.destination.g - this.g) * pos)\r\n    , b: ~~(this.b + (this.destination.b - this.b) * pos)\r\n    })\r\n  }\r\n\r\n})\r\n\r\n// Testers\r\n\r\n// Test if given value is a color string\r\nSVG.Color.test = function(color) {\r\n  color += ''\r\n  return SVG.regex.isHex.test(color)\r\n      || SVG.regex.isRgb.test(color)\r\n}\r\n\r\n// Test if given value is a rgb object\r\nSVG.Color.isRgb = function(color) {\r\n  return color && typeof color.r == 'number'\r\n               && typeof color.g == 'number'\r\n               && typeof color.b == 'number'\r\n}\r\n\r\n// Test if given value is a color\r\nSVG.Color.isColor = function(color) {\r\n  return SVG.Color.isRgb(color) || SVG.Color.test(color)\r\n}\n// Module for array conversion\r\nSVG.Array = function(array, fallback) {\r\n  array = (array || []).valueOf()\r\n\r\n  // if array is empty and fallback is provided, use fallback\r\n  if (array.length == 0 && fallback)\r\n    array = fallback.valueOf()\r\n\r\n  // parse array\r\n  this.value = this.parse(array)\r\n}\r\n\r\nSVG.extend(SVG.Array, {\r\n  // Make array morphable\r\n  morph: function(array) {\r\n    this.destination = this.parse(array)\r\n\r\n    // normalize length of arrays\r\n    if (this.value.length != this.destination.length) {\r\n      var lastValue       = this.value[this.value.length - 1]\r\n        , lastDestination = this.destination[this.destination.length - 1]\r\n\r\n      while(this.value.length > this.destination.length)\r\n        this.destination.push(lastDestination)\r\n      while(this.value.length < this.destination.length)\r\n        this.value.push(lastValue)\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Clean up any duplicate points\r\n, settle: function() {\r\n    // find all unique values\r\n    for (var i = 0, il = this.value.length, seen = []; i < il; i++)\r\n      if (seen.indexOf(this.value[i]) == -1)\r\n        seen.push(this.value[i])\r\n\r\n    // set new value\r\n    return this.value = seen\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed array\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i] + (this.destination[i] - this.value[i]) * pos)\r\n\r\n    return new SVG.Array(array)\r\n  }\r\n  // Convert array to string\r\n, toString: function() {\r\n    return this.value.join(' ')\r\n  }\r\n  // Real value\r\n, valueOf: function() {\r\n    return this.value\r\n  }\r\n  // Parse whitespace separated string\r\n, parse: function(array) {\r\n    array = array.valueOf()\r\n\r\n    // if already is an array, no need to parse it\r\n    if (Array.isArray(array)) return array\r\n\r\n    return this.split(array)\r\n  }\r\n  // Strip unnecessary whitespace\r\n, split: function(string) {\r\n    return string.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n  }\r\n  // Reverse array\r\n, reverse: function() {\r\n    this.value.reverse()\r\n\r\n    return this\r\n  }\r\n, clone: function() {\r\n    var clone = new this.constructor()\r\n    clone.value = array_clone(this.value)\r\n    return clone\r\n  }\r\n})\n// Poly points array\r\nSVG.PointArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [[0,0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PointArray.prototype = new SVG.Array\r\nSVG.PointArray.prototype.constructor = SVG.PointArray\r\n\r\nSVG.extend(SVG.PointArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    // convert to a poly point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push(this.value[i].join(','))\r\n\r\n    return array.join(' ')\r\n  }\r\n  // Convert array to line object\r\n, toLine: function() {\r\n    return {\r\n      x1: this.value[0][0]\r\n    , y1: this.value[0][1]\r\n    , x2: this.value[1][0]\r\n    , y2: this.value[1][1]\r\n    }\r\n  }\r\n  // Get morphed array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    // generate morphed point string\r\n    for (var i = 0, il = this.value.length, array = []; i < il; i++)\r\n      array.push([\r\n        this.value[i][0] + (this.destination[i][0] - this.value[i][0]) * pos\r\n      , this.value[i][1] + (this.destination[i][1] - this.value[i][1]) * pos\r\n      ])\r\n\r\n    return new SVG.PointArray(array)\r\n  }\r\n  // Parse point string and flat array\r\n, parse: function(array) {\r\n    var points = []\r\n\r\n    array = array.valueOf()\r\n\r\n    // if it is an array\r\n    if (Array.isArray(array)) {\r\n      // and it is not flat, there is no need to parse it\r\n      if(Array.isArray(array[0])) {\r\n        // make sure to use a clone\r\n        return array.map(function (el) { return el.slice() })\r\n      } else if (array[0].x != null){\r\n        // allow point objects to be passed\r\n        return array.map(function (el) { return [el.x, el.y] })\r\n      }\r\n    } else { // Else, it is considered as a string\r\n      // parse points\r\n      array = array.trim().split(SVG.regex.delimiter).map(parseFloat)\r\n    }\r\n\r\n    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints\r\n    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.\r\n    if (array.length % 2 !== 0) array.pop()\r\n\r\n    // wrap points in two-tuples and parse points as floats\r\n    for(var i = 0, len = array.length; i < len; i = i + 2)\r\n      points.push([ array[i], array[i+1] ])\r\n\r\n    return points\r\n  }\r\n  // Move point string\r\n, move: function(x, y) {\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    // move every point\r\n    if (!isNaN(x) && !isNaN(y))\r\n      for (var i = this.value.length - 1; i >= 0; i--)\r\n        this.value[i] = [this.value[i][0] + x, this.value[i][1] + y]\r\n\r\n    return this\r\n  }\r\n  // Resize poly string\r\n, size: function(width, height) {\r\n    var i, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      if(box.width) this.value[i][0] = ((this.value[i][0] - box.x) * width)  / box.width  + box.x\r\n      if(box.height) this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get bounding box of points\r\n, bbox: function() {\r\n    SVG.parser.poly.setAttribute('points', this.toString())\r\n\r\n    return SVG.parser.poly.getBBox()\r\n  }\r\n})\r\n\nvar pathHandlers = {\r\n  M: function(c, p, p0) {\r\n    p.x = p0.x = c[0]\r\n    p.y = p0.y = c[1]\r\n\r\n    return ['M', p.x, p.y]\r\n  },\r\n  L: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['L', c[0], c[1]]\r\n  },\r\n  H: function(c, p) {\r\n    p.x = c[0]\r\n    return ['H', c[0]]\r\n  },\r\n  V: function(c, p) {\r\n    p.y = c[0]\r\n    return ['V', c[0]]\r\n  },\r\n  C: function(c, p) {\r\n    p.x = c[4]\r\n    p.y = c[5]\r\n    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]\r\n  },\r\n  S: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['S', c[0], c[1], c[2], c[3]]\r\n  },\r\n  Q: function(c, p) {\r\n    p.x = c[2]\r\n    p.y = c[3]\r\n    return ['Q', c[0], c[1], c[2], c[3]]\r\n  },\r\n  T: function(c, p) {\r\n    p.x = c[0]\r\n    p.y = c[1]\r\n    return ['T', c[0], c[1]]\r\n  },\r\n  Z: function(c, p, p0) {\r\n    p.x = p0.x\r\n    p.y = p0.y\r\n    return ['Z']\r\n  },\r\n  A: function(c, p) {\r\n    p.x = c[5]\r\n    p.y = c[6]\r\n    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]\r\n  }\r\n}\r\n\r\nvar mlhvqtcsa = 'mlhvqtcsaz'.split('')\r\n\r\nfor(var i = 0, il = mlhvqtcsa.length; i < il; ++i){\r\n  pathHandlers[mlhvqtcsa[i]] = (function(i){\r\n    return function(c, p, p0) {\r\n      if(i == 'H') c[0] = c[0] + p.x\r\n      else if(i == 'V') c[0] = c[0] + p.y\r\n      else if(i == 'A'){\r\n        c[5] = c[5] + p.x,\r\n        c[6] = c[6] + p.y\r\n      }\r\n      else\r\n        for(var j = 0, jl = c.length; j < jl; ++j) {\r\n          c[j] = c[j] + (j%2 ? p.y : p.x)\r\n        }\r\n\r\n      return pathHandlers[i](c, p, p0)\r\n    }\r\n  })(mlhvqtcsa[i].toUpperCase())\r\n}\r\n\r\n// Path points array\r\nSVG.PathArray = function(array, fallback) {\r\n  SVG.Array.call(this, array, fallback || [['M', 0, 0]])\r\n}\r\n\r\n// Inherit from SVG.Array\r\nSVG.PathArray.prototype = new SVG.Array\r\nSVG.PathArray.prototype.constructor = SVG.PathArray\r\n\r\nSVG.extend(SVG.PathArray, {\r\n  // Convert array to string\r\n  toString: function() {\r\n    return arrayToString(this.value)\r\n  }\r\n  // Move path string\r\n, move: function(x, y) {\r\n    // get bounding box of current situation\r\n    var box = this.bbox()\r\n\r\n    // get relative offset\r\n    x -= box.x\r\n    y -= box.y\r\n\r\n    if (!isNaN(x) && !isNaN(y)) {\r\n      // move every point\r\n      for (var l, i = this.value.length - 1; i >= 0; i--) {\r\n        l = this.value[i][0]\r\n\r\n        if (l == 'M' || l == 'L' || l == 'T')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n\r\n        } else if (l == 'H')  {\r\n          this.value[i][1] += x\r\n\r\n        } else if (l == 'V')  {\r\n          this.value[i][1] += y\r\n\r\n        } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n          this.value[i][1] += x\r\n          this.value[i][2] += y\r\n          this.value[i][3] += x\r\n          this.value[i][4] += y\r\n\r\n          if (l == 'C')  {\r\n            this.value[i][5] += x\r\n            this.value[i][6] += y\r\n          }\r\n\r\n        } else if (l == 'A')  {\r\n          this.value[i][6] += x\r\n          this.value[i][7] += y\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Resize path string\r\n, size: function(width, height) {\r\n    // get bounding box of current situation\r\n    var i, l, box = this.bbox()\r\n\r\n    // recalculate position of all points according to new size\r\n    for (i = this.value.length - 1; i >= 0; i--) {\r\n      l = this.value[i][0]\r\n\r\n      if (l == 'M' || l == 'L' || l == 'T')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'H')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n\r\n      } else if (l == 'V')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.y) * height) / box.height + box.y\r\n\r\n      } else if (l == 'C' || l == 'S' || l == 'Q')  {\r\n        this.value[i][1] = ((this.value[i][1] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][2] = ((this.value[i][2] - box.y) * height) / box.height + box.y\r\n        this.value[i][3] = ((this.value[i][3] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][4] = ((this.value[i][4] - box.y) * height) / box.height + box.y\r\n\r\n        if (l == 'C')  {\r\n          this.value[i][5] = ((this.value[i][5] - box.x) * width)  / box.width  + box.x\r\n          this.value[i][6] = ((this.value[i][6] - box.y) * height) / box.height + box.y\r\n        }\r\n\r\n      } else if (l == 'A')  {\r\n        // resize radii\r\n        this.value[i][1] = (this.value[i][1] * width)  / box.width\r\n        this.value[i][2] = (this.value[i][2] * height) / box.height\r\n\r\n        // move position values\r\n        this.value[i][6] = ((this.value[i][6] - box.x) * width)  / box.width  + box.x\r\n        this.value[i][7] = ((this.value[i][7] - box.y) * height) / box.height + box.y\r\n      }\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Test if the passed path array use the same path data commands as this path array\r\n, equalCommands: function(pathArray) {\r\n    var i, il, equalCommands\r\n\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    equalCommands = this.value.length === pathArray.value.length\r\n    for(i = 0, il = this.value.length; equalCommands && i < il; i++) {\r\n      equalCommands = this.value[i][0] === pathArray.value[i][0]\r\n    }\r\n\r\n    return equalCommands\r\n  }\r\n  // Make path array morphable\r\n, morph: function(pathArray) {\r\n    pathArray = new SVG.PathArray(pathArray)\r\n\r\n    if(this.equalCommands(pathArray)) {\r\n      this.destination = pathArray\r\n    } else {\r\n      this.destination = null\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Get morphed path array at given position\r\n, at: function(pos) {\r\n    // make sure a destination is defined\r\n    if (!this.destination) return this\r\n\r\n    var sourceArray = this.value\r\n      , destinationArray = this.destination.value\r\n      , array = [], pathArray = new SVG.PathArray()\r\n      , i, il, j, jl\r\n\r\n    // Animate has specified in the SVG spec\r\n    // See: https://www.w3.org/TR/SVG11/paths.html#PathElement\r\n    for (i = 0, il = sourceArray.length; i < il; i++) {\r\n      array[i] = [sourceArray[i][0]]\r\n      for(j = 1, jl = sourceArray[i].length; j < jl; j++) {\r\n        array[i][j] = sourceArray[i][j] + (destinationArray[i][j] - sourceArray[i][j]) * pos\r\n      }\r\n      // For the two flags of the elliptical arc command, the SVG spec say:\r\n      // Flags and booleans are interpolated as fractions between zero and one, with any non-zero value considered to be a value of one/true\r\n      // Elliptical arc command as an array followed by corresponding indexes:\r\n      // ['A', rx, ry, x-axis-rotation, large-arc-flag, sweep-flag, x, y]\r\n      //   0    1   2        3                 4             5      6  7\r\n      if(array[i][0] === 'A') {\r\n        array[i][4] = +(array[i][4] != 0)\r\n        array[i][5] = +(array[i][5] != 0)\r\n      }\r\n    }\r\n\r\n    // Directly modify the value of a path array, this is done this way for performance\r\n    pathArray.value = array\r\n    return pathArray\r\n  }\r\n  // Absolutize and parse path to array\r\n, parse: function(array) {\r\n    // if it's already a patharray, no need to parse it\r\n    if (array instanceof SVG.PathArray) return array.valueOf()\r\n\r\n    // prepare for parsing\r\n    var i, x0, y0, s, seg, arr\r\n      , x = 0\r\n      , y = 0\r\n      , paramCnt = { 'M':2, 'L':2, 'H':1, 'V':1, 'C':6, 'S':4, 'Q':4, 'T':2, 'A':7, 'Z':0 }\r\n\r\n    if(typeof array == 'string'){\r\n\r\n      array = array\r\n        .replace(SVG.regex.numbersWithDots, pathRegReplace) // convert 45.123.123 to 45.123 .123\r\n        .replace(SVG.regex.pathLetters, ' $& ') // put some room between letters and numbers\r\n        .replace(SVG.regex.hyphen, '$1 -')      // add space before hyphen\r\n        .trim()                                 // trim\r\n        .split(SVG.regex.delimiter)   // split into array\r\n\r\n    }else{\r\n      array = array.reduce(function(prev, curr){\r\n        return [].concat.call(prev, curr)\r\n      }, [])\r\n    }\r\n\r\n    // array now is an array containing all parts of a path e.g. ['M', '0', '0', 'L', '30', '30' ...]\r\n    var arr = []\r\n      , p = new SVG.Point()\r\n      , p0 = new SVG.Point()\r\n      , index = 0\r\n      , len = array.length\r\n\r\n    do{\r\n      // Test if we have a path letter\r\n      if(SVG.regex.isPathLetter.test(array[index])){\r\n        s = array[index]\r\n        ++index\r\n      // If last letter was a move command and we got no new, it defaults to [L]ine\r\n      }else if(s == 'M'){\r\n        s = 'L'\r\n      }else if(s == 'm'){\r\n        s = 'l'\r\n      }\r\n\r\n      arr.push(pathHandlers[s].call(null,\r\n          array.slice(index, (index = index + paramCnt[s.toUpperCase()])).map(parseFloat),\r\n          p, p0\r\n        )\r\n      )\r\n\r\n    }while(len > index)\r\n\r\n    return arr\r\n\r\n  }\r\n  // Get bounding box of path\r\n, bbox: function() {\r\n    SVG.parser.path.setAttribute('d', this.toString())\r\n\r\n    return SVG.parser.path.getBBox()\r\n  }\r\n\r\n})\r\n\n// Module for unit convertions\r\nSVG.Number = SVG.invent({\r\n  // Initialize\r\n  create: function(value, unit) {\r\n    // initialize defaults\r\n    this.value = 0\r\n    this.unit  = unit || ''\r\n\r\n    // parse value\r\n    if (typeof value === 'number') {\r\n      // ensure a valid numeric value\r\n      this.value = isNaN(value) ? 0 : !isFinite(value) ? (value < 0 ? -3.4e+38 : +3.4e+38) : value\r\n\r\n    } else if (typeof value === 'string') {\r\n      unit = value.match(SVG.regex.numberAndUnit)\r\n\r\n      if (unit) {\r\n        // make value numeric\r\n        this.value = parseFloat(unit[1])\r\n\r\n        // normalize\r\n        if (unit[5] == '%')\r\n          this.value /= 100\r\n        else if (unit[5] == 's')\r\n          this.value *= 1000\r\n\r\n        // store unit\r\n        this.unit = unit[5]\r\n      }\r\n\r\n    } else {\r\n      if (value instanceof SVG.Number) {\r\n        this.value = value.valueOf()\r\n        this.unit  = value.unit\r\n      }\r\n    }\r\n\r\n  }\r\n  // Add methods\r\n, extend: {\r\n    // Stringalize\r\n    toString: function() {\r\n      return (\r\n        this.unit == '%' ?\r\n          ~~(this.value * 1e8) / 1e6:\r\n        this.unit == 's' ?\r\n          this.value / 1e3 :\r\n          this.value\r\n      ) + this.unit\r\n    }\r\n  , toJSON: function() {\r\n      return this.toString()\r\n    }\r\n  , // Convert to primitive\r\n    valueOf: function() {\r\n      return this.value\r\n    }\r\n    // Add number\r\n  , plus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this + number, this.unit || number.unit)\r\n    }\r\n    // Subtract number\r\n  , minus: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this - number, this.unit || number.unit)\r\n    }\r\n    // Multiply number\r\n  , times: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this * number, this.unit || number.unit)\r\n    }\r\n    // Divide number\r\n  , divide: function(number) {\r\n      number = new SVG.Number(number)\r\n      return new SVG.Number(this / number, this.unit || number.unit)\r\n    }\r\n    // Convert to different unit\r\n  , to: function(unit) {\r\n      var number = new SVG.Number(this)\r\n\r\n      if (typeof unit === 'string')\r\n        number.unit = unit\r\n\r\n      return number\r\n    }\r\n    // Make number morphable\r\n  , morph: function(number) {\r\n      this.destination = new SVG.Number(number)\r\n\r\n      if(number.relative) {\r\n        this.destination.value += this.value\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Get morphed number at given position\r\n  , at: function(pos) {\r\n      // Make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // Generate new morphed number\r\n      return new SVG.Number(this.destination)\r\n          .minus(this)\r\n          .times(pos)\r\n          .plus(this)\r\n    }\r\n\r\n  }\r\n})\r\n\n\r\nSVG.Element = SVG.invent({\r\n  // Initialize node\r\n  create: function(node) {\r\n    // make stroke value accessible dynamically\r\n    this._stroke = SVG.defaults.attrs.stroke\r\n    this._event = null\r\n    this._events = {}\r\n\r\n    // initialize data object\r\n    this.dom = {}\r\n\r\n    // create circular reference\r\n    if (this.node = node) {\r\n      this.type = node.nodeName\r\n      this.node.instance = this\r\n      this._events = node._events || {}\r\n\r\n      // store current attribute value\r\n      this._stroke = node.getAttribute('stroke') || this._stroke\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return this.attr('y', y)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.x() + this.width() / 2 : this.x(x - this.width() / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.y() + this.height() / 2 : this.y(y - this.height() / 2)\r\n    }\r\n    // Move element to given x and y values\r\n  , move: function(x, y) {\r\n      return this.x(x).y(y)\r\n    }\r\n    // Move element by its center\r\n  , center: function(x, y) {\r\n      return this.cx(x).cy(y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return this.attr('width', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('height', height)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .width(new SVG.Number(p.width))\r\n        .height(new SVG.Number(p.height))\r\n    }\r\n    // Clone element\r\n  , clone: function(parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(this.node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) parent.add(clone)\r\n      else this.after(clone)\r\n\r\n      return clone\r\n    }\r\n    // Remove element\r\n  , remove: function() {\r\n      if (this.parent())\r\n        this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n    // Replace element\r\n  , replace: function(element) {\r\n      this.after(element).remove()\r\n\r\n      return element\r\n    }\r\n    // Add element to given container and return self\r\n  , addTo: function(parent) {\r\n      return parent.put(this)\r\n    }\r\n    // Add element to given container and return container\r\n  , putIn: function(parent) {\r\n      return parent.add(this)\r\n    }\r\n    // Get / set id\r\n  , id: function(id) {\r\n      return this.attr('id', id)\r\n    }\r\n    // Checks whether the given point inside the bounding box of the element\r\n  , inside: function(x, y) {\r\n      var box = this.bbox()\r\n\r\n      return x > box.x\r\n          && y > box.y\r\n          && x < box.x + box.width\r\n          && y < box.y + box.height\r\n    }\r\n    // Show element\r\n  , show: function() {\r\n      return this.style('display', '')\r\n    }\r\n    // Hide element\r\n  , hide: function() {\r\n      return this.style('display', 'none')\r\n    }\r\n    // Is element visible?\r\n  , visible: function() {\r\n      return this.style('display') != 'none'\r\n    }\r\n    // Return id on string conversion\r\n  , toString: function() {\r\n      return this.attr('id')\r\n    }\r\n    // Return array of classes on the node\r\n  , classes: function() {\r\n      var attr = this.attr('class')\r\n\r\n      return attr == null ? [] : attr.trim().split(SVG.regex.delimiter)\r\n    }\r\n    // Return true if class exists on the node, false otherwise\r\n  , hasClass: function(name) {\r\n      return this.classes().indexOf(name) != -1\r\n    }\r\n    // Add class to the node\r\n  , addClass: function(name) {\r\n      if (!this.hasClass(name)) {\r\n        var array = this.classes()\r\n        array.push(name)\r\n        this.attr('class', array.join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove class from the node\r\n  , removeClass: function(name) {\r\n      if (this.hasClass(name)) {\r\n        this.attr('class', this.classes().filter(function(c) {\r\n          return c != name\r\n        }).join(' '))\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Toggle the presence of a class on the node\r\n  , toggleClass: function(name) {\r\n      return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)\r\n    }\r\n    // Get referenced element form attribute value\r\n  , reference: function(attr) {\r\n      return SVG.get(this.attr(attr))\r\n    }\r\n    // Returns the parent element instance\r\n  , parent: function(type) {\r\n      var parent = this\r\n\r\n      // check for parent\r\n      if(!parent.node.parentNode) return null\r\n\r\n      // get parent element\r\n      parent = SVG.adopt(parent.node.parentNode)\r\n\r\n      if(!type) return parent\r\n\r\n      // loop trough ancestors if type is given\r\n      while(parent && parent.node instanceof window.SVGElement){\r\n        if(typeof type === 'string' ? parent.matches(type) : parent instanceof type) return parent\r\n        if(!parent.node.parentNode || parent.node.parentNode.nodeName == '#document' || parent.node.parentNode.nodeName == '#document-fragment') return null // #759, #720\r\n        parent = SVG.adopt(parent.node.parentNode)\r\n      }\r\n    }\r\n    // Get parent document\r\n  , doc: function() {\r\n      return this instanceof SVG.Doc ? this : this.parent(SVG.Doc)\r\n    }\r\n    // return array of all ancestors of given type up to the root svg\r\n  , parents: function(type) {\r\n      var parents = [], parent = this\r\n\r\n      do{\r\n        parent = parent.parent(type)\r\n        if(!parent || !parent.node) break\r\n\r\n        parents.push(parent)\r\n      } while(parent.parent)\r\n\r\n      return parents\r\n    }\r\n    // matches the element vs a css selector\r\n  , matches: function(selector){\r\n      return matches(this.node, selector)\r\n    }\r\n    // Returns the svg node to call native svg methods on it\r\n  , native: function() {\r\n      return this.node\r\n    }\r\n    // Import raw svg\r\n  , svg: function(svg) {\r\n      // create temporary holder\r\n      var well = document.createElement('svg')\r\n\r\n      // act as a setter if svg is given\r\n      if (svg && this instanceof SVG.Parent) {\r\n        // dump raw svg\r\n        well.innerHTML = '<svg>' + svg.replace(/\\n/, '').replace(/<([\\w:-]+)([^<]+?)\\/>/g, '<$1$2></$1>') + '</svg>'\r\n\r\n        // transplant nodes\r\n        for (var i = 0, il = well.firstChild.childNodes.length; i < il; i++)\r\n          this.node.appendChild(well.firstChild.firstChild)\r\n\r\n      // otherwise act as a getter\r\n      } else {\r\n        // create a wrapping svg element in case of partial content\r\n        well.appendChild(svg = document.createElement('svg'))\r\n\r\n        // write svgjs data to the dom\r\n        this.writeDataToDom()\r\n\r\n        // insert a copy of this node\r\n        svg.appendChild(this.node.cloneNode(true))\r\n\r\n        // return target element\r\n        return well.innerHTML.replace(/^<svg>/, '').replace(/<\\/svg>$/, '')\r\n      }\r\n\r\n      return this\r\n    }\r\n  // write svgjs data to the dom\r\n  , writeDataToDom: function() {\r\n\r\n      // dump variables recursively\r\n      if(this.each || this.lines){\r\n        var fn = this.each ? this : this.lines();\r\n        fn.each(function(){\r\n          this.writeDataToDom()\r\n        })\r\n      }\r\n\r\n      // remove previously set data\r\n      this.node.removeAttribute('svgjs:data')\r\n\r\n      if(Object.keys(this.dom).length)\r\n        this.node.setAttribute('svgjs:data', JSON.stringify(this.dom)) // see #428\r\n\r\n      return this\r\n    }\r\n  // set given data to the elements data property\r\n  , setData: function(o){\r\n      this.dom = o\r\n      return this\r\n    }\r\n  , is: function(obj){\r\n      return is(this, obj)\r\n    }\r\n  }\r\n})\r\n\nSVG.easing = {\r\n  '-': function(pos){return pos}\r\n, '<>':function(pos){return -Math.cos(pos * Math.PI) / 2 + 0.5}\r\n, '>': function(pos){return  Math.sin(pos * Math.PI / 2)}\r\n, '<': function(pos){return -Math.cos(pos * Math.PI / 2) + 1}\r\n}\r\n\r\nSVG.morph = function(pos){\r\n  return function(from, to) {\r\n    return new SVG.MorphObj(from, to).at(pos)\r\n  }\r\n}\r\n\r\nSVG.Situation = SVG.invent({\r\n\r\n  create: function(o){\r\n    this.init = false\r\n    this.reversed = false\r\n    this.reversing = false\r\n\r\n    this.duration = new SVG.Number(o.duration).valueOf()\r\n    this.delay = new SVG.Number(o.delay).valueOf()\r\n\r\n    this.start = +new Date() + this.delay\r\n    this.finish = this.start + this.duration\r\n    this.ease = o.ease\r\n\r\n    // this.loop is incremented from 0 to this.loops\r\n    // it is also incremented when in an infinite loop (when this.loops is true)\r\n    this.loop = 0\r\n    this.loops = false\r\n\r\n    this.animations = {\r\n      // functionToCall: [list of morphable objects]\r\n      // e.g. move: [SVG.Number, SVG.Number]\r\n    }\r\n\r\n    this.attrs = {\r\n      // holds all attributes which are not represented from a function svg.js provides\r\n      // e.g. someAttr: SVG.Number\r\n    }\r\n\r\n    this.styles = {\r\n      // holds all styles which should be animated\r\n      // e.g. fill-color: SVG.Color\r\n    }\r\n\r\n    this.transforms = [\r\n      // holds all transformations as transformation objects\r\n      // e.g. [SVG.Rotate, SVG.Translate, SVG.Matrix]\r\n    ]\r\n\r\n    this.once = {\r\n      // functions to fire at a specific position\r\n      // e.g. \"0.5\": function foo(){}\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\n\r\nSVG.FX = SVG.invent({\r\n\r\n  create: function(element) {\r\n    this._target = element\r\n    this.situations = []\r\n    this.active = false\r\n    this.situation = null\r\n    this.paused = false\r\n    this.lastPos = 0\r\n    this.pos = 0\r\n    // The absolute position of an animation is its position in the context of its complete duration (including delay and loops)\r\n    // When performing a delay, absPos is below 0 and when performing a loop, its value is above 1\r\n    this.absPos = 0\r\n    this._speed = 1\r\n  }\r\n\r\n, extend: {\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param o object || number In case of Object it holds all parameters. In case of number its the duration of the animation\r\n     * @param ease function || string Function which should be used for easing or easing keyword\r\n     * @param delay Number indicating the delay before the animation starts\r\n     * @return target || this\r\n     */\r\n    animate: function(o, ease, delay){\r\n\r\n      if(typeof o == 'object'){\r\n        ease = o.ease\r\n        delay = o.delay\r\n        o = o.duration\r\n      }\r\n\r\n      var situation = new SVG.Situation({\r\n        duration: o || 1000,\r\n        delay: delay || 0,\r\n        ease: SVG.easing[ease || '-'] || ease\r\n      })\r\n\r\n      this.queue(situation)\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * sets a delay before the next element of the queue is called\r\n     * @param delay Duration of delay in milliseconds\r\n     * @return this.target()\r\n     */\r\n  , delay: function(delay){\r\n      // The delay is performed by an empty situation with its duration\r\n      // attribute set to the duration of the delay\r\n      var situation = new SVG.Situation({\r\n        duration: delay,\r\n        delay: 0,\r\n        ease: SVG.easing['-']\r\n      })\r\n\r\n      return this.queue(situation)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the target of this animation\r\n     * @param null || target SVG.Element which should be set as new target\r\n     * @return target || this\r\n     */\r\n  , target: function(target){\r\n      if(target && target instanceof SVG.Element){\r\n        this._target = target\r\n        return this\r\n      }\r\n\r\n      return this._target\r\n    }\r\n\r\n    // returns the absolute position at a given time\r\n  , timeToAbsPos: function(timestamp){\r\n      return (timestamp - this.situation.start) / (this.situation.duration/this._speed)\r\n    }\r\n\r\n    // returns the timestamp from a given absolute positon\r\n  , absPosToTime: function(absPos){\r\n      return this.situation.duration/this._speed * absPos + this.situation.start\r\n    }\r\n\r\n    // starts the animationloop\r\n  , startAnimFrame: function(){\r\n      this.stopAnimFrame()\r\n      this.animationFrame = window.requestAnimationFrame(function(){ this.step() }.bind(this))\r\n    }\r\n\r\n    // cancels the animationframe\r\n  , stopAnimFrame: function(){\r\n      window.cancelAnimationFrame(this.animationFrame)\r\n    }\r\n\r\n    // kicks off the animation - only does something when the queue is currently not active and at least one situation is set\r\n  , start: function(){\r\n      // dont start if already started\r\n      if(!this.active && this.situation){\r\n        this.active = true\r\n        this.startCurrent()\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // start the current situation\r\n  , startCurrent: function(){\r\n      this.situation.start = +new Date + this.situation.delay/this._speed\r\n      this.situation.finish = this.situation.start + this.situation.duration/this._speed\r\n      return this.initAnimations().step()\r\n    }\r\n\r\n    /**\r\n     * adds a function / Situation to the animation queue\r\n     * @param fn function / situation to add\r\n     * @return this\r\n     */\r\n  , queue: function(fn){\r\n      if(typeof fn == 'function' || fn instanceof SVG.Situation)\r\n        this.situations.push(fn)\r\n\r\n      if(!this.situation) this.situation = this.situations.shift()\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * pulls next element from the queue and execute it\r\n     * @return this\r\n     */\r\n  , dequeue: function(){\r\n      // stop current animation\r\n      this.stop()\r\n\r\n      // get next animation from queue\r\n      this.situation = this.situations.shift()\r\n\r\n      if(this.situation){\r\n        if(this.situation instanceof SVG.Situation) {\r\n          this.start()\r\n        } else {\r\n          // If it is not a SVG.Situation, then it is a function, we execute it\r\n          this.situation.call(this)\r\n        }\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    // updates all animations to the current state of the element\r\n    // this is important when one property could be changed from another property\r\n  , initAnimations: function() {\r\n      var i, j, source\r\n      var s = this.situation\r\n\r\n      if(s.init) return this\r\n\r\n      for(i in s.animations){\r\n        source = this.target()[i]()\r\n\r\n        if(!Array.isArray(source)) {\r\n          source = [source]\r\n        }\r\n\r\n        if(!Array.isArray(s.animations[i])) {\r\n          s.animations[i] = [s.animations[i]]\r\n        }\r\n\r\n        //if(s.animations[i].length > source.length) {\r\n        //  source.concat = source.concat(s.animations[i].slice(source.length, s.animations[i].length))\r\n        //}\r\n\r\n        for(j = source.length; j--;) {\r\n          // The condition is because some methods return a normal number instead\r\n          // of a SVG.Number\r\n          if(s.animations[i][j] instanceof SVG.Number)\r\n            source[j] = new SVG.Number(source[j])\r\n\r\n          s.animations[i][j] = source[j].morph(s.animations[i][j])\r\n        }\r\n      }\r\n\r\n      for(i in s.attrs){\r\n        s.attrs[i] = new SVG.MorphObj(this.target().attr(i), s.attrs[i])\r\n      }\r\n\r\n      for(i in s.styles){\r\n        s.styles[i] = new SVG.MorphObj(this.target().style(i), s.styles[i])\r\n      }\r\n\r\n      s.initialTransformation = this.target().matrixify()\r\n\r\n      s.init = true\r\n      return this\r\n    }\r\n  , clearQueue: function(){\r\n      this.situations = []\r\n      return this\r\n    }\r\n  , clearCurrent: function(){\r\n      this.situation = null\r\n      return this\r\n    }\r\n    /** stops the animation immediately\r\n     * @param jumpToEnd A Boolean indicating whether to complete the current animation immediately.\r\n     * @param clearQueue A Boolean indicating whether to remove queued animation as well.\r\n     * @return this\r\n     */\r\n  , stop: function(jumpToEnd, clearQueue){\r\n      var active = this.active\r\n      this.active = false\r\n\r\n      if(clearQueue){\r\n        this.clearQueue()\r\n      }\r\n\r\n      if(jumpToEnd && this.situation){\r\n        // initialize the situation if it was not\r\n        !active && this.startCurrent()\r\n        this.atEnd()\r\n      }\r\n\r\n      this.stopAnimFrame()\r\n\r\n      return this.clearCurrent()\r\n    }\r\n\r\n    /** resets the element to the state where the current element has started\r\n     * @return this\r\n     */\r\n  , reset: function(){\r\n      if(this.situation){\r\n        var temp = this.situation\r\n        this.stop()\r\n        this.situation = temp\r\n        this.atStart()\r\n      }\r\n      return this\r\n    }\r\n\r\n    // Stop the currently-running animation, remove all queued animations, and complete all animations for the element.\r\n  , finish: function(){\r\n\r\n      this.stop(true, false)\r\n\r\n      while(this.dequeue().situation && this.stop(true, false));\r\n\r\n      this.clearQueue().clearCurrent()\r\n\r\n      return this\r\n    }\r\n\r\n    // set the internal animation pointer at the start position, before any loops, and updates the visualisation\r\n  , atStart: function() {\r\n      return this.at(0, true)\r\n    }\r\n\r\n    // set the internal animation pointer at the end position, after all the loops, and updates the visualisation\r\n  , atEnd: function() {\r\n      if (this.situation.loops === true) {\r\n        // If in a infinite loop, we end the current iteration\r\n        this.situation.loops = this.situation.loop + 1\r\n      }\r\n\r\n      if(typeof this.situation.loops == 'number') {\r\n        // If performing a finite number of loops, we go after all the loops\r\n        return this.at(this.situation.loops, true)\r\n      } else {\r\n        // If no loops, we just go at the end\r\n        return this.at(1, true)\r\n      }\r\n    }\r\n\r\n    // set the internal animation pointer to the specified position and updates the visualisation\r\n    // if isAbsPos is true, pos is treated as an absolute position\r\n  , at: function(pos, isAbsPos){\r\n      var durDivSpd = this.situation.duration/this._speed\r\n\r\n      this.absPos = pos\r\n      // If pos is not an absolute position, we convert it into one\r\n      if (!isAbsPos) {\r\n        if (this.situation.reversed) this.absPos = 1 - this.absPos\r\n        this.absPos += this.situation.loop\r\n      }\r\n\r\n      this.situation.start = +new Date - this.absPos * durDivSpd\r\n      this.situation.finish = this.situation.start + durDivSpd\r\n\r\n      return this.step(true)\r\n    }\r\n\r\n    /**\r\n     * sets or returns the speed of the animations\r\n     * @param speed null || Number The new speed of the animations\r\n     * @return Number || this\r\n     */\r\n  , speed: function(speed){\r\n      if (speed === 0) return this.pause()\r\n\r\n      if (speed) {\r\n        this._speed = speed\r\n        // We use an absolute position here so that speed can affect the delay before the animation\r\n        return this.at(this.absPos, true)\r\n      } else return this._speed\r\n    }\r\n\r\n    // Make loopable\r\n  , loop: function(times, reverse) {\r\n      var c = this.last()\r\n\r\n      // store total loops\r\n      c.loops = (times != null) ? times : true\r\n      c.loop = 0\r\n\r\n      if(reverse) c.reversing = true\r\n      return this\r\n    }\r\n\r\n    // pauses the animation\r\n  , pause: function(){\r\n      this.paused = true\r\n      this.stopAnimFrame()\r\n\r\n      return this\r\n    }\r\n\r\n    // unpause the animation\r\n  , play: function(){\r\n      if(!this.paused) return this\r\n      this.paused = false\r\n      // We use an absolute position here so that the delay before the animation can be paused\r\n      return this.at(this.absPos, true)\r\n    }\r\n\r\n    /**\r\n     * toggle or set the direction of the animation\r\n     * true sets direction to backwards while false sets it to forwards\r\n     * @param reversed Boolean indicating whether to reverse the animation or not (default: toggle the reverse status)\r\n     * @return this\r\n     */\r\n  , reverse: function(reversed){\r\n      var c = this.last()\r\n\r\n      if(typeof reversed == 'undefined') c.reversed = !c.reversed\r\n      else c.reversed = reversed\r\n\r\n      return this\r\n    }\r\n\r\n\r\n    /**\r\n     * returns a float from 0-1 indicating the progress of the current animation\r\n     * @param eased Boolean indicating whether the returned position should be eased or not\r\n     * @return number\r\n     */\r\n  , progress: function(easeIt){\r\n      return easeIt ? this.situation.ease(this.pos) : this.pos\r\n    }\r\n\r\n    /**\r\n     * adds a callback function which is called when the current animation is finished\r\n     * @param fn Function which should be executed as callback\r\n     * @return number\r\n     */\r\n  , after: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function wrapper(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, c)\r\n              this.off('finished.fx', wrapper) // prevent memory leak\r\n            }\r\n          }\r\n\r\n      this.target().on('finished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // adds a callback which is called whenever one animation step is performed\r\n  , during: function(fn){\r\n      var c = this.last()\r\n        , wrapper = function(e){\r\n            if(e.detail.situation == c){\r\n              fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, c)\r\n            }\r\n          }\r\n\r\n      // see above\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.after(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls after ALL animations in the queue are finished\r\n  , afterAll: function(fn){\r\n      var wrapper = function wrapper(e){\r\n            fn.call(this)\r\n            this.off('allfinished.fx', wrapper)\r\n          }\r\n\r\n      // see above\r\n      this.target().off('allfinished.fx', wrapper).on('allfinished.fx', wrapper)\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n    // calls on every animation step for all animations\r\n  , duringAll: function(fn){\r\n      var wrapper = function(e){\r\n            fn.call(this, e.detail.pos, SVG.morph(e.detail.pos), e.detail.eased, e.detail.situation)\r\n          }\r\n\r\n      this.target().off('during.fx', wrapper).on('during.fx', wrapper)\r\n\r\n      this.afterAll(function(){\r\n        this.off('during.fx', wrapper)\r\n      })\r\n\r\n      return this._callStart()\r\n    }\r\n\r\n  , last: function(){\r\n      return this.situations.length ? this.situations[this.situations.length-1] : this.situation\r\n    }\r\n\r\n    // adds one property to the animations\r\n  , add: function(method, args, type){\r\n      this.last()[type || 'animations'][method] = args\r\n      return this._callStart()\r\n    }\r\n\r\n    /** perform one step of the animation\r\n     *  @param ignoreTime Boolean indicating whether to ignore time and use position directly or recalculate position based on time\r\n     *  @return this\r\n     */\r\n  , step: function(ignoreTime){\r\n\r\n      // convert current time to an absolute position\r\n      if(!ignoreTime) this.absPos = this.timeToAbsPos(+new Date)\r\n\r\n      // This part convert an absolute position to a position\r\n      if(this.situation.loops !== false) {\r\n        var absPos, absPosInt, lastLoop\r\n\r\n        // If the absolute position is below 0, we just treat it as if it was 0\r\n        absPos = Math.max(this.absPos, 0)\r\n        absPosInt = Math.floor(absPos)\r\n\r\n        if(this.situation.loops === true || absPosInt < this.situation.loops) {\r\n          this.pos = absPos - absPosInt\r\n          lastLoop = this.situation.loop\r\n          this.situation.loop = absPosInt\r\n        } else {\r\n          this.absPos = this.situation.loops\r\n          this.pos = 1\r\n          // The -1 here is because we don't want to toggle reversed when all the loops have been completed\r\n          lastLoop = this.situation.loop - 1\r\n          this.situation.loop = this.situation.loops\r\n        }\r\n\r\n        if(this.situation.reversing) {\r\n          // Toggle reversed if an odd number of loops as occured since the last call of step\r\n          this.situation.reversed = this.situation.reversed != Boolean((this.situation.loop - lastLoop) % 2)\r\n        }\r\n\r\n      } else {\r\n        // If there are no loop, the absolute position must not be above 1\r\n        this.absPos = Math.min(this.absPos, 1)\r\n        this.pos = this.absPos\r\n      }\r\n\r\n      // while the absolute position can be below 0, the position must not be below 0\r\n      if(this.pos < 0) this.pos = 0\r\n\r\n      if(this.situation.reversed) this.pos = 1 - this.pos\r\n\r\n\r\n      // apply easing\r\n      var eased = this.situation.ease(this.pos)\r\n\r\n      // call once-callbacks\r\n      for(var i in this.situation.once){\r\n        if(i > this.lastPos && i <= eased){\r\n          this.situation.once[i].call(this.target(), this.pos, eased)\r\n          delete this.situation.once[i]\r\n        }\r\n      }\r\n\r\n      // fire during callback with position, eased position and current situation as parameter\r\n      if(this.active) this.target().fire('during', {pos: this.pos, eased: eased, fx: this, situation: this.situation})\r\n\r\n      // the user may call stop or finish in the during callback\r\n      // so make sure that we still have a valid situation\r\n      if(!this.situation){\r\n        return this\r\n      }\r\n\r\n      // apply the actual animation to every property\r\n      this.eachAt()\r\n\r\n      // do final code when situation is finished\r\n      if((this.pos == 1 && !this.situation.reversed) || (this.situation.reversed && this.pos == 0)){\r\n\r\n        // stop animation callback\r\n        this.stopAnimFrame()\r\n\r\n        // fire finished callback with current situation as parameter\r\n        this.target().fire('finished', {fx:this, situation: this.situation})\r\n\r\n        if(!this.situations.length){\r\n          this.target().fire('allfinished')\r\n\r\n          // Recheck the length since the user may call animate in the afterAll callback\r\n          if(!this.situations.length){\r\n            this.target().off('.fx') // there shouldnt be any binding left, but to make sure...\r\n            this.active = false\r\n          }\r\n        }\r\n\r\n        // start next animation\r\n        if(this.active) this.dequeue()\r\n        else this.clearCurrent()\r\n\r\n      }else if(!this.paused && this.active){\r\n        // we continue animating when we are not at the end\r\n        this.startAnimFrame()\r\n      }\r\n\r\n      // save last eased position for once callback triggering\r\n      this.lastPos = eased\r\n      return this\r\n\r\n    }\r\n\r\n    // calculates the step for every property and calls block with it\r\n  , eachAt: function(){\r\n      var i, len, at, self = this, target = this.target(), s = this.situation\r\n\r\n      // apply animations which can be called trough a method\r\n      for(i in s.animations){\r\n\r\n        at = [].concat(s.animations[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target[i].apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with attr()\r\n      for(i in s.attrs){\r\n\r\n        at = [i].concat(s.attrs[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.attr.apply(target, at)\r\n\r\n      }\r\n\r\n      // apply animation which has to be applied with style()\r\n      for(i in s.styles){\r\n\r\n        at = [i].concat(s.styles[i]).map(function(el){\r\n          return typeof el !== 'string' && el.at ? el.at(s.ease(self.pos), self.pos) : el\r\n        })\r\n\r\n        target.style.apply(target, at)\r\n\r\n      }\r\n\r\n      // animate initialTransformation which has to be chained\r\n      if(s.transforms.length){\r\n\r\n        // get initial initialTransformation\r\n        at = s.initialTransformation\r\n        for(i = 0, len = s.transforms.length; i < len; i++){\r\n\r\n          // get next transformation in chain\r\n          var a = s.transforms[i]\r\n\r\n          // multiply matrix directly\r\n          if(a instanceof SVG.Matrix){\r\n\r\n            if(a.relative){\r\n              at = at.multiply(new SVG.Matrix().morph(a).at(s.ease(this.pos)))\r\n            }else{\r\n              at = at.morph(a).at(s.ease(this.pos))\r\n            }\r\n            continue\r\n          }\r\n\r\n          // when transformation is absolute we have to reset the needed transformation first\r\n          if(!a.relative)\r\n            a.undo(at.extract())\r\n\r\n          // and reapply it after\r\n          at = at.multiply(a.at(s.ease(this.pos)))\r\n\r\n        }\r\n\r\n        // set new matrix on element\r\n        target.matrix(at)\r\n      }\r\n\r\n      return this\r\n\r\n    }\r\n\r\n\r\n    // adds an once-callback which is called at a specific position and never again\r\n  , once: function(pos, fn, isEased){\r\n      var c = this.last()\r\n      if(!isEased) pos = c.ease(pos)\r\n\r\n      c.once[pos] = fn\r\n\r\n      return this\r\n    }\r\n\r\n  , _callStart: function() {\r\n      setTimeout(function(){this.start()}.bind(this), 0)\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n, parent: SVG.Element\r\n\r\n  // Add method to parent elements\r\n, construct: {\r\n    // Get fx module or create a new one, then animate with given duration and ease\r\n    animate: function(o, ease, delay) {\r\n      return (this.fx || (this.fx = new SVG.FX(this))).animate(o, ease, delay)\r\n    }\r\n  , delay: function(delay){\r\n      return (this.fx || (this.fx = new SVG.FX(this))).delay(delay)\r\n    }\r\n  , stop: function(jumpToEnd, clearQueue) {\r\n      if (this.fx)\r\n        this.fx.stop(jumpToEnd, clearQueue)\r\n\r\n      return this\r\n    }\r\n  , finish: function() {\r\n      if (this.fx)\r\n        this.fx.finish()\r\n\r\n      return this\r\n    }\r\n    // Pause current animation\r\n  , pause: function() {\r\n      if (this.fx)\r\n        this.fx.pause()\r\n\r\n      return this\r\n    }\r\n    // Play paused current animation\r\n  , play: function() {\r\n      if (this.fx)\r\n        this.fx.play()\r\n\r\n      return this\r\n    }\r\n    // Set/Get the speed of the animations\r\n  , speed: function(speed) {\r\n      if (this.fx)\r\n        if (speed == null)\r\n          return this.fx.speed()\r\n        else\r\n          this.fx.speed(speed)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\n// MorphObj is used whenever no morphable object is given\r\nSVG.MorphObj = SVG.invent({\r\n\r\n  create: function(from, to){\r\n    // prepare color for morphing\r\n    if(SVG.Color.isColor(to)) return new SVG.Color(from).morph(to)\r\n    // check if we have a list of values\r\n    if(SVG.regex.delimiter.test(from)) {\r\n      // prepare path for morphing\r\n      if(SVG.regex.pathLetters.test(from)) return new SVG.PathArray(from).morph(to)\r\n      // prepare value list for morphing\r\n      else return new SVG.Array(from).morph(to)\r\n    }\r\n    // prepare number for morphing\r\n    if(SVG.regex.numberAndUnit.test(to)) return new SVG.Number(from).morph(to)\r\n\r\n    // prepare for plain morphing\r\n    this.value = from\r\n    this.destination = to\r\n  }\r\n\r\n, extend: {\r\n    at: function(pos, real){\r\n      return real < 1 ? this.value : this.destination\r\n    },\r\n\r\n    valueOf: function(){\r\n      return this.value\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  // Add animatable attributes\r\n  attr: function(a, v, relative) {\r\n    // apply attributes individually\r\n    if (typeof a == 'object') {\r\n      for (var key in a)\r\n        this.attr(key, a[key])\r\n\r\n    } else {\r\n      this.add(a, v, 'attrs')\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable styles\r\n, style: function(s, v) {\r\n    if (typeof s == 'object')\r\n      for (var key in s)\r\n        this.style(key, s[key])\r\n\r\n    else\r\n      this.add(s, v, 'styles')\r\n\r\n    return this\r\n  }\r\n  // Animatable x-axis\r\n, x: function(x, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({x:x}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(x)\r\n    num.relative = relative\r\n    return this.add('x', num)\r\n  }\r\n  // Animatable y-axis\r\n, y: function(y, relative) {\r\n    if(this.target() instanceof SVG.G){\r\n      this.transform({y:y}, relative)\r\n      return this\r\n    }\r\n\r\n    var num = new SVG.Number(y)\r\n    num.relative = relative\r\n    return this.add('y', num)\r\n  }\r\n  // Animatable center x-axis\r\n, cx: function(x) {\r\n    return this.add('cx', new SVG.Number(x))\r\n  }\r\n  // Animatable center y-axis\r\n, cy: function(y) {\r\n    return this.add('cy', new SVG.Number(y))\r\n  }\r\n  // Add animatable move\r\n, move: function(x, y) {\r\n    return this.x(x).y(y)\r\n  }\r\n  // Add animatable center\r\n, center: function(x, y) {\r\n    return this.cx(x).cy(y)\r\n  }\r\n  // Add animatable size\r\n, size: function(width, height) {\r\n    if (this.target() instanceof SVG.Text) {\r\n      // animate font size for Text elements\r\n      this.attr('font-size', width)\r\n\r\n    } else {\r\n      // animate bbox based size for all other elements\r\n      var box\r\n\r\n      if(!width || !height){\r\n        box = this.target().bbox()\r\n      }\r\n\r\n      if(!width){\r\n        width = box.width / box.height  * height\r\n      }\r\n\r\n      if(!height){\r\n        height = box.height / box.width  * width\r\n      }\r\n\r\n      this.add('width' , new SVG.Number(width))\r\n          .add('height', new SVG.Number(height))\r\n\r\n    }\r\n\r\n    return this\r\n  }\r\n  // Add animatable width\r\n, width: function(width) {\r\n    return this.add('width', new SVG.Number(width))\r\n  }\r\n  // Add animatable height\r\n, height: function(height) {\r\n    return this.add('height', new SVG.Number(height))\r\n  }\r\n  // Add animatable plot\r\n, plot: function(a, b, c, d) {\r\n    // Lines can be plotted with 4 arguments\r\n    if(arguments.length == 4) {\r\n      return this.plot([a, b, c, d])\r\n    }\r\n\r\n    return this.add('plot', new (this.target().morphArray)(a))\r\n  }\r\n  // Add leading method\r\n, leading: function(value) {\r\n    return this.target().leading ?\r\n      this.add('leading', new SVG.Number(value)) :\r\n      this\r\n  }\r\n  // Add animatable viewbox\r\n, viewbox: function(x, y, width, height) {\r\n    if (this.target() instanceof SVG.Container) {\r\n      this.add('viewbox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n    return this\r\n  }\r\n, update: function(o) {\r\n    if (this.target() instanceof SVG.Stop) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        return this.update({\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        })\r\n      }\r\n\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', o.offset)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\r\n\nSVG.Box = SVG.invent({\r\n  create: function(x, y, width, height) {\r\n    if (typeof x == 'object' && !(x instanceof SVG.Element)) {\r\n      // chromes getBoundingClientRect has no x and y property\r\n      return SVG.Box.call(this, x.left != null ? x.left : x.x , x.top != null ? x.top : x.y, x.width, x.height)\r\n    } else if (arguments.length == 4) {\r\n      this.x = x\r\n      this.y = y\r\n      this.width = width\r\n      this.height = height\r\n    }\r\n\r\n    // add center, right, bottom...\r\n    fullBox(this)\r\n  }\r\n, extend: {\r\n    // Merge rect box with another, return a new instance\r\n    merge: function(box) {\r\n      var b = new this.constructor()\r\n\r\n      // merge boxes\r\n      b.x      = Math.min(this.x, box.x)\r\n      b.y      = Math.min(this.y, box.y)\r\n      b.width  = Math.max(this.x + this.width,  box.x + box.width)  - b.x\r\n      b.height = Math.max(this.y + this.height, box.y + box.height) - b.y\r\n\r\n      return fullBox(b)\r\n    }\r\n\r\n  , transform: function(m) {\r\n      var xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, p, bbox\r\n\r\n      var pts = [\r\n        new SVG.Point(this.x, this.y),\r\n        new SVG.Point(this.x2, this.y),\r\n        new SVG.Point(this.x, this.y2),\r\n        new SVG.Point(this.x2, this.y2)\r\n      ]\r\n\r\n      pts.forEach(function(p) {\r\n        p = p.transform(m)\r\n        xMin = Math.min(xMin,p.x)\r\n        xMax = Math.max(xMax,p.x)\r\n        yMin = Math.min(yMin,p.y)\r\n        yMax = Math.max(yMax,p.y)\r\n      })\r\n\r\n      bbox = new this.constructor()\r\n      bbox.x = xMin\r\n      bbox.width = xMax-xMin\r\n      bbox.y = yMin\r\n      bbox.height = yMax-yMin\r\n\r\n      fullBox(bbox)\r\n\r\n      return bbox\r\n    }\r\n  }\r\n})\r\n\r\nSVG.BBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    // get values if element is given\r\n    if (element instanceof SVG.Element) {\r\n      var box\r\n\r\n      // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered\r\n      try {\r\n\r\n        if (!document.documentElement.contains){\r\n          // This is IE - it does not support contains() for top-level SVGs\r\n          var topParent = element.node\r\n          while (topParent.parentNode){\r\n            topParent = topParent.parentNode\r\n          }\r\n          if (topParent != document) throw new Exception('Element not in the dom')\r\n        } else {\r\n          // the element is NOT in the dom, throw error\r\n          if(!document.documentElement.contains(element.node)) throw new Exception('Element not in the dom')\r\n        }\r\n\r\n        // find native bbox\r\n        box = element.node.getBBox()\r\n      } catch(e) {\r\n        if(element instanceof SVG.Shape){\r\n          var clone = element.clone(SVG.parser.draw.instance).show()\r\n          box = clone.node.getBBox()\r\n          clone.remove()\r\n        }else{\r\n          box = {\r\n            x:      element.node.clientLeft\r\n          , y:      element.node.clientTop\r\n          , width:  element.node.clientWidth\r\n          , height: element.node.clientHeight\r\n          }\r\n        }\r\n      }\r\n\r\n      SVG.Box.call(this, box)\r\n    }\r\n\r\n  }\r\n\r\n  // Define ancestor\r\n, inherit: SVG.Box\r\n\r\n  // Define Parent\r\n, parent: SVG.Element\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get bounding box\r\n    bbox: function() {\r\n      return new SVG.BBox(this)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.BBox.prototype.constructor = SVG.BBox\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  tbox: function(){\r\n    console.warn('Use of TBox is deprecated and mapped to RBox. Use .rbox() instead.')\r\n    return this.rbox(this.doc())\r\n  }\r\n})\r\n\r\nSVG.RBox = SVG.invent({\r\n  // Initialize\r\n  create: function(element) {\r\n    SVG.Box.apply(this, [].slice.call(arguments))\r\n\r\n    if (element instanceof SVG.Element) {\r\n      SVG.Box.call(this, element.node.getBoundingClientRect())\r\n    }\r\n  }\r\n\r\n, inherit: SVG.Box\r\n\r\n  // define Parent\r\n, parent: SVG.Element\r\n\r\n, extend: {\r\n    addOffset: function() {\r\n      // offset by window scroll position, because getBoundingClientRect changes when window is scrolled\r\n      this.x += window.pageXOffset\r\n      this.y += window.pageYOffset\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Constructor\r\n, construct: {\r\n    // Get rect box\r\n    rbox: function(el) {\r\n      if (el) return new SVG.RBox(this).transform(el.screenCTM().inverse())\r\n      return new SVG.RBox(this).addOffset()\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.RBox.prototype.constructor = SVG.RBox\r\n\nSVG.Matrix = SVG.invent({\r\n  // Initialize\r\n  create: function(source) {\r\n    var i, base = arrayToMatrix([1, 0, 0, 1, 0, 0])\r\n\r\n    // ensure source as object\r\n    source = source instanceof SVG.Element ?\r\n      source.matrixify() :\r\n    typeof source === 'string' ?\r\n      arrayToMatrix(source.split(SVG.regex.delimiter).map(parseFloat)) :\r\n    arguments.length == 6 ?\r\n      arrayToMatrix([].slice.call(arguments)) :\r\n    Array.isArray(source) ?\r\n      arrayToMatrix(source) :\r\n    typeof source === 'object' ?\r\n      source : base\r\n\r\n    // merge source\r\n    for (i = abcdef.length - 1; i >= 0; --i)\r\n      this[abcdef[i]] = source[abcdef[i]] != null ?\r\n        source[abcdef[i]] : base[abcdef[i]]\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Extract individual transformations\r\n    extract: function() {\r\n      // find delta transform points\r\n      var px    = deltaTransformPoint(this, 0, 1)\r\n        , py    = deltaTransformPoint(this, 1, 0)\r\n        , skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90\r\n\r\n      return {\r\n        // translation\r\n        x:        this.e\r\n      , y:        this.f\r\n      , transformedX:(this.e * Math.cos(skewX * Math.PI / 180) + this.f * Math.sin(skewX * Math.PI / 180)) / Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , transformedY:(this.f * Math.cos(skewX * Math.PI / 180) + this.e * Math.sin(-skewX * Math.PI / 180)) / Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // skew\r\n      , skewX:    -skewX\r\n      , skewY:    180 / Math.PI * Math.atan2(py.y, py.x)\r\n        // scale\r\n      , scaleX:   Math.sqrt(this.a * this.a + this.b * this.b)\r\n      , scaleY:   Math.sqrt(this.c * this.c + this.d * this.d)\r\n        // rotation\r\n      , rotation: skewX\r\n      , a: this.a\r\n      , b: this.b\r\n      , c: this.c\r\n      , d: this.d\r\n      , e: this.e\r\n      , f: this.f\r\n      , matrix: new SVG.Matrix(this)\r\n      }\r\n    }\r\n    // Clone matrix\r\n  , clone: function() {\r\n      return new SVG.Matrix(this)\r\n    }\r\n    // Morph one matrix into another\r\n  , morph: function(matrix) {\r\n      // store new destination\r\n      this.destination = new SVG.Matrix(matrix)\r\n\r\n      return this\r\n    }\r\n    // Get morphed matrix at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var matrix = new SVG.Matrix({\r\n        a: this.a + (this.destination.a - this.a) * pos\r\n      , b: this.b + (this.destination.b - this.b) * pos\r\n      , c: this.c + (this.destination.c - this.c) * pos\r\n      , d: this.d + (this.destination.d - this.d) * pos\r\n      , e: this.e + (this.destination.e - this.e) * pos\r\n      , f: this.f + (this.destination.f - this.f) * pos\r\n      })\r\n\r\n      return matrix\r\n    }\r\n    // Multiplies by given matrix\r\n  , multiply: function(matrix) {\r\n      return new SVG.Matrix(this.native().multiply(parseMatrix(matrix).native()))\r\n    }\r\n    // Inverses matrix\r\n  , inverse: function() {\r\n      return new SVG.Matrix(this.native().inverse())\r\n    }\r\n    // Translate matrix\r\n  , translate: function(x, y) {\r\n      return new SVG.Matrix(this.native().translate(x || 0, y || 0))\r\n    }\r\n    // Scale matrix\r\n  , scale: function(x, y, cx, cy) {\r\n      // support uniformal scale\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(x, 0, 0, y, 0, 0))\r\n    }\r\n    // Rotate matrix\r\n  , rotate: function(r, cx, cy) {\r\n      // convert degrees to radians\r\n      r = SVG.utils.radians(r)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(Math.cos(r), Math.sin(r), -Math.sin(r), Math.cos(r), 0, 0))\r\n    }\r\n    // Flip matrix on x or y, at a given offset\r\n  , flip: function(a, o) {\r\n      return a == 'x' ?\r\n          this.scale(-1, 1, o, 0) :\r\n        a == 'y' ?\r\n          this.scale(1, -1, 0, o) :\r\n          this.scale(-1, -1, a, o != null ? o : a)\r\n    }\r\n    // Skew\r\n  , skew: function(x, y, cx, cy) {\r\n      // support uniformal skew\r\n      if (arguments.length == 1) {\r\n        y = x\r\n      } else if (arguments.length == 3) {\r\n        cy = cx\r\n        cx = y\r\n        y = x\r\n      }\r\n\r\n      // convert degrees to radians\r\n      x = SVG.utils.radians(x)\r\n      y = SVG.utils.radians(y)\r\n\r\n      return this.around(cx, cy, new SVG.Matrix(1, Math.tan(y), Math.tan(x), 1, 0, 0))\r\n    }\r\n    // SkewX\r\n  , skewX: function(x, cx, cy) {\r\n      return this.skew(x, 0, cx, cy)\r\n    }\r\n    // SkewY\r\n  , skewY: function(y, cx, cy) {\r\n      return this.skew(0, y, cx, cy)\r\n    }\r\n    // Transform around a center point\r\n  , around: function(cx, cy, matrix) {\r\n      return this\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, cx || 0, cy || 0))\r\n        .multiply(matrix)\r\n        .multiply(new SVG.Matrix(1, 0, 0, 1, -cx || 0, -cy || 0))\r\n    }\r\n    // Convert to native SVGMatrix\r\n  , native: function() {\r\n      // create new matrix\r\n      var matrix = SVG.parser.native.createSVGMatrix()\r\n\r\n      // update with current values\r\n      for (var i = abcdef.length - 1; i >= 0; i--)\r\n        matrix[abcdef[i]] = this[abcdef[i]]\r\n\r\n      return matrix\r\n    }\r\n    // Convert matrix to string\r\n  , toString: function() {\r\n      // Construct the matrix directly, avoid values that are too small\r\n      return 'matrix(' + float32String(this.a) + ',' + float32String(this.b)\r\n        + ',' + float32String(this.c) + ',' + float32String(this.d)\r\n        + ',' + float32String(this.e) + ',' + float32String(this.f)\r\n        + ')'\r\n    }\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Element\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Get current matrix\r\n    ctm: function() {\r\n      return new SVG.Matrix(this.node.getCTM())\r\n    },\r\n    // Get current screen matrix\r\n    screenCTM: function() {\r\n      /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537\r\n         This is needed because FF does not return the transformation matrix\r\n         for the inner coordinate system when getScreenCTM() is called on nested svgs.\r\n         However all other Browsers do that */\r\n      if(this instanceof SVG.Nested) {\r\n        var rect = this.rect(1,1)\r\n        var m = rect.node.getScreenCTM()\r\n        rect.remove()\r\n        return new SVG.Matrix(m)\r\n      }\r\n      return new SVG.Matrix(this.node.getScreenCTM())\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\nSVG.Point = SVG.invent({\r\n  // Initialize\r\n  create: function(x,y) {\r\n    var i, source, base = {x:0, y:0}\r\n\r\n    // ensure source as object\r\n    source = Array.isArray(x) ?\r\n      {x:x[0], y:x[1]} :\r\n    typeof x === 'object' ?\r\n      {x:x.x, y:x.y} :\r\n    x != null ?\r\n      {x:x, y:(y != null ? y : x)} : base // If y has no value, then x is used has its value\r\n\r\n    // merge source\r\n    this.x = source.x\r\n    this.y = source.y\r\n  }\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Clone point\r\n    clone: function() {\r\n      return new SVG.Point(this)\r\n    }\r\n    // Morph one point into another\r\n  , morph: function(x, y) {\r\n      // store new destination\r\n      this.destination = new SVG.Point(x, y)\r\n\r\n      return this\r\n    }\r\n    // Get morphed point at a given position\r\n  , at: function(pos) {\r\n      // make sure a destination is defined\r\n      if (!this.destination) return this\r\n\r\n      // calculate morphed matrix at a given position\r\n      var point = new SVG.Point({\r\n        x: this.x + (this.destination.x - this.x) * pos\r\n      , y: this.y + (this.destination.y - this.y) * pos\r\n      })\r\n\r\n      return point\r\n    }\r\n    // Convert to native SVGPoint\r\n  , native: function() {\r\n      // create new point\r\n      var point = SVG.parser.native.createSVGPoint()\r\n\r\n      // update with current values\r\n      point.x = this.x\r\n      point.y = this.y\r\n\r\n      return point\r\n    }\r\n    // transform point with matrix\r\n  , transform: function(matrix) {\r\n      return new SVG.Point(this.native().matrixTransform(matrix.native()))\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n\r\n  // Get point\r\n  point: function(x, y) {\r\n    return new SVG.Point(x,y).transform(this.screenCTM().inverse());\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Set svg element attribute\r\n  attr: function(a, v, n) {\r\n    // act as full getter\r\n    if (a == null) {\r\n      // get an object of attributes\r\n      a = {}\r\n      v = this.node.attributes\r\n      for (n = v.length - 1; n >= 0; n--)\r\n        a[v[n].nodeName] = SVG.regex.isNumber.test(v[n].nodeValue) ? parseFloat(v[n].nodeValue) : v[n].nodeValue\r\n\r\n      return a\r\n\r\n    } else if (typeof a == 'object') {\r\n      // apply every attribute individually if an object is passed\r\n      for (v in a) this.attr(v, a[v])\r\n\r\n    } else if (v === null) {\r\n        // remove value\r\n        this.node.removeAttribute(a)\r\n\r\n    } else if (v == null) {\r\n      // act as a getter if the first and only argument is not an object\r\n      v = this.node.getAttribute(a)\r\n      return v == null ?\r\n        SVG.defaults.attrs[a] :\r\n      SVG.regex.isNumber.test(v) ?\r\n        parseFloat(v) : v\r\n\r\n    } else {\r\n      // BUG FIX: some browsers will render a stroke if a color is given even though stroke width is 0\r\n      if (a == 'stroke-width')\r\n        this.attr('stroke', parseFloat(v) > 0 ? this._stroke : null)\r\n      else if (a == 'stroke')\r\n        this._stroke = v\r\n\r\n      // convert image fill and stroke to patterns\r\n      if (a == 'fill' || a == 'stroke') {\r\n        if (SVG.regex.isImage.test(v))\r\n          v = this.doc().defs().image(v, 0, 0)\r\n\r\n        if (v instanceof SVG.Image)\r\n          v = this.doc().defs().pattern(0, 0, function() {\r\n            this.add(v)\r\n          })\r\n      }\r\n\r\n      // ensure correct numeric values (also accepts NaN and Infinity)\r\n      if (typeof v === 'number')\r\n        v = new SVG.Number(v)\r\n\r\n      // ensure full hex color\r\n      else if (SVG.Color.isColor(v))\r\n        v = new SVG.Color(v)\r\n\r\n      // parse array values\r\n      else if (Array.isArray(v))\r\n        v = new SVG.Array(v)\r\n\r\n      // if the passed attribute is leading...\r\n      if (a == 'leading') {\r\n        // ... call the leading method instead\r\n        if (this.leading)\r\n          this.leading(v)\r\n      } else {\r\n        // set given attribute on node\r\n        typeof n === 'string' ?\r\n          this.node.setAttributeNS(n, a, v.toString()) :\r\n          this.node.setAttribute(a, v.toString())\r\n      }\r\n\r\n      // rebuild if required\r\n      if (this.rebuild && (a == 'font-size' || a == 'x'))\r\n        this.rebuild(a, v)\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Add transformations\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // get current matrix\r\n    matrix = new SVG.Matrix(target)\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.multiply(new SVG.Matrix(o)) :\r\n        // absolute\r\n        new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = relative ?\r\n        // relative\r\n        matrix.rotate(o.rotation, o.cx, o.cy) :\r\n        // absolute\r\n        matrix.rotate(o.rotation - matrix.extract().rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      if (!relative) {\r\n        // absolute; multiply inversed values\r\n        var e = matrix.extract()\r\n        o.scaleX = o.scaleX * 1 / e.scaleX\r\n        o.scaleY = o.scaleY * 1 / e.scaleY\r\n      }\r\n\r\n      matrix = matrix.scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skew != null || o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skew != null ? o.skew : o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skew != null ? o.skew : o.skewY != null ? o.skewY : 0\r\n\r\n      if (!relative) {\r\n        // absolute; reset skew values\r\n        var e = matrix.extract()\r\n        matrix = matrix.multiply(new SVG.Matrix().skew(e.skewX, e.skewY, o.cx, o.cy).inverse())\r\n      }\r\n\r\n      matrix = matrix.skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      if (relative) {\r\n        // relative\r\n        matrix = matrix.translate(o.x, o.y)\r\n      } else {\r\n        // absolute\r\n        if (o.x != null) matrix.e = o.x\r\n        if (o.y != null) matrix.f = o.y\r\n      }\r\n    }\r\n\r\n    return this.attr('transform', matrix)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.FX, {\r\n  transform: function(o, relative) {\r\n    // get target in case of the fx module, otherwise reference this\r\n    var target = this.target()\r\n      , matrix, bbox\r\n\r\n    // act as a getter\r\n    if (typeof o !== 'object') {\r\n      // get current matrix\r\n      matrix = new SVG.Matrix(target).extract()\r\n\r\n      return typeof o === 'string' ? matrix[o] : matrix\r\n    }\r\n\r\n    // ensure relative flag\r\n    relative = !!relative || !!o.relative\r\n\r\n    // act on matrix\r\n    if (o.a != null) {\r\n      matrix = new SVG.Matrix(o)\r\n\r\n    // act on rotation\r\n    } else if (o.rotation != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // apply transformation\r\n      matrix = new SVG.Rotate(o.rotation, o.cx, o.cy)\r\n\r\n    // act on scale\r\n    } else if (o.scale != null || o.scaleX != null || o.scaleY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure scale values on both axes\r\n      o.scaleX = o.scale != null ? o.scale : o.scaleX != null ? o.scaleX : 1\r\n      o.scaleY = o.scale != null ? o.scale : o.scaleY != null ? o.scaleY : 1\r\n\r\n      matrix = new SVG.Scale(o.scaleX, o.scaleY, o.cx, o.cy)\r\n\r\n    // act on skew\r\n    } else if (o.skewX != null || o.skewY != null) {\r\n      // ensure centre point\r\n      ensureCentre(o, target)\r\n\r\n      // ensure skew values on both axes\r\n      o.skewX = o.skewX != null ? o.skewX : 0\r\n      o.skewY = o.skewY != null ? o.skewY : 0\r\n\r\n      matrix = new SVG.Skew(o.skewX, o.skewY, o.cx, o.cy)\r\n\r\n    // act on flip\r\n    } else if (o.flip) {\r\n      if(o.flip == 'x' || o.flip == 'y') {\r\n        o.offset = o.offset == null ? target.bbox()['c' + o.flip] : o.offset\r\n      } else {\r\n        if(o.offset == null) {\r\n          bbox = target.bbox()\r\n          o.flip = bbox.cx\r\n          o.offset = bbox.cy\r\n        } else {\r\n          o.flip = o.offset\r\n        }\r\n      }\r\n\r\n      matrix = new SVG.Matrix().flip(o.flip, o.offset)\r\n\r\n    // act on translate\r\n    } else if (o.x != null || o.y != null) {\r\n      matrix = new SVG.Translate(o.x, o.y)\r\n    }\r\n\r\n    if(!matrix) return this\r\n\r\n    matrix.relative = relative\r\n\r\n    this.last().transforms.push(matrix)\r\n\r\n    return this._callStart()\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Reset all transformations\r\n  untransform: function() {\r\n    return this.attr('transform', null)\r\n  },\r\n  // merge the whole transformation chain into one matrix and returns it\r\n  matrixify: function() {\r\n\r\n    var matrix = (this.attr('transform') || '')\r\n      // split transformations\r\n      .split(SVG.regex.transforms).slice(0,-1).map(function(str){\r\n        // generate key => value pairs\r\n        var kv = str.trim().split('(')\r\n        return [kv[0], kv[1].split(SVG.regex.delimiter).map(function(str){ return parseFloat(str) })]\r\n      })\r\n      // merge every transformation into one matrix\r\n      .reduce(function(matrix, transform){\r\n\r\n        if(transform[0] == 'matrix') return matrix.multiply(arrayToMatrix(transform[1]))\r\n        return matrix[transform[0]].apply(matrix, transform[1])\r\n\r\n      }, new SVG.Matrix())\r\n\r\n    return matrix\r\n  },\r\n  // add an element to another parent without changing the visual representation on the screen\r\n  toParent: function(parent) {\r\n    if(this == parent) return this\r\n    var ctm = this.screenCTM()\r\n    var pCtm = parent.screenCTM().inverse()\r\n\r\n    this.addTo(parent).untransform().transform(pCtm.multiply(ctm))\r\n\r\n    return this\r\n  },\r\n  // same as above with parent equals root-svg\r\n  toDoc: function() {\r\n    return this.toParent(this.doc())\r\n  }\r\n\r\n})\r\n\r\nSVG.Transformation = SVG.invent({\r\n\r\n  create: function(source, inversed){\r\n\r\n    if(arguments.length > 1 && typeof inversed != 'boolean'){\r\n      return this.constructor.call(this, [].slice.call(arguments))\r\n    }\r\n\r\n    if(Array.isArray(source)){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[i]\r\n      }\r\n    } else if(typeof source == 'object'){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        this[this.arguments[i]] = source[this.arguments[i]]\r\n      }\r\n    }\r\n\r\n    this.inversed = false\r\n\r\n    if(inversed === true){\r\n      this.inversed = true\r\n    }\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    arguments: []\r\n  , method: ''\r\n\r\n  , at: function(pos){\r\n\r\n      var params = []\r\n\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        params.push(this[this.arguments[i]])\r\n      }\r\n\r\n      var m = this._undo || new SVG.Matrix()\r\n\r\n      m = new SVG.Matrix().morph(SVG.Matrix.prototype[this.method].apply(m, params)).at(pos)\r\n\r\n      return this.inversed ? m.inverse() : m\r\n\r\n    }\r\n\r\n  , undo: function(o){\r\n      for(var i = 0, len = this.arguments.length; i < len; ++i){\r\n        o[this.arguments[i]] = typeof this[this.arguments[i]] == 'undefined' ? 0 : o[this.arguments[i]]\r\n      }\r\n\r\n      // The method SVG.Matrix.extract which was used before calling this\r\n      // method to obtain a value for the parameter o doesn't return a cx and\r\n      // a cy so we use the ones that were provided to this object at its creation\r\n      o.cx = this.cx\r\n      o.cy = this.cy\r\n\r\n      this._undo = new SVG[capitalize(this.method)](o, true).at(1)\r\n\r\n      return this\r\n    }\r\n\r\n  }\r\n\r\n})\r\n\r\nSVG.Translate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['transformedX', 'transformedY']\r\n  , method: 'translate'\r\n  }\r\n\r\n})\r\n\r\nSVG.Rotate = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['rotation', 'cx', 'cy']\r\n  , method: 'rotate'\r\n  , at: function(pos){\r\n      var m = new SVG.Matrix().rotate(new SVG.Number().morph(this.rotation - (this._undo ? this._undo.rotation : 0)).at(pos), this.cx, this.cy)\r\n      return this.inversed ? m.inverse() : m\r\n    }\r\n  , undo: function(o){\r\n      this._undo = o\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Scale = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['scaleX', 'scaleY', 'cx', 'cy']\r\n  , method: 'scale'\r\n  }\r\n\r\n})\r\n\r\nSVG.Skew = SVG.invent({\r\n\r\n  parent: SVG.Matrix\r\n, inherit: SVG.Transformation\r\n\r\n, create: function(source, inversed){\r\n    this.constructor.apply(this, [].slice.call(arguments))\r\n  }\r\n\r\n, extend: {\r\n    arguments: ['skewX', 'skewY', 'cx', 'cy']\r\n  , method: 'skew'\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Element, {\r\n  // Dynamic style generator\r\n  style: function(s, v) {\r\n    if (arguments.length == 0) {\r\n      // get full style\r\n      return this.node.style.cssText || ''\r\n\r\n    } else if (arguments.length < 2) {\r\n      // apply every style individually if an object is passed\r\n      if (typeof s == 'object') {\r\n        for (v in s) this.style(v, s[v])\r\n\r\n      } else if (SVG.regex.isCss.test(s)) {\r\n        // parse css string\r\n        s = s.split(/\\s*;\\s*/)\r\n          // filter out suffix ; and stuff like ;;\r\n          .filter(function(e) { return !!e })\r\n          .map(function(e){ return e.split(/\\s*:\\s*/) })\r\n\r\n        // apply every definition individually\r\n        while (v = s.pop()) {\r\n          this.style(v[0], v[1])\r\n        }\r\n      } else {\r\n        // act as a getter if the first and only argument is not an object\r\n        return this.node.style[camelCase(s)]\r\n      }\r\n\r\n    } else {\r\n      this.node.style[camelCase(s)] = v === null || SVG.regex.isBlank.test(v) ? '' : v\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.Parent = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Returns all child elements\r\n    children: function() {\r\n      return SVG.utils.map(SVG.utils.filterSVGElements(this.node.childNodes), function(node) {\r\n        return SVG.adopt(node)\r\n      })\r\n    }\r\n    // Add given element at a position\r\n  , add: function(element, i) {\r\n      if (i == null)\r\n        this.node.appendChild(element.node)\r\n      else if (element.node != this.node.childNodes[i])\r\n        this.node.insertBefore(element.node, this.node.childNodes[i])\r\n\r\n      return this\r\n    }\r\n    // Basically does the same as `add()` but returns the added element instead\r\n  , put: function(element, i) {\r\n      this.add(element, i)\r\n      return element\r\n    }\r\n    // Checks if the given element is a child\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // Gets index of given element\r\n  , index: function(element) {\r\n      return [].slice.call(this.node.childNodes).indexOf(element.node)\r\n    }\r\n    // Get a element at the given index\r\n  , get: function(i) {\r\n      return SVG.adopt(this.node.childNodes[i])\r\n    }\r\n    // Get first child\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get the last child\r\n  , last: function() {\r\n      return this.get(this.node.childNodes.length - 1)\r\n    }\r\n    // Iterates over all children and invokes a given block\r\n  , each: function(block, deep) {\r\n      var i, il\r\n        , children = this.children()\r\n\r\n      for (i = 0, il = children.length; i < il; i++) {\r\n        if (children[i] instanceof SVG.Element)\r\n          block.apply(children[i], [i, children])\r\n\r\n        if (deep && (children[i] instanceof SVG.Container))\r\n          children[i].each(block, deep)\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Remove a given child\r\n  , removeElement: function(element) {\r\n      this.node.removeChild(element.node)\r\n\r\n      return this\r\n    }\r\n    // Remove all elements in this container\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      return this\r\n    }\r\n  , // Get defs\r\n    defs: function() {\r\n      return this.doc().defs()\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.extend(SVG.Parent, {\r\n\r\n  ungroup: function(parent, depth) {\r\n    if(depth === 0 || this instanceof SVG.Defs || this.node == SVG.parser.draw) return this\r\n\r\n    parent = parent || (this instanceof SVG.Doc ? this : this.parent(SVG.Parent))\r\n    depth = depth || Infinity\r\n\r\n    this.each(function(){\r\n      if(this instanceof SVG.Defs) return this\r\n      if(this instanceof SVG.Parent) return this.ungroup(parent, depth-1)\r\n      return this.toParent(parent)\r\n    })\r\n\r\n    this.node.firstChild || this.remove()\r\n\r\n    return this\r\n  },\r\n\r\n  flatten: function(parent, depth) {\r\n    return this.ungroup(parent, depth)\r\n  }\r\n\r\n})\nSVG.Container = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n})\n\r\nSVG.ViewBox = SVG.invent({\r\n\r\n  create: function(source) {\r\n    var i, base = [0, 0, 0, 0]\r\n\r\n    var x, y, width, height, box, view, we, he\r\n      , wm   = 1 // width multiplier\r\n      , hm   = 1 // height multiplier\r\n      , reg  = /[+-]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?/gi\r\n\r\n    if(source instanceof SVG.Element){\r\n\r\n      we = source\r\n      he = source\r\n      view = (source.attr('viewBox') || '').match(reg)\r\n      box = source.bbox\r\n\r\n      // get dimensions of current node\r\n      width  = new SVG.Number(source.width())\r\n      height = new SVG.Number(source.height())\r\n\r\n      // find nearest non-percentual dimensions\r\n      while (width.unit == '%') {\r\n        wm *= width.value\r\n        width = new SVG.Number(we instanceof SVG.Doc ? we.parent().offsetWidth : we.parent().width())\r\n        we = we.parent()\r\n      }\r\n      while (height.unit == '%') {\r\n        hm *= height.value\r\n        height = new SVG.Number(he instanceof SVG.Doc ? he.parent().offsetHeight : he.parent().height())\r\n        he = he.parent()\r\n      }\r\n\r\n      // ensure defaults\r\n      this.x      = 0\r\n      this.y      = 0\r\n      this.width  = width  * wm\r\n      this.height = height * hm\r\n      this.zoom   = 1\r\n\r\n      if (view) {\r\n        // get width and height from viewbox\r\n        x      = parseFloat(view[0])\r\n        y      = parseFloat(view[1])\r\n        width  = parseFloat(view[2])\r\n        height = parseFloat(view[3])\r\n\r\n        // calculate zoom accoring to viewbox\r\n        this.zoom = ((this.width / this.height) > (width / height)) ?\r\n          this.height / height :\r\n          this.width  / width\r\n\r\n        // calculate real pixel dimensions on parent SVG.Doc element\r\n        this.x      = x\r\n        this.y      = y\r\n        this.width  = width\r\n        this.height = height\r\n\r\n      }\r\n\r\n    }else{\r\n\r\n      // ensure source as object\r\n      source = typeof source === 'string' ?\r\n        source.match(reg).map(function(el){ return parseFloat(el) }) :\r\n      Array.isArray(source) ?\r\n        source :\r\n      typeof source == 'object' ?\r\n        [source.x, source.y, source.width, source.height] :\r\n      arguments.length == 4 ?\r\n        [].slice.call(arguments) :\r\n        base\r\n\r\n      this.x = source[0]\r\n      this.y = source[1]\r\n      this.width = source[2]\r\n      this.height = source[3]\r\n    }\r\n\r\n\r\n  }\r\n\r\n, extend: {\r\n\r\n    toString: function() {\r\n      return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height\r\n    }\r\n  , morph: function(x, y, width, height){\r\n      this.destination = new SVG.ViewBox(x, y, width, height)\r\n      return this\r\n    }\r\n\r\n  , at: function(pos) {\r\n\r\n      if(!this.destination) return this\r\n\r\n      return new SVG.ViewBox([\r\n          this.x + (this.destination.x - this.x) * pos\r\n        , this.y + (this.destination.y - this.y) * pos\r\n        , this.width + (this.destination.width - this.width) * pos\r\n        , this.height + (this.destination.height - this.height) * pos\r\n      ])\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // Define parent\r\n, parent: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n\r\n    // get/set viewbox\r\n    viewbox: function(x, y, width, height) {\r\n      if (arguments.length == 0)\r\n        // act as a getter if there are no arguments\r\n        return new SVG.ViewBox(this)\r\n\r\n      // otherwise act as a setter\r\n      return this.attr('viewBox', new SVG.ViewBox(x, y, width, height))\r\n    }\r\n\r\n  }\r\n\r\n})\n// Add events to elements\r\n\r\n;[ 'click',\r\n  'dblclick',\r\n  'mousedown',\r\n  'mouseup',\r\n  'mouseover',\r\n  'mouseout',\r\n  'mousemove',\r\n  'mouseenter',\r\n  'mouseleave',\r\n  'touchstart',\r\n  'touchmove',\r\n  'touchleave',\r\n  'touchend',\r\n  'touchcancel' ].forEach(function (event) {\r\n    // add event to SVG.Element\r\n    SVG.Element.prototype[event] = function (f) {\r\n      // bind event to element rather than element node\r\n      if (f == null) {\r\n        SVG.off(this, event)\r\n      } else {\r\n        SVG.on(this, event, f)\r\n      }\r\n      return this\r\n    }\r\n  })\r\n\r\nSVG.listenerId = 0\r\n\r\n// Add event binder in the SVG namespace\r\nSVG.on = function (node, events, listener, binding, options) {\r\n  var l = listener.bind(binding || node)\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n\r\n  // ensure instance object for nodes which are not adopted\r\n  n.instance = n.instance || {_events: {}}\r\n\r\n  var bag = n.instance._events\r\n\r\n  // add id to listener\r\n  if (!listener._svgjsListenerId) { listener._svgjsListenerId = ++SVG.listenerId }\r\n\r\n  events.split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event.split('.')[0]\r\n    var ns = event.split('.')[1] || '*'\r\n\r\n    // ensure valid object\r\n    bag[ev] = bag[ev] || {}\r\n    bag[ev][ns] = bag[ev][ns] || {}\r\n\r\n    // reference listener\r\n    bag[ev][ns][listener._svgjsListenerId] = l\r\n\r\n    // add listener\r\n    n.addEventListener(ev, l, options || false)\r\n  })\r\n}\r\n\r\n// Add event unbinder in the SVG namespace\r\nSVG.off = function (node, events, listener, options) {\r\n  var n = node instanceof SVG.Element ? node.node : node\r\n  if (!n.instance) return\r\n\r\n  // listener can be a function or a number\r\n  if (typeof listener === 'function') {\r\n    listener = listener._svgjsListenerId\r\n    if (!listener) return\r\n  }\r\n\r\n  var bag = n.instance._events\r\n\r\n  ;(events || '').split(SVG.regex.delimiter).forEach(function (event) {\r\n    var ev = event && event.split('.')[0]\r\n    var ns = event && event.split('.')[1]\r\n    var namespace, l\r\n\r\n    if (listener) {\r\n      // remove listener reference\r\n      if (bag[ev] && bag[ev][ns || '*']) {\r\n        // removeListener\r\n        n.removeEventListener(ev, bag[ev][ns || '*'][listener], options || false)\r\n\r\n        delete bag[ev][ns || '*'][listener]\r\n      }\r\n    } else if (ev && ns) {\r\n      // remove all listeners for a namespaced event\r\n      if (bag[ev] && bag[ev][ns]) {\r\n        for (l in bag[ev][ns]) { SVG.off(n, [ev, ns].join('.'), l) }\r\n\r\n        delete bag[ev][ns]\r\n      }\r\n    } else if (ns) {\r\n      // remove all listeners for a specific namespace\r\n      for (event in bag) {\r\n        for (namespace in bag[event]) {\r\n          if (ns === namespace) { SVG.off(n, [event, ns].join('.')) }\r\n        }\r\n      }\r\n    } else if (ev) {\r\n      // remove all listeners for the event\r\n      if (bag[ev]) {\r\n        for (namespace in bag[ev]) { SVG.off(n, [ev, namespace].join('.')) }\r\n\r\n        delete bag[ev]\r\n      }\r\n    } else {\r\n      // remove all listeners on a given node\r\n      for (event in bag) { SVG.off(n, event) }\r\n\r\n      n.instance._events = {}\r\n    }\r\n  })\r\n}\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Bind given event to listener\r\n  on: function (event, listener, binding, options) {\r\n    SVG.on(this, event, listener, binding, options)\r\n    return this\r\n  },\r\n  // Unbind event from listener\r\n  off: function (event, listener) {\r\n    SVG.off(this.node, event, listener)\r\n    return this\r\n  },\r\n  fire: function (event, data) {\r\n    // Dispatch event\r\n    if (event instanceof window.Event) {\r\n      this.node.dispatchEvent(event)\r\n    } else {\r\n      this.node.dispatchEvent(event = new SVG.CustomEvent(event, {detail: data, cancelable: true}))\r\n    }\r\n    this._event = event\r\n    return this\r\n  },\r\n  event: function() {\r\n    return this._event\r\n  }\r\n})\r\n\n\r\nSVG.Defs = SVG.invent({\r\n  // Initialize node\r\n  create: 'defs'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n})\nSVG.G = SVG.invent({\r\n  // Initialize node\r\n  create: 'g'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.transform('x') : this.transform({ x: x - this.x() }, true)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.transform('y') : this.transform({ y: y - this.y() }, true)\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.gbox().cx : this.x(x - this.gbox().width / 2)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.gbox().cy : this.y(y - this.gbox().height / 2)\r\n    }\r\n  , gbox: function() {\r\n\r\n      var bbox  = this.bbox()\r\n        , trans = this.transform()\r\n\r\n      bbox.x  += trans.x\r\n      bbox.x2 += trans.x\r\n      bbox.cx += trans.x\r\n\r\n      bbox.y  += trans.y\r\n      bbox.y2 += trans.y\r\n      bbox.cy += trans.y\r\n\r\n      return bbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a group element\r\n    group: function() {\r\n      return this.put(new SVG.G)\r\n    }\r\n  }\r\n})\r\n\nSVG.Doc = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    if (element) {\r\n      // ensure the presence of a dom element\r\n      element = typeof element == 'string' ?\r\n        document.getElementById(element) :\r\n        element\r\n\r\n      // If the target is an svg element, use that element as the main wrapper.\r\n      // This allows svg.js to work with svg documents as well.\r\n      if (element.nodeName == 'svg') {\r\n        this.constructor.call(this, element)\r\n      } else {\r\n        this.constructor.call(this, SVG.create('svg'))\r\n        element.appendChild(this.node)\r\n        this.size('100%', '100%')\r\n      }\r\n\r\n      // set svg element attributes and ensure defs node\r\n      this.namespace().defs()\r\n    }\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add namespaces\r\n    namespace: function() {\r\n      return this\r\n        .attr({ xmlns: SVG.ns, version: '1.1' })\r\n        .attr('xmlns:xlink', SVG.xlink, SVG.xmlns)\r\n        .attr('xmlns:svgjs', SVG.svgjs, SVG.xmlns)\r\n    }\r\n    // Creates and returns defs element\r\n  , defs: function() {\r\n      if (!this._defs) {\r\n        var defs\r\n\r\n        // Find or create a defs element in this instance\r\n        if (defs = this.node.getElementsByTagName('defs')[0])\r\n          this._defs = SVG.adopt(defs)\r\n        else\r\n          this._defs = new SVG.Defs\r\n\r\n        // Make sure the defs node is at the end of the stack\r\n        this.node.appendChild(this._defs.node)\r\n      }\r\n\r\n      return this._defs\r\n    }\r\n    // custom parent method\r\n  , parent: function() {\r\n      if(!this.node.parentNode || this.node.parentNode.nodeName == '#document' || this.node.parentNode.nodeName == '#document-fragment') return null\r\n      return this.node.parentNode\r\n    }\r\n    // Fix for possible sub-pixel offset. See:\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=608812\r\n  , spof: function() {\r\n      var pos = this.node.getScreenCTM()\r\n\r\n      if (pos)\r\n        this\r\n          .style('left', (-pos.e % 1) + 'px')\r\n          .style('top',  (-pos.f % 1) + 'px')\r\n\r\n      return this\r\n    }\r\n\r\n      // Removes the doc from the DOM\r\n  , remove: function() {\r\n      if(this.parent()) {\r\n        this.parent().removeChild(this.node)\r\n      }\r\n\r\n      return this\r\n    }\r\n  , clear: function() {\r\n      // remove children\r\n      while(this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // remove defs reference\r\n      delete this._defs\r\n\r\n      // add back parser\r\n      if(!SVG.parser.draw.parentNode)\r\n        this.node.appendChild(SVG.parser.draw)\r\n\r\n      return this\r\n    }\r\n  , clone: function (parent) {\r\n      // write dom data to the dom so the clone can pickup the data\r\n      this.writeDataToDom()\r\n\r\n      // get reference to node\r\n      var node = this.node\r\n\r\n      // clone element and assign new id\r\n      var clone = assignNewId(node.cloneNode(true))\r\n\r\n      // insert the clone in the given parent or after myself\r\n      if(parent) {\r\n        (parent.node || parent).appendChild(clone.node)\r\n      } else {\r\n        node.parentNode.insertBefore(clone.node, node.nextSibling)\r\n      }\r\n\r\n      return clone\r\n    }\r\n  }\r\n\r\n})\r\n\n// ### This module adds backward / forward functionality to elements.\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Get all siblings, including myself\r\n  siblings: function() {\r\n    return this.parent().children()\r\n  }\r\n  // Get the curent position siblings\r\n, position: function() {\r\n    return this.parent().index(this)\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, next: function() {\r\n    return this.siblings()[this.position() + 1]\r\n  }\r\n  // Get the next element (will return null if there is none)\r\n, previous: function() {\r\n    return this.siblings()[this.position() - 1]\r\n  }\r\n  // Send given element one step forward\r\n, forward: function() {\r\n    var i = this.position() + 1\r\n      , p = this.parent()\r\n\r\n    // move node one step forward\r\n    p.removeElement(this).add(this, i)\r\n\r\n    // make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element one step backward\r\n, backward: function() {\r\n    var i = this.position()\r\n\r\n    if (i > 0)\r\n      this.parent().removeElement(this).add(this, i - 1)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the front\r\n, front: function() {\r\n    var p = this.parent()\r\n\r\n    // Move node forward\r\n    p.node.appendChild(this.node)\r\n\r\n    // Make sure defs node is always at the top\r\n    if (p instanceof SVG.Doc)\r\n      p.node.appendChild(p.defs().node)\r\n\r\n    return this\r\n  }\r\n  // Send given element all the way to the back\r\n, back: function() {\r\n    if (this.position() > 0)\r\n      this.parent().removeElement(this).add(this, 0)\r\n\r\n    return this\r\n  }\r\n  // Inserts a given element before the targeted element\r\n, before: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i)\r\n\r\n    return this\r\n  }\r\n  // Insters a given element after the targeted element\r\n, after: function(element) {\r\n    element.remove()\r\n\r\n    var i = this.position()\r\n\r\n    this.parent().add(element, i + 1)\r\n\r\n    return this\r\n  }\r\n\r\n})\nSVG.Mask = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('mask'))\r\n\r\n    // keep references to masked elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unmask all masked elements and remove itself\r\n    remove: function() {\r\n      // unmask all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unmask()\r\n      this.targets = []\r\n\r\n      // remove mask from parent\r\n      SVG.Element.prototype.remove.call(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create masking element\r\n    mask: function() {\r\n      return this.defs().put(new SVG.Mask)\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Distribute mask to svg element\r\n  maskWith: function(element) {\r\n    // use given mask or create a new one\r\n    this.masker = element instanceof SVG.Mask ? element : this.parent().mask().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.masker.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('mask', 'url(\"#' + this.masker.attr('id') + '\")')\r\n  }\r\n  // Unmask element\r\n, unmask: function() {\r\n    delete this.masker\r\n    return this.attr('mask', null)\r\n  }\r\n\r\n})\r\n\nSVG.ClipPath = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('clipPath'))\r\n\r\n    // keep references to clipped elements\r\n    this.targets = []\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Unclip all clipped elements and remove itself\r\n    remove: function() {\r\n      // unclip all targets\r\n      for (var i = this.targets.length - 1; i >= 0; i--)\r\n        if (this.targets[i])\r\n          this.targets[i].unclip()\r\n      this.targets = []\r\n\r\n      // remove clipPath from parent\r\n      this.parent().removeElement(this)\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create clipping element\r\n    clip: function() {\r\n      return this.defs().put(new SVG.ClipPath)\r\n    }\r\n  }\r\n})\r\n\r\n//\r\nSVG.extend(SVG.Element, {\r\n  // Distribute clipPath to svg element\r\n  clipWith: function(element) {\r\n    // use given clip or create a new one\r\n    this.clipper = element instanceof SVG.ClipPath ? element : this.parent().clip().add(element)\r\n\r\n    // store reverence on self in mask\r\n    this.clipper.targets.push(this)\r\n\r\n    // apply mask\r\n    return this.attr('clip-path', 'url(\"#' + this.clipper.attr('id') + '\")')\r\n  }\r\n  // Unclip element\r\n, unclip: function() {\r\n    delete this.clipper\r\n    return this.attr('clip-path', null)\r\n  }\r\n\r\n})\nSVG.Gradient = SVG.invent({\r\n  // Initialize node\r\n  create: function(type) {\r\n    this.constructor.call(this, SVG.create(type + 'Gradient'))\r\n\r\n    // store type\r\n    this.type = type\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add a color stop\r\n    at: function(offset, color, opacity) {\r\n      return this.put(new SVG.Stop).update(offset, color, opacity)\r\n    }\r\n    // Update gradient\r\n  , update: function(block) {\r\n      // remove all stops\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'gradientTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create gradient element in defs\r\n    gradient: function(type, block) {\r\n      return this.defs().gradient(type, block)\r\n    }\r\n  }\r\n})\r\n\r\n// Add animatable methods to both gradient and fx module\r\nSVG.extend(SVG.Gradient, SVG.FX, {\r\n  // From position\r\n  from: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ fx: new SVG.Number(x), fy: new SVG.Number(y) }) :\r\n      this.attr({ x1: new SVG.Number(x), y1: new SVG.Number(y) })\r\n  }\r\n  // To position\r\n, to: function(x, y) {\r\n    return (this._target || this).type == 'radial' ?\r\n      this.attr({ cx: new SVG.Number(x), cy: new SVG.Number(y) }) :\r\n      this.attr({ x2: new SVG.Number(x), y2: new SVG.Number(y) })\r\n  }\r\n})\r\n\r\n// Base gradient generation\r\nSVG.extend(SVG.Defs, {\r\n  // define gradient\r\n  gradient: function(type, block) {\r\n    return this.put(new SVG.Gradient(type)).update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.Stop = SVG.invent({\r\n  // Initialize node\r\n  create: 'stop'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // add color stops\r\n    update: function(o) {\r\n      if (typeof o == 'number' || o instanceof SVG.Number) {\r\n        o = {\r\n          offset:  arguments[0]\r\n        , color:   arguments[1]\r\n        , opacity: arguments[2]\r\n        }\r\n      }\r\n\r\n      // set attributes\r\n      if (o.opacity != null) this.attr('stop-opacity', o.opacity)\r\n      if (o.color   != null) this.attr('stop-color', o.color)\r\n      if (o.offset  != null) this.attr('offset', new SVG.Number(o.offset))\r\n\r\n      return this\r\n    }\r\n  }\r\n\r\n})\r\n\nSVG.Pattern = SVG.invent({\r\n  // Initialize node\r\n  create: 'pattern'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Return the fill id\r\n    fill: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n    // Update pattern by rebuilding\r\n  , update: function(block) {\r\n      // remove content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Alias string convertion to fill\r\n  , toString: function() {\r\n      return this.fill()\r\n    }\r\n    // custom attr to handle transform\r\n  , attr: function(a, b, c) {\r\n      if(a == 'transform') a = 'patternTransform'\r\n      return SVG.Container.prototype.attr.call(this, a, b, c)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create pattern element in defs\r\n    pattern: function(width, height, block) {\r\n      return this.defs().pattern(width, height, block)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Define gradient\r\n  pattern: function(width, height, block) {\r\n    return this.put(new SVG.Pattern).update(block).attr({\r\n      x:            0\r\n    , y:            0\r\n    , width:        width\r\n    , height:       height\r\n    , patternUnits: 'userSpaceOnUse'\r\n    })\r\n  }\r\n\r\n})\nSVG.Shape = SVG.invent({\r\n  // Initialize node\r\n  create: function(element) {\r\n    this.constructor.call(this, element)\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n})\n\r\nSVG.Bare = SVG.invent({\r\n  // Initialize\r\n  create: function(element, inherit) {\r\n    // construct element\r\n    this.constructor.call(this, SVG.create(element))\r\n\r\n    // inherit custom methods\r\n    if (inherit)\r\n      for (var method in inherit.prototype)\r\n        if (typeof inherit.prototype[method] === 'function')\r\n          this[method] = inherit.prototype[method]\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Element\r\n\r\n  // Add methods\r\n, extend: {\r\n    // Insert some plain text\r\n    words: function(text) {\r\n      // remove contents\r\n      while (this.node.hasChildNodes())\r\n        this.node.removeChild(this.node.lastChild)\r\n\r\n      // create text node\r\n      this.node.appendChild(document.createTextNode(text))\r\n\r\n      return this\r\n    }\r\n  }\r\n})\r\n\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Create an element that is not described by SVG.js\r\n  element: function(element, inherit) {\r\n    return this.put(new SVG.Bare(element, inherit))\r\n  }\r\n})\r\n\nSVG.Symbol = SVG.invent({\r\n  // Initialize node\r\n  create: 'symbol'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n, construct: {\r\n    // create symbol\r\n    symbol: function() {\r\n      return this.put(new SVG.Symbol)\r\n    }\r\n  }\r\n})\r\n\nSVG.Use = SVG.invent({\r\n  // Initialize node\r\n  create: 'use'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Use element as a reference\r\n    element: function(element, file) {\r\n      // Set lined element\r\n      return this.attr('href', (file || '') + '#' + element, SVG.xlink)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a use element\r\n    use: function(element, file) {\r\n      return this.put(new SVG.Use).element(element, file)\r\n    }\r\n  }\r\n})\nSVG.Rect = SVG.invent({\r\n  // Initialize node\r\n  create: 'rect'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a rect element\r\n    rect: function(width, height) {\r\n      return this.put(new SVG.Rect()).size(width, height)\r\n    }\r\n  }\r\n})\nSVG.Circle = SVG.invent({\r\n  // Initialize node\r\n  create: 'circle'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create circle element, based on ellipse\r\n    circle: function(size) {\r\n      return this.put(new SVG.Circle).rx(new SVG.Number(size).divide(2)).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Circle, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('r', rx)\r\n  }\r\n  // Alias radius x value\r\n, ry: function(ry) {\r\n    return this.rx(ry)\r\n  }\r\n})\r\n\r\nSVG.Ellipse = SVG.invent({\r\n  // Initialize node\r\n  create: 'ellipse'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create an ellipse\r\n    ellipse: function(width, height) {\r\n      return this.put(new SVG.Ellipse).size(width, height).move(0, 0)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {\r\n  // Radius x value\r\n  rx: function(rx) {\r\n    return this.attr('rx', rx)\r\n  }\r\n  // Radius y value\r\n, ry: function(ry) {\r\n    return this.attr('ry', ry)\r\n  }\r\n})\r\n\r\n// Add common method\r\nSVG.extend(SVG.Circle, SVG.Ellipse, {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())\r\n    }\r\n    // Move by center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.attr('cx') : this.attr('cx', x)\r\n    }\r\n    // Move by center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.attr('cy') : this.attr('cy', y)\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.rx() * 2 : this.rx(new SVG.Number(width).divide(2))\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.ry() * 2 : this.ry(new SVG.Number(height).divide(2))\r\n    }\r\n    // Custom size function\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this\r\n        .rx(new SVG.Number(p.width).divide(2))\r\n        .ry(new SVG.Number(p.height).divide(2))\r\n    }\r\n})\nSVG.Line = SVG.invent({\r\n  // Initialize node\r\n  create: 'line'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Get array\r\n    array: function() {\r\n      return new SVG.PointArray([\r\n        [ this.attr('x1'), this.attr('y1') ]\r\n      , [ this.attr('x2'), this.attr('y2') ]\r\n      ])\r\n    }\r\n    // Overwrite native plot() method\r\n  , plot: function(x1, y1, x2, y2) {\r\n      if (x1 == null)\r\n        return this.array()\r\n      else if (typeof y1 !== 'undefined')\r\n        x1 = { x1: x1, y1: y1, x2: x2, y2: y2 }\r\n      else\r\n        x1 = new SVG.PointArray(x1).toLine()\r\n\r\n      return this.attr(x1)\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr(this.array().move(x, y).toLine())\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr(this.array().size(p.width, p.height).toLine())\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a line element\r\n    line: function(x1, y1, x2, y2) {\r\n      // make sure plot is called as a setter\r\n      // x1 is not necessarily a number, it can also be an array, a string and a SVG.PointArray\r\n      return SVG.Line.prototype.plot.apply(\r\n        this.put(new SVG.Line)\r\n      , x1 != null ? [x1, y1, x2, y2] : [0, 0, 0, 0]\r\n      )\r\n    }\r\n  }\r\n})\r\n\nSVG.Polyline = SVG.invent({\r\n  // Initialize node\r\n  create: 'polyline'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polyline element\r\n    polyline: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polyline).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.Polygon = SVG.invent({\r\n  // Initialize node\r\n  create: 'polygon'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped polygon element\r\n    polygon: function(p) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Polygon).plot(p || new SVG.PointArray)\r\n    }\r\n  }\r\n})\r\n\r\n// Add polygon-specific functions\r\nSVG.extend(SVG.Polyline, SVG.Polygon, {\r\n  // Get array\r\n  array: function() {\r\n    return this._array || (this._array = new SVG.PointArray(this.attr('points')))\r\n  }\r\n  // Plot new path\r\n, plot: function(p) {\r\n    return (p == null) ?\r\n      this.array() :\r\n      this.clear().attr('points', typeof p == 'string' ? p : (this._array = new SVG.PointArray(p)))\r\n  }\r\n  // Clear array cache\r\n, clear: function() {\r\n    delete this._array\r\n    return this\r\n  }\r\n  // Move by left top corner\r\n, move: function(x, y) {\r\n    return this.attr('points', this.array().move(x, y))\r\n  }\r\n  // Set element size to given width and height\r\n, size: function(width, height) {\r\n    var p = proportionalSize(this, width, height)\r\n\r\n    return this.attr('points', this.array().size(p.width, p.height))\r\n  }\r\n\r\n})\r\n\n// unify all point to point elements\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, {\r\n  // Define morphable array\r\n  morphArray:  SVG.PointArray\r\n  // Move by left top corner over x-axis\r\n, x: function(x) {\r\n    return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n  }\r\n  // Move by left top corner over y-axis\r\n, y: function(y) {\r\n    return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n  }\r\n  // Set width of element\r\n, width: function(width) {\r\n    var b = this.bbox()\r\n\r\n    return width == null ? b.width : this.size(width, b.height)\r\n  }\r\n  // Set height of element\r\n, height: function(height) {\r\n    var b = this.bbox()\r\n\r\n    return height == null ? b.height : this.size(b.width, height)\r\n  }\r\n})\nSVG.Path = SVG.invent({\r\n  // Initialize node\r\n  create: 'path'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Define morphable array\r\n    morphArray:  SVG.PathArray\r\n    // Get array\r\n  , array: function() {\r\n      return this._array || (this._array = new SVG.PathArray(this.attr('d')))\r\n    }\r\n    // Plot new path\r\n  , plot: function(d) {\r\n      return (d == null) ?\r\n        this.array() :\r\n        this.clear().attr('d', typeof d == 'string' ? d : (this._array = new SVG.PathArray(d)))\r\n    }\r\n    // Clear array cache\r\n  , clear: function() {\r\n      delete this._array\r\n      return this\r\n    }\r\n    // Move by left top corner\r\n  , move: function(x, y) {\r\n      return this.attr('d', this.array().move(x, y))\r\n    }\r\n    // Move by left top corner over x-axis\r\n  , x: function(x) {\r\n      return x == null ? this.bbox().x : this.move(x, this.bbox().y)\r\n    }\r\n    // Move by left top corner over y-axis\r\n  , y: function(y) {\r\n      return y == null ? this.bbox().y : this.move(this.bbox().x, y)\r\n    }\r\n    // Set element size to given width and height\r\n  , size: function(width, height) {\r\n      var p = proportionalSize(this, width, height)\r\n\r\n      return this.attr('d', this.array().size(p.width, p.height))\r\n    }\r\n    // Set width of element\r\n  , width: function(width) {\r\n      return width == null ? this.bbox().width : this.size(width, this.bbox().height)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return height == null ? this.bbox().height : this.size(this.bbox().width, height)\r\n    }\r\n\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a wrapped path element\r\n    path: function(d) {\r\n      // make sure plot is called as a setter\r\n      return this.put(new SVG.Path).plot(d || new SVG.PathArray)\r\n    }\r\n  }\r\n})\r\n\nSVG.Image = SVG.invent({\r\n  // Initialize node\r\n  create: 'image'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // (re)load image\r\n    load: function(url) {\r\n      if (!url) return this\r\n\r\n      var self = this\r\n        , img  = new window.Image()\r\n\r\n      // preload image\r\n      SVG.on(img, 'load', function() {\r\n        SVG.off(img)\r\n\r\n        var p = self.parent(SVG.Pattern)\r\n\r\n        if(p === null) return\r\n\r\n        // ensure image size\r\n        if (self.width() == 0 && self.height() == 0)\r\n          self.size(img.width, img.height)\r\n\r\n        // ensure pattern size if not set\r\n        if (p && p.width() == 0 && p.height() == 0)\r\n          p.size(self.width(), self.height())\r\n\r\n        // callback\r\n        if (typeof self._loaded === 'function')\r\n          self._loaded.call(self, {\r\n            width:  img.width\r\n          , height: img.height\r\n          , ratio:  img.width / img.height\r\n          , url:    url\r\n          })\r\n      })\r\n\r\n      SVG.on(img, 'error', function(e){\r\n        SVG.off(img)\r\n\r\n        if (typeof self._error === 'function'){\r\n            self._error.call(self, e)\r\n        }\r\n      })\r\n\r\n      return this.attr('href', (img.src = this.src = url), SVG.xlink)\r\n    }\r\n    // Add loaded callback\r\n  , loaded: function(loaded) {\r\n      this._loaded = loaded\r\n      return this\r\n    }\r\n\r\n  , error: function(error) {\r\n      this._error = error\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // create image element, load image and set its size\r\n    image: function(source, width, height) {\r\n      return this.put(new SVG.Image).load(source).size(width || 0, height || width || 0)\r\n    }\r\n  }\r\n\r\n})\nSVG.Text = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('text'))\r\n\r\n    this.dom.leading = new SVG.Number(1.3)    // store leading value for rebuilding\r\n    this._rebuild = true                      // enable automatic updating of dy values\r\n    this._build   = false                     // disable build mode for adding multiple lines\r\n\r\n    // set default font\r\n    this.attr('font-family', SVG.defaults.attrs['font-family'])\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Move over x-axis\r\n    x: function(x) {\r\n      // act as getter\r\n      if (x == null)\r\n        return this.attr('x')\r\n\r\n      return this.attr('x', x)\r\n    }\r\n    // Move over y-axis\r\n  , y: function(y) {\r\n      var oy = this.attr('y')\r\n        , o  = typeof oy === 'number' ? oy - this.bbox().y : 0\r\n\r\n      // act as getter\r\n      if (y == null)\r\n        return typeof oy === 'number' ? oy - o : oy\r\n\r\n      return this.attr('y', typeof y.valueOf() === 'number' ? y + o : y)\r\n    }\r\n    // Move center over x-axis\r\n  , cx: function(x) {\r\n      return x == null ? this.bbox().cx : this.x(x - this.bbox().width / 2)\r\n    }\r\n    // Move center over y-axis\r\n  , cy: function(y) {\r\n      return y == null ? this.bbox().cy : this.y(y - this.bbox().height / 2)\r\n    }\r\n    // Set the text content\r\n  , text: function(text) {\r\n      // act as getter\r\n      if (typeof text === 'undefined'){\r\n        var text = ''\r\n        var children = this.node.childNodes\r\n        for(var i = 0, len = children.length; i < len; ++i){\r\n\r\n          // add newline if its not the first child and newLined is set to true\r\n          if(i != 0 && children[i].nodeType != 3 && SVG.adopt(children[i]).dom.newLined == true){\r\n            text += '\\n'\r\n          }\r\n\r\n          // add content of this node\r\n          text += children[i].textContent\r\n        }\r\n\r\n        return text\r\n      }\r\n\r\n      // remove existing content\r\n      this.clear().build(true)\r\n\r\n      if (typeof text === 'function') {\r\n        // call block\r\n        text.call(this, this)\r\n\r\n      } else {\r\n        // store text and make sure text is not blank\r\n        text = text.split('\\n')\r\n\r\n        // build new lines\r\n        for (var i = 0, il = text.length; i < il; i++)\r\n          this.tspan(text[i]).newLine()\r\n      }\r\n\r\n      // disable build mode and rebuild lines\r\n      return this.build(false).rebuild()\r\n    }\r\n    // Set font size\r\n  , size: function(size) {\r\n      return this.attr('font-size', size).rebuild()\r\n    }\r\n    // Set / get leading\r\n  , leading: function(value) {\r\n      // act as getter\r\n      if (value == null)\r\n        return this.dom.leading\r\n\r\n      // act as setter\r\n      this.dom.leading = new SVG.Number(value)\r\n\r\n      return this.rebuild()\r\n    }\r\n    // Get all the first level lines\r\n  , lines: function() {\r\n      var node = (this.textPath && this.textPath() || this).node\r\n\r\n      // filter tspans and map them to SVG.js instances\r\n      var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function(el){\r\n        return SVG.adopt(el)\r\n      })\r\n\r\n      // return an instance of SVG.set\r\n      return new SVG.Set(lines)\r\n    }\r\n    // Rebuild appearance type\r\n  , rebuild: function(rebuild) {\r\n      // store new rebuild flag if given\r\n      if (typeof rebuild == 'boolean')\r\n        this._rebuild = rebuild\r\n\r\n      // define position of all lines\r\n      if (this._rebuild) {\r\n        var self = this\r\n          , blankLineOffset = 0\r\n          , dy = this.dom.leading * new SVG.Number(this.attr('font-size'))\r\n\r\n        this.lines().each(function() {\r\n          if (this.dom.newLined) {\r\n            if (!self.textPath())\r\n              this.attr('x', self.attr('x'))\r\n            if(this.text() == '\\n') {\r\n              blankLineOffset += dy\r\n            }else{\r\n              this.attr('dy', dy + blankLineOffset)\r\n              blankLineOffset = 0\r\n            }\r\n          }\r\n        })\r\n\r\n        this.fire('rebuild')\r\n      }\r\n\r\n      return this\r\n    }\r\n    // Enable / disable build mode\r\n  , build: function(build) {\r\n      this._build = !!build\r\n      return this\r\n    }\r\n    // overwrite method from parent to set data properly\r\n  , setData: function(o){\r\n      this.dom = o\r\n      this.dom.leading = new SVG.Number(o.leading || 1.3)\r\n      return this\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create text element\r\n    text: function(text) {\r\n      return this.put(new SVG.Text).text(text)\r\n    }\r\n    // Create plain text element\r\n  , plain: function(text) {\r\n      return this.put(new SVG.Text).plain(text)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.Tspan = SVG.invent({\r\n  // Initialize node\r\n  create: 'tspan'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Shape\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set text content\r\n    text: function(text) {\r\n      if(text == null) return this.node.textContent + (this.dom.newLined ? '\\n' : '')\r\n\r\n      typeof text === 'function' ? text.call(this, this) : this.plain(text)\r\n\r\n      return this\r\n    }\r\n    // Shortcut dx\r\n  , dx: function(dx) {\r\n      return this.attr('dx', dx)\r\n    }\r\n    // Shortcut dy\r\n  , dy: function(dy) {\r\n      return this.attr('dy', dy)\r\n    }\r\n    // Create new line\r\n  , newLine: function() {\r\n      // fetch text parent\r\n      var t = this.parent(SVG.Text)\r\n\r\n      // mark new line\r\n      this.dom.newLined = true\r\n\r\n      // apply new hy¡n\r\n      return this.dy(t.dom.leading * t.attr('font-size')).attr('x', t.x())\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Text, SVG.Tspan, {\r\n  // Create plain text node\r\n  plain: function(text) {\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // create text node\r\n    this.node.appendChild(document.createTextNode(text))\r\n\r\n    return this\r\n  }\r\n  // Create a tspan\r\n, tspan: function(text) {\r\n    var node  = (this.textPath && this.textPath() || this).node\r\n      , tspan = new SVG.Tspan\r\n\r\n    // clear if build mode is disabled\r\n    if (this._build === false)\r\n      this.clear()\r\n\r\n    // add new tspan\r\n    node.appendChild(tspan.node)\r\n\r\n    return tspan.text(text)\r\n  }\r\n  // Clear all lines\r\n, clear: function() {\r\n    var node = (this.textPath && this.textPath() || this).node\r\n\r\n    // remove existing child nodes\r\n    while (node.hasChildNodes())\r\n      node.removeChild(node.lastChild)\r\n\r\n    return this\r\n  }\r\n  // Get length of text element\r\n, length: function() {\r\n    return this.node.getComputedTextLength()\r\n  }\r\n})\r\n\nSVG.TextPath = SVG.invent({\r\n  // Initialize node\r\n  create: 'textPath'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Parent\r\n\r\n  // Define parent class\r\n, parent: SVG.Text\r\n\r\n  // Add parent method\r\n, construct: {\r\n    morphArray: SVG.PathArray\r\n    // Create path for text to run on\r\n  , path: function(d) {\r\n      // create textPath element\r\n      var path  = new SVG.TextPath\r\n        , track = this.doc().defs().path(d)\r\n\r\n      // move lines to textpath\r\n      while (this.node.hasChildNodes())\r\n        path.node.appendChild(this.node.firstChild)\r\n\r\n      // add textPath element as child node\r\n      this.node.appendChild(path.node)\r\n\r\n      // link textPath to path and add content\r\n      path.attr('href', '#' + track, SVG.xlink)\r\n\r\n      return this\r\n    }\r\n    // return the array of the path track element\r\n  , array: function() {\r\n      var track = this.track()\r\n\r\n      return track ? track.array() : null\r\n    }\r\n    // Plot path if any\r\n  , plot: function(d) {\r\n      var track = this.track()\r\n        , pathArray = null\r\n\r\n      if (track) {\r\n        pathArray = track.plot(d)\r\n      }\r\n\r\n      return (d == null) ? pathArray : this\r\n    }\r\n    // Get the path track element\r\n  , track: function() {\r\n      var path = this.textPath()\r\n\r\n      if (path)\r\n        return path.reference('href')\r\n    }\r\n    // Get the textPath child\r\n  , textPath: function() {\r\n      if (this.node.firstChild && this.node.firstChild.nodeName == 'textPath')\r\n        return SVG.adopt(this.node.firstChild)\r\n    }\r\n  }\r\n})\r\n\nSVG.Nested = SVG.invent({\r\n  // Initialize node\r\n  create: function() {\r\n    this.constructor.call(this, SVG.create('svg'))\r\n\r\n    this.style('overflow', 'visible')\r\n  }\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create nested svg document\r\n    nested: function() {\r\n      return this.put(new SVG.Nested)\r\n    }\r\n  }\r\n})\nSVG.A = SVG.invent({\r\n  // Initialize node\r\n  create: 'a'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Link url\r\n    to: function(url) {\r\n      return this.attr('href', url, SVG.xlink)\r\n    }\r\n    // Link show attribute\r\n  , show: function(target) {\r\n      return this.attr('show', target, SVG.xlink)\r\n    }\r\n    // Link target attribute\r\n  , target: function(target) {\r\n      return this.attr('target', target)\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a hyperlink element\r\n    link: function(url) {\r\n      return this.put(new SVG.A).to(url)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Element, {\r\n  // Create a hyperlink element\r\n  linkTo: function(url) {\r\n    var link = new SVG.A\r\n\r\n    if (typeof url == 'function')\r\n      url.call(link, link)\r\n    else\r\n      link.to(url)\r\n\r\n    return this.parent().put(link).put(this)\r\n  }\r\n\r\n})\nSVG.Marker = SVG.invent({\r\n  // Initialize node\r\n  create: 'marker'\r\n\r\n  // Inherit from\r\n, inherit: SVG.Container\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Set width of element\r\n    width: function(width) {\r\n      return this.attr('markerWidth', width)\r\n    }\r\n    // Set height of element\r\n  , height: function(height) {\r\n      return this.attr('markerHeight', height)\r\n    }\r\n    // Set marker refX and refY\r\n  , ref: function(x, y) {\r\n      return this.attr('refX', x).attr('refY', y)\r\n    }\r\n    // Update marker\r\n  , update: function(block) {\r\n      // remove all content\r\n      this.clear()\r\n\r\n      // invoke passed block\r\n      if (typeof block == 'function')\r\n        block.call(this, this)\r\n\r\n      return this\r\n    }\r\n    // Return the fill id\r\n  , toString: function() {\r\n      return 'url(#' + this.id() + ')'\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    marker: function(width, height, block) {\r\n      // Create marker element in defs\r\n      return this.defs().marker(width, height, block)\r\n    }\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Defs, {\r\n  // Create marker\r\n  marker: function(width, height, block) {\r\n    // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto\r\n    return this.put(new SVG.Marker)\r\n      .size(width, height)\r\n      .ref(width / 2, height / 2)\r\n      .viewbox(0, 0, width, height)\r\n      .attr('orient', 'auto')\r\n      .update(block)\r\n  }\r\n\r\n})\r\n\r\nSVG.extend(SVG.Line, SVG.Polyline, SVG.Polygon, SVG.Path, {\r\n  // Create and attach markers\r\n  marker: function(marker, width, height, block) {\r\n    var attr = ['marker']\r\n\r\n    // Build attribute name\r\n    if (marker != 'all') attr.push(marker)\r\n    attr = attr.join('-')\r\n\r\n    // Set marker attribute\r\n    marker = arguments[1] instanceof SVG.Marker ?\r\n      arguments[1] :\r\n      this.doc().marker(width, height, block)\r\n\r\n    return this.attr(attr, marker)\r\n  }\r\n\r\n})\n// Define list of available attributes for stroke and fill\r\nvar sugar = {\r\n  stroke: ['color', 'width', 'opacity', 'linecap', 'linejoin', 'miterlimit', 'dasharray', 'dashoffset']\r\n, fill:   ['color', 'opacity', 'rule']\r\n, prefix: function(t, a) {\r\n    return a == 'color' ? t : t + '-' + a\r\n  }\r\n}\r\n\r\n// Add sugar for fill and stroke\r\n;['fill', 'stroke'].forEach(function(m) {\r\n  var i, extension = {}\r\n\r\n  extension[m] = function(o) {\r\n    if (typeof o == 'undefined')\r\n      return this\r\n    if (typeof o == 'string' || SVG.Color.isRgb(o) || (o && typeof o.fill === 'function'))\r\n      this.attr(m, o)\r\n\r\n    else\r\n      // set all attributes from sugar.fill and sugar.stroke list\r\n      for (i = sugar[m].length - 1; i >= 0; i--)\r\n        if (o[sugar[m][i]] != null)\r\n          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])\r\n\r\n    return this\r\n  }\r\n\r\n  SVG.extend(SVG.Element, SVG.FX, extension)\r\n\r\n})\r\n\r\nSVG.extend(SVG.Element, SVG.FX, {\r\n  // Map rotation to transform\r\n  rotate: function(d, cx, cy) {\r\n    return this.transform({ rotation: d, cx: cx, cy: cy })\r\n  }\r\n  // Map skew to transform\r\n, skew: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ skew: x, cx: y, cy: cx }) :\r\n      this.transform({ skewX: x, skewY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map scale to transform\r\n, scale: function(x, y, cx, cy) {\r\n    return arguments.length == 1  || arguments.length == 3 ?\r\n      this.transform({ scale: x, cx: y, cy: cx }) :\r\n      this.transform({ scaleX: x, scaleY: y, cx: cx, cy: cy })\r\n  }\r\n  // Map translate to transform\r\n, translate: function(x, y) {\r\n    return this.transform({ x: x, y: y })\r\n  }\r\n  // Map flip to transform\r\n, flip: function(a, o) {\r\n    o = typeof a == 'number' ? a : o\r\n    return this.transform({ flip: a || 'both', offset: o })\r\n  }\r\n  // Map matrix to transform\r\n, matrix: function(m) {\r\n    return this.attr('transform', new SVG.Matrix(arguments.length == 6 ? [].slice.call(arguments) : m))\r\n  }\r\n  // Opacity\r\n, opacity: function(value) {\r\n    return this.attr('opacity', value)\r\n  }\r\n  // Relative move over x axis\r\n, dx: function(x) {\r\n    return this.x(new SVG.Number(x).plus(this instanceof SVG.FX ? 0 : this.x()), true)\r\n  }\r\n  // Relative move over y axis\r\n, dy: function(y) {\r\n    return this.y(new SVG.Number(y).plus(this instanceof SVG.FX ? 0 : this.y()), true)\r\n  }\r\n  // Relative move over x and y axes\r\n, dmove: function(x, y) {\r\n    return this.dx(x).dy(y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Rect, SVG.Ellipse, SVG.Circle, SVG.Gradient, SVG.FX, {\r\n  // Add x and y radius\r\n  radius: function(x, y) {\r\n    var type = (this._target || this).type;\r\n    return type == 'radial' || type == 'circle' ?\r\n      this.attr('r', new SVG.Number(x)) :\r\n      this.rx(x).ry(y == null ? x : y)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Path, {\r\n  // Get path length\r\n  length: function() {\r\n    return this.node.getTotalLength()\r\n  }\r\n  // Get point at length\r\n, pointAt: function(length) {\r\n    return this.node.getPointAtLength(length)\r\n  }\r\n})\r\n\r\nSVG.extend(SVG.Parent, SVG.Text, SVG.Tspan, SVG.FX, {\r\n  // Set font\r\n  font: function(a, v) {\r\n    if (typeof a == 'object') {\r\n      for (v in a) this.font(v, a[v])\r\n    }\r\n\r\n    return a == 'leading' ?\r\n        this.leading(v) :\r\n      a == 'anchor' ?\r\n        this.attr('text-anchor', v) :\r\n      a == 'size' || a == 'family' || a == 'weight' || a == 'stretch' || a == 'variant' || a == 'style' ?\r\n        this.attr('font-'+ a, v) :\r\n        this.attr(a, v)\r\n  }\r\n})\r\n\nSVG.Set = SVG.invent({\r\n  // Initialize\r\n  create: function(members) {\r\n    if (members instanceof SVG.Set) {\r\n      this.members = members.members.slice()\r\n    } else {\r\n      Array.isArray(members) ? this.members = members : this.clear()\r\n    }\r\n  }\r\n\r\n  // Add class methods\r\n, extend: {\r\n    // Add element to set\r\n    add: function() {\r\n      var i, il, elements = [].slice.call(arguments)\r\n\r\n      for (i = 0, il = elements.length; i < il; i++)\r\n        this.members.push(elements[i])\r\n\r\n      return this\r\n    }\r\n    // Remove element from set\r\n  , remove: function(element) {\r\n      var i = this.index(element)\r\n\r\n      // remove given child\r\n      if (i > -1)\r\n        this.members.splice(i, 1)\r\n\r\n      return this\r\n    }\r\n    // Iterate over all members\r\n  , each: function(block) {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        block.apply(this.members[i], [i, this.members])\r\n\r\n      return this\r\n    }\r\n    // Restore to defaults\r\n  , clear: function() {\r\n      // initialize store\r\n      this.members = []\r\n\r\n      return this\r\n    }\r\n    // Get the length of a set\r\n  , length: function() {\r\n      return this.members.length\r\n    }\r\n    // Checks if a given element is present in set\r\n  , has: function(element) {\r\n      return this.index(element) >= 0\r\n    }\r\n    // retuns index of given element in set\r\n  , index: function(element) {\r\n      return this.members.indexOf(element)\r\n    }\r\n    // Get member at given index\r\n  , get: function(i) {\r\n      return this.members[i]\r\n    }\r\n    // Get first member\r\n  , first: function() {\r\n      return this.get(0)\r\n    }\r\n    // Get last member\r\n  , last: function() {\r\n      return this.get(this.members.length - 1)\r\n    }\r\n    // Default value\r\n  , valueOf: function() {\r\n      return this.members\r\n    }\r\n    // Get the bounding box of all members included or empty box if set has no items\r\n  , bbox: function(){\r\n      // return an empty box of there are no members\r\n      if (this.members.length == 0)\r\n        return new SVG.RBox()\r\n\r\n      // get the first rbox and update the target bbox\r\n      var rbox = this.members[0].rbox(this.members[0].doc())\r\n\r\n      this.each(function() {\r\n        // user rbox for correct position and visual representation\r\n        rbox = rbox.merge(this.rbox(this.doc()))\r\n      })\r\n\r\n      return rbox\r\n    }\r\n  }\r\n\r\n  // Add parent method\r\n, construct: {\r\n    // Create a new set\r\n    set: function(members) {\r\n      return new SVG.Set(members)\r\n    }\r\n  }\r\n})\r\n\r\nSVG.FX.Set = SVG.invent({\r\n  // Initialize node\r\n  create: function(set) {\r\n    // store reference to set\r\n    this.set = set\r\n  }\r\n\r\n})\r\n\r\n// Alias methods\r\nSVG.Set.inherit = function() {\r\n  var m\r\n    , methods = []\r\n\r\n  // gather shape methods\r\n  for(var m in SVG.Shape.prototype)\r\n    if (typeof SVG.Shape.prototype[m] == 'function' && typeof SVG.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply shape aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.members.length; i < il; i++)\r\n        if (this.members[i] && typeof this.members[i][method] == 'function')\r\n          this.members[i][method].apply(this.members[i], arguments)\r\n\r\n      return method == 'animate' ? (this.fx || (this.fx = new SVG.FX.Set(this))) : this\r\n    }\r\n  })\r\n\r\n  // clear methods for the next round\r\n  methods = []\r\n\r\n  // gather fx methods\r\n  for(var m in SVG.FX.prototype)\r\n    if (typeof SVG.FX.prototype[m] == 'function' && typeof SVG.FX.Set.prototype[m] != 'function')\r\n      methods.push(m)\r\n\r\n  // apply fx aliasses\r\n  methods.forEach(function(method) {\r\n    SVG.FX.Set.prototype[method] = function() {\r\n      for (var i = 0, il = this.set.members.length; i < il; i++)\r\n        this.set.members[i].fx[method].apply(this.set.members[i].fx, arguments)\r\n\r\n      return this\r\n    }\r\n  })\r\n}\r\n\n\r\nSVG.extend(SVG.Element, {\r\n  // Store data values on svg nodes\r\n  data: function(a, v, r) {\r\n    if (typeof a == 'object') {\r\n      for (v in a)\r\n        this.data(v, a[v])\r\n\r\n    } else if (arguments.length < 2) {\r\n      try {\r\n        return JSON.parse(this.attr('data-' + a))\r\n      } catch(e) {\r\n        return this.attr('data-' + a)\r\n      }\r\n\r\n    } else {\r\n      this.attr(\r\n        'data-' + a\r\n      , v === null ?\r\n          null :\r\n        r === true || typeof v === 'string' || typeof v === 'number' ?\r\n          v :\r\n          JSON.stringify(v)\r\n      )\r\n    }\r\n\r\n    return this\r\n  }\r\n})\nSVG.extend(SVG.Element, {\r\n  // Remember arbitrary data\r\n  remember: function(k, v) {\r\n    // remember every item in an object individually\r\n    if (typeof arguments[0] == 'object')\r\n      for (var v in k)\r\n        this.remember(v, k[v])\r\n\r\n    // retrieve memory\r\n    else if (arguments.length == 1)\r\n      return this.memory()[k]\r\n\r\n    // store memory\r\n    else\r\n      this.memory()[k] = v\r\n\r\n    return this\r\n  }\r\n\r\n  // Erase a given memory\r\n, forget: function() {\r\n    if (arguments.length == 0)\r\n      this._memory = {}\r\n    else\r\n      for (var i = arguments.length - 1; i >= 0; i--)\r\n        delete this.memory()[arguments[i]]\r\n\r\n    return this\r\n  }\r\n\r\n  // Initialize or return local memory object\r\n, memory: function() {\r\n    return this._memory || (this._memory = {})\r\n  }\r\n\r\n})\n// Method for getting an element by id\r\nSVG.get = function(id) {\r\n  var node = document.getElementById(idFromReference(id) || id)\r\n  return SVG.adopt(node)\r\n}\r\n\r\n// Select elements by query string\r\nSVG.select = function(query, parent) {\r\n  return new SVG.Set(\r\n    SVG.utils.map((parent || document).querySelectorAll(query), function(node) {\r\n      return SVG.adopt(node)\r\n    })\r\n  )\r\n}\r\n\r\nSVG.extend(SVG.Parent, {\r\n  // Scoped select method\r\n  select: function(query) {\r\n    return SVG.select(query, this.node)\r\n  }\r\n\r\n})\nfunction pathRegReplace(a, b, c, d) {\r\n  return c + d.replace(SVG.regex.dots, ' .')\r\n}\r\n\r\n// creates deep clone of array\r\nfunction array_clone(arr){\r\n  var clone = arr.slice(0)\r\n  for(var i = clone.length; i--;){\r\n    if(Array.isArray(clone[i])){\r\n      clone[i] = array_clone(clone[i])\r\n    }\r\n  }\r\n  return clone\r\n}\r\n\r\n// tests if a given element is instance of an object\r\nfunction is(el, obj){\r\n  return el instanceof obj\r\n}\r\n\r\n// tests if a given selector matches an element\r\nfunction matches(el, selector) {\r\n  return (el.matches || el.matchesSelector || el.msMatchesSelector || el.mozMatchesSelector || el.webkitMatchesSelector || el.oMatchesSelector).call(el, selector);\r\n}\r\n\r\n// Convert dash-separated-string to camelCase\r\nfunction camelCase(s) {\r\n  return s.toLowerCase().replace(/-(.)/g, function(m, g) {\r\n    return g.toUpperCase()\r\n  })\r\n}\r\n\r\n// Capitalize first letter of a string\r\nfunction capitalize(s) {\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\n// Ensure to six-based hex\r\nfunction fullHex(hex) {\r\n  return hex.length == 4 ?\r\n    [ '#',\r\n      hex.substring(1, 2), hex.substring(1, 2)\r\n    , hex.substring(2, 3), hex.substring(2, 3)\r\n    , hex.substring(3, 4), hex.substring(3, 4)\r\n    ].join('') : hex\r\n}\r\n\r\n// Component to hex value\r\nfunction compToHex(comp) {\r\n  var hex = comp.toString(16)\r\n  return hex.length == 1 ? '0' + hex : hex\r\n}\r\n\r\n// Calculate proportional width and height values when necessary\r\nfunction proportionalSize(element, width, height) {\r\n  if (width == null || height == null) {\r\n    var box = element.bbox()\r\n\r\n    if (width == null)\r\n      width = box.width / box.height * height\r\n    else if (height == null)\r\n      height = box.height / box.width * width\r\n  }\r\n\r\n  return {\r\n    width:  width\r\n  , height: height\r\n  }\r\n}\r\n\r\n// Delta transform point\r\nfunction deltaTransformPoint(matrix, x, y) {\r\n  return {\r\n    x: x * matrix.a + y * matrix.c + 0\r\n  , y: x * matrix.b + y * matrix.d + 0\r\n  }\r\n}\r\n\r\n// Map matrix array to object\r\nfunction arrayToMatrix(a) {\r\n  return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }\r\n}\r\n\r\n// Parse matrix if required\r\nfunction parseMatrix(matrix) {\r\n  if (!(matrix instanceof SVG.Matrix))\r\n    matrix = new SVG.Matrix(matrix)\r\n\r\n  return matrix\r\n}\r\n\r\n// Add centre point to transform object\r\nfunction ensureCentre(o, target) {\r\n  o.cx = o.cx == null ? target.bbox().cx : o.cx\r\n  o.cy = o.cy == null ? target.bbox().cy : o.cy\r\n}\r\n\r\n// PathArray Helpers\r\nfunction arrayToString(a) {\r\n  for (var i = 0, il = a.length, s = ''; i < il; i++) {\r\n    s += a[i][0]\r\n\r\n    if (a[i][1] != null) {\r\n      s += a[i][1]\r\n\r\n      if (a[i][2] != null) {\r\n        s += ' '\r\n        s += a[i][2]\r\n\r\n        if (a[i][3] != null) {\r\n          s += ' '\r\n          s += a[i][3]\r\n          s += ' '\r\n          s += a[i][4]\r\n\r\n          if (a[i][5] != null) {\r\n            s += ' '\r\n            s += a[i][5]\r\n            s += ' '\r\n            s += a[i][6]\r\n\r\n            if (a[i][7] != null) {\r\n              s += ' '\r\n              s += a[i][7]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return s + ' '\r\n}\r\n\r\n// Deep new id assignment\r\nfunction assignNewId(node) {\r\n  // do the same for SVG child nodes as well\r\n  for (var i = node.childNodes.length - 1; i >= 0; i--)\r\n    if (node.childNodes[i] instanceof window.SVGElement)\r\n      assignNewId(node.childNodes[i])\r\n\r\n  return SVG.adopt(node).id(SVG.eid(node.nodeName))\r\n}\r\n\r\n// Add more bounding box properties\r\nfunction fullBox(b) {\r\n  if (b.x == null) {\r\n    b.x      = 0\r\n    b.y      = 0\r\n    b.width  = 0\r\n    b.height = 0\r\n  }\r\n\r\n  b.w  = b.width\r\n  b.h  = b.height\r\n  b.x2 = b.x + b.width\r\n  b.y2 = b.y + b.height\r\n  b.cx = b.x + b.width / 2\r\n  b.cy = b.y + b.height / 2\r\n\r\n  return b\r\n}\r\n\r\n// Get id from reference string\r\nfunction idFromReference(url) {\r\n  var m = (url || '').toString().match(SVG.regex.reference)\r\n\r\n  if (m) return m[1]\r\n}\r\n\r\n// If values like 1e-88 are passed, this is not a valid 32 bit float,\r\n// but in those cases, we are so close to 0 that 0 works well!\r\nfunction float32String(v) {\r\n  return Math.abs(v) > 1e-37 ? v : 0\r\n}\r\n\r\n// Create matrix array for looping\r\nvar abcdef = 'abcdef'.split('')\r\n\n// Add CustomEvent to IE9 and IE10\r\nif (typeof window.CustomEvent !== 'function') {\r\n  // Code from: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\r\n  var CustomEventPoly = function(event, options) {\r\n    options = options || { bubbles: false, cancelable: false, detail: undefined }\r\n    var e = document.createEvent('CustomEvent')\r\n    e.initCustomEvent(event, options.bubbles, options.cancelable, options.detail)\r\n    return e\r\n  }\r\n\r\n  CustomEventPoly.prototype = window.Event.prototype\r\n\r\n  SVG.CustomEvent = CustomEventPoly\r\n} else {\r\n  SVG.CustomEvent = window.CustomEvent\r\n}\r\n\r\n// requestAnimationFrame / cancelAnimationFrame Polyfill with fallback based on Paul Irish\r\n(function(w) {\r\n  var lastTime = 0\r\n  var vendors = ['moz', 'webkit']\r\n\r\n  for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\r\n    w.requestAnimationFrame = w[vendors[x] + 'RequestAnimationFrame']\r\n    w.cancelAnimationFrame  = w[vendors[x] + 'CancelAnimationFrame'] ||\r\n                              w[vendors[x] + 'CancelRequestAnimationFrame']\r\n  }\r\n\r\n  w.requestAnimationFrame = w.requestAnimationFrame ||\r\n    function(callback) {\r\n      var currTime = new Date().getTime()\r\n      var timeToCall = Math.max(0, 16 - (currTime - lastTime))\r\n\r\n      var id = w.setTimeout(function() {\r\n        callback(currTime + timeToCall)\r\n      }, timeToCall)\r\n\r\n      lastTime = currTime + timeToCall\r\n      return id\r\n    }\r\n\r\n  w.cancelAnimationFrame = w.cancelAnimationFrame || w.clearTimeout;\r\n\r\n}(window))\r\n\r\nreturn SVG\r\n\r\n}));\r//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/svg.js/dist/svg.js\n");

/***/ }),

/***/ "./node_modules/tinycolor2/tinycolor.js":
/*!**********************************************!*\
  !*** ./node_modules/tinycolor2/tinycolor.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.1\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function(Math) {\n\nvar trimLeft = /^\\s+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    mathRound = Math.round,\n    mathMin = Math.min,\n    mathMax = Math.max,\n    mathRandom = Math.random;\n\nfunction tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n}\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        //http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    getLuminance: function() {\n        //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var RsRGB, GsRGB, BsRGB, R, G, B;\n        RsRGB = rgb.r/255;\n        GsRGB = rgb.g/255;\n        BsRGB = rgb.b/255;\n\n        if (RsRGB <= 0.03928) {R = RsRGB / 12.92;} else {R = Math.pow(((RsRGB + 0.055) / 1.055), 2.4);}\n        if (GsRGB <= 0.03928) {G = GsRGB / 12.92;} else {G = Math.pow(((GsRGB + 0.055) / 1.055), 2.4);}\n        if (BsRGB <= 0.03928) {B = BsRGB / 12.92;} else {B = Math.pow(((BsRGB + 0.055) / 1.055), 2.4);}\n        return (0.2126 * R) + (0.7152 * G) + (0.0722 * B);\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function(allow4Char) {\n        return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n    },\n    toHex8String: function(allow4Char) {\n        return '#' + this.toHex8(allow4Char);\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex4\") {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n    clone: function() {\n        return tinycolor(this.toString());\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = Math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16)),\n        pad2(convertDecimalToHex(a))\n    ];\n\n    // Return a 4 character hex if possible\n    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\n\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n\n    var rgba = {\n        r: ((rgb2.r - rgb1.r) * p) + rgb1.r,\n        g: ((rgb2.g - rgb1.g) * p) + rgb1.g,\n        b: ((rgb2.b - rgb1.b) * p) + rgb1.b,\n        a: ((rgb2.a - rgb1.a) * p) + rgb1.a\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    return (Math.max(c1.getLuminance(),c2.getLuminance())+0.05) / (Math.min(c1.getLuminance(),c2.getLuminance())+0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function(color1, color2, wcag2) {\n    var readability = tinycolor.readability(color1, color2);\n    var wcag2Parms, out;\n\n    out = false;\n\n    wcag2Parms = validateWCAG2Parms(wcag2);\n    switch (wcag2Parms.level + wcag2Parms.size) {\n        case \"AAsmall\":\n        case \"AAAlarge\":\n            out = readability >= 4.5;\n            break;\n        case \"AAlarge\":\n            out = readability >= 3;\n            break;\n        case \"AAAsmall\":\n            out = readability >= 7;\n            break;\n    }\n    return out;\n\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function(baseColor, colorList, args) {\n    var bestColor = null;\n    var bestScore = 0;\n    var readability;\n    var includeFallbackColors, level, size ;\n    args = args || {};\n    includeFallbackColors = args.includeFallbackColors ;\n    level = args.level;\n    size = args.size;\n\n    for (var i= 0; i < colorList.length ; i++) {\n        readability = tinycolor.readability(baseColor, colorList[i]);\n        if (readability > bestScore) {\n            bestScore = readability;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n\n    if (tinycolor.isReadable(baseColor, bestColor, {\"level\":level,\"size\":size}) || !includeFallbackColors) {\n        return bestColor;\n    }\n    else {\n        args.includeFallbackColors=false;\n        return tinycolor.mostReadable(baseColor,[\"#fff\", \"#000\"],args);\n    }\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    rebeccapurple: \"663399\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((Math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        CSS_UNIT: new RegExp(CSS_UNIT),\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n        hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n    return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hsva.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex4.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            a: convertHexToDecimal(match[4] + '' + match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nfunction validateWCAG2Parms(parms) {\n    // return valid WCAG2 parms for isReadable.\n    // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n    var level, size;\n    parms = parms || {\"level\":\"AA\", \"size\":\"small\"};\n    level = (parms.level || \"AA\").toUpperCase();\n    size = (parms.size || \"small\").toLowerCase();\n    if (level !== \"AA\" && level !== \"AAA\") {\n        level = \"AA\";\n    }\n    if (size !== \"small\" && size !== \"large\") {\n        size = \"small\";\n    }\n    return {\"level\":level, \"size\":size};\n}\n\n// Node: Export function\nif ( true && module.exports) {\n    module.exports = tinycolor;\n}\n// AMD/requirejs: Define the module\nelse if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {return tinycolor;}).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n// Browser: Expose to window\nelse {}\n\n})(Math);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/tinycolor2/tinycolor.js\n");

/***/ }),

/***/ "./node_modules/tinygradient/browser.js":
/*!**********************************************!*\
  !*** ./node_modules/tinygradient/browser.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * tinygradient (v1.0.0)\n * @copyright 2014-2019 Damien \"Mistic\" Sorel <contact@git.strangeplanet.fr>\n * @licence MIT\n */\n(function (global, factory) {\n     true ? module.exports = factory(__webpack_require__(/*! tinycolor2 */ \"./node_modules/tinycolor2/tinycolor.js\")) :\n    undefined;\n}(this, function (tinycolor2) { 'use strict';\n\n    tinycolor2 = tinycolor2 && tinycolor2.hasOwnProperty('default') ? tinycolor2['default'] : tinycolor2;\n\n    /**\n     * @typedef {Object} TinyGradient.StopInput\n     * @property {ColorInput} color\n     * @property {number} pos\n     */\n\n    /**\n     * @typedef {Object} TinyGradient.StepValue\n     * @type {number} [r]\n     * @type {number} [g]\n     * @type {number} [b]\n     * @type {number} [h]\n     * @type {number} [s]\n     * @type {number} [v]\n     * @type {number} [a]\n     */\n\n    /**\n     * @type {StepValue}\n     */\n\n    var RGBA_MAX = {\n      r: 256,\n      g: 256,\n      b: 256,\n      a: 1\n    };\n    /**\n     * @type {StepValue}\n     */\n\n    var HSVA_MAX = {\n      h: 360,\n      s: 1,\n      v: 1,\n      a: 1\n    };\n    /**\n     * Linearly compute the step size between start and end (not normalized)\n     * @param {StepValue} start\n     * @param {StepValue} end\n     * @param {number} steps - number of desired steps\n     * @return {StepValue}\n     */\n\n    function stepize(start, end, steps) {\n      var step = {};\n\n      for (var k in start) {\n        if (start.hasOwnProperty(k)) {\n          step[k] = steps === 0 ? 0 : (end[k] - start[k]) / steps;\n        }\n      }\n\n      return step;\n    }\n    /**\n     * Compute the final step color\n     * @param {StepValue} step - from `stepize`\n     * @param {StepValue} start\n     * @param {number} i - color index\n     * @param {StepValue} max - rgba or hsva of maximum values for each channel\n     * @return {StepValue}\n     */\n\n\n    function interpolate(step, start, i, max) {\n      var color = {};\n\n      for (var k in start) {\n        if (start.hasOwnProperty(k)) {\n          color[k] = step[k] * i + start[k];\n          color[k] = color[k] < 0 ? color[k] + max[k] : max[k] !== 1 ? color[k] % max[k] : color[k];\n        }\n      }\n\n      return color;\n    }\n    /**\n     * Generate gradient with RGBa interpolation\n     * @param {StopInput} stop1\n     * @param {StopInput} stop2\n     * @param {number} steps\n     * @return {tinycolor[]} color1 included, color2 excluded\n     */\n\n\n    function interpolateRgb(stop1, stop2, steps) {\n      var start = stop1.color.toRgb();\n      var end = stop2.color.toRgb();\n      var step = stepize(start, end, steps);\n      var gradient = [stop1.color];\n\n      for (var i = 1; i < steps; i++) {\n        var color = interpolate(step, start, i, RGBA_MAX);\n        gradient.push(tinycolor2(color));\n      }\n\n      return gradient;\n    }\n    /**\n     * Generate gradient with HSVa interpolation\n     * @param {StopInput} stop1\n     * @param {StopInput} stop2\n     * @param {number} steps\n     * @param {boolean} trigonometric - true to step in trigonometric order\n     * @return {tinycolor[]} color1 included, color2 excluded\n     */\n\n\n    function interpolateHsv(stop1, stop2, steps, trigonometric) {\n      var start = stop1.color.toHsv();\n      var end = stop2.color.toHsv();\n      var step = stepize(start, end, steps);\n      var gradient = [stop1.color]; // recompute hue\n\n      var diff;\n\n      if (start.h <= end.h && !trigonometric || start.h >= end.h && trigonometric) {\n        diff = end.h - start.h;\n      } else if (trigonometric) {\n        diff = 360 - end.h + start.h;\n      } else {\n        diff = 360 - start.h + end.h;\n      }\n\n      step.h = Math.pow(-1, trigonometric ? 1 : 0) * Math.abs(diff) / steps;\n\n      for (var i = 1; i < steps; i++) {\n        var color = interpolate(step, start, i, HSVA_MAX);\n        gradient.push(tinycolor2(color));\n      }\n\n      return gradient;\n    }\n    /**\n     * Compute substeps between each stops\n     * @param {StopInput[]} stops\n     * @param {number} steps\n     * @return {number[]}\n     */\n\n\n    function computeSubsteps(stops, steps) {\n      var l = stops.length; // validation\n\n      steps = parseInt(steps, 10);\n\n      if (isNaN(steps) || steps < 2) {\n        throw new Error('Invalid number of steps (< 2)');\n      }\n\n      if (steps < l) {\n        throw new Error('Number of steps cannot be inferior to number of stops');\n      } // compute substeps from stop positions\n\n\n      var substeps = [];\n\n      for (var i = 1; i < l; i++) {\n        var step = (steps - 1) * (stops[i].pos - stops[i - 1].pos);\n        substeps.push(Math.max(1, Math.round(step)));\n      } // adjust number of steps\n\n\n      var totalSubsteps = 1;\n\n      for (var n = l - 1; n--;) {\n        totalSubsteps += substeps[n];\n      }\n\n      while (totalSubsteps !== steps) {\n        if (totalSubsteps < steps) {\n          var min = Math.min.apply(null, substeps);\n          substeps[substeps.indexOf(min)]++;\n          totalSubsteps++;\n        } else {\n          var max = Math.max.apply(null, substeps);\n          substeps[substeps.indexOf(max)]--;\n          totalSubsteps--;\n        }\n      }\n\n      return substeps;\n    }\n    /**\n     * Compute the color at a specific position\n     * @param {StopInput[]} stops\n     * @param {number} pos\n     * @param {string} method\n     * @param {StepValue} max\n     * @returns {tinycolor}\n     */\n\n\n    function computeAt(stops, pos, method, max) {\n      if (pos < 0 || pos > 1) {\n        throw new Error('Position must be between 0 and 1');\n      }\n\n      var start, end;\n\n      for (var i = 0, l = stops.length; i < l - 1; i++) {\n        if (pos >= stops[i].pos && pos < stops[i + 1].pos) {\n          start = stops[i];\n          end = stops[i + 1];\n          break;\n        }\n      }\n\n      if (!start) {\n        start = end = stops[stops.length - 1];\n      }\n\n      var step = stepize(start.color[method](), end.color[method](), (end.pos - start.pos) * 100);\n      var color = interpolate(step, start.color[method](), Math.round((pos - start.pos) * 100), max);\n      return tinycolor2(color);\n    }\n\n    var TinyGradient =\n    /*#__PURE__*/\n    function () {\n      /**\n       * @param {StopInput[]|ColorInput[]} stops\n       * @returns {TinyGradient}\n       */\n      function TinyGradient(stops) {\n        // validation\n        if (stops.length < 2) {\n          throw new Error('Invalid number of stops (< 2)');\n        }\n\n        var havingPositions = stops[0].pos !== undefined;\n        var l = stops.length;\n        var p = -1; // create tinycolor objects and clean positions\n\n        this.stops = stops.map(function (stop, i) {\n          var hasPosition = stop.pos !== undefined;\n\n          if (havingPositions ^ hasPosition) {\n            throw new Error('Cannot mix positionned and not posionned color stops');\n          }\n\n          if (hasPosition) {\n            stop = {\n              color: tinycolor2(stop.color),\n              pos: stop.pos\n            };\n\n            if (stop.pos < 0 || stop.pos > 1) {\n              throw new Error('Color stops positions must be between 0 and 1');\n            } else if (stop.pos <= p) {\n              throw new Error('Color stops positions are not ordered');\n            }\n\n            p = stop.pos;\n          } else {\n            stop = {\n              color: tinycolor2(stop),\n              pos: i / (l - 1)\n            };\n          }\n\n          return stop;\n        });\n\n        if (this.stops[0].pos !== 0) {\n          this.stops.unshift({\n            color: this.stops[0].color,\n            pos: 0\n          });\n        }\n\n        if (this.stops[this.stops.length - 1].pos !== 1) {\n          this.stops.push({\n            color: this.stops[this.stops.length - 1].color,\n            pos: 1\n          });\n        }\n      }\n      /**\n       * Return new instance with reversed stops\n       * @return {TinyGradient}\n       */\n\n\n      var _proto = TinyGradient.prototype;\n\n      _proto.reverse = function reverse() {\n        var stops = [];\n        this.stops.forEach(function (stop) {\n          stops.push({\n            color: stop.color,\n            pos: 1 - stop.pos\n          });\n        });\n        return new TinyGradient(stops.reverse());\n      }\n      /**\n       * Generate gradient with RGBa interpolation\n       * @param {number} steps\n       * @return {tinycolor[]}\n       */\n      ;\n\n      _proto.rgb = function rgb(steps) {\n        var substeps = computeSubsteps(this.stops, steps);\n        var gradient = [];\n\n        for (var i = 0, l = this.stops.length; i < l - 1; i++) {\n          var rgb = interpolateRgb(this.stops[i], this.stops[i + 1], substeps[i]);\n          gradient.splice.apply(gradient, [gradient.length, 0].concat(rgb));\n        }\n\n        gradient.push(this.stops[this.stops.length - 1].color);\n        return gradient;\n      }\n      /**\n       * Generate gradient with HSVa interpolation\n       * @param {number} steps\n       * @param {boolean|String} [mode=false]\n       *    - false to step in clockwise\n       *    - true to step in trigonometric order\n       *    - 'short' to use the shortest way\n       *    - 'long' to use the longest way\n       * @return {tinycolor[]}\n       */\n      ;\n\n      _proto.hsv = function hsv(steps, mode) {\n        var substeps = computeSubsteps(this.stops, steps);\n        var gradient = [];\n\n        for (var i = 0, l = this.stops.length; i < l - 1; i++) {\n          var start = this.stops[i].color.toHsv();\n          var end = this.stops[i + 1].color.toHsv(); // rgb interpolation if one of the steps in grayscale\n\n          var hsv = void 0;\n\n          if (start.s === 0 || end.s === 0) {\n            hsv = interpolateRgb(this.stops[i], this.stops[i + 1], substeps[i]);\n          } else {\n            var trigonometricStep = void 0;\n\n            if (typeof mode === 'boolean') {\n              trigonometricStep = mode;\n            } else {\n              var trigShortest = start.h < end.h && end.h - start.h < 180 || start.h > end.h && start.h - end.h > 180;\n              trigonometricStep = mode === 'long' && trigShortest || mode === 'short' && !trigShortest;\n            }\n\n            hsv = interpolateHsv(this.stops[i], this.stops[i + 1], substeps[i], trigonometricStep);\n          }\n\n          gradient.splice.apply(gradient, [gradient.length, 0].concat(hsv));\n        }\n\n        gradient.push(this.stops[this.stops.length - 1].color);\n        return gradient;\n      }\n      /**\n       * Generate CSS3 command (no prefix) for this gradient\n       * @param {String} [mode=linear] - 'linear' or 'radial'\n       * @param {String} [direction] - default is 'to right' or 'ellipse at center'\n       * @return {String}\n       */\n      ;\n\n      _proto.css = function css(mode, direction) {\n        mode = mode || 'linear';\n        direction = direction || (mode === 'linear' ? 'to right' : 'ellipse at center');\n        var css = mode + '-gradient(' + direction;\n        this.stops.forEach(function (stop) {\n          css += ', ' + stop.color.toRgbString() + ' ' + stop.pos * 100 + '%';\n        });\n        css += ')';\n        return css;\n      }\n      /**\n       * Returns the color at specific position with RGBa interpolation\n       * @param {number} pos, between 0 and 1\n       * @return {tinycolor}\n       */\n      ;\n\n      _proto.rgbAt = function rgbAt(pos) {\n        return computeAt(this.stops, pos, 'toRgb', RGBA_MAX);\n      }\n      /**\n       * Returns the color at specific position with HSVa interpolation\n       * @param {number} pos, between 0 and 1\n       * @return {tinycolor}\n       */\n      ;\n\n      _proto.hsvAt = function hsvAt(pos) {\n        return computeAt(this.stops, pos, 'toHsv', HSVA_MAX);\n      };\n\n      return TinyGradient;\n    }();\n    /**\n     * @param {StopInput[]|ColorInput[]|StopInput...|ColorInput...} stops\n     * @returns {TinyGradient}\n     */\n\n\n    var tinygradient = function tinygradient(stops) {\n      // varargs\n      if (arguments.length === 1) {\n        if (!(arguments[0] instanceof Array)) {\n          throw new Error('\"stops\" is not an array');\n        }\n\n        stops = arguments[0];\n      } else {\n        stops = Array.prototype.slice.call(arguments);\n      }\n\n      return new TinyGradient(stops);\n    };\n\n    return tinygradient;\n\n}));\n//# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueWdyYWRpZW50L2Jyb3dzZXIuanM/OWQwMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLEtBQTRELDRCQUE0QixtQkFBTyxDQUFDLDBEQUFZO0FBQ2hILElBQUksU0FDMEU7QUFDOUUsQ0FBQyw4QkFBOEI7O0FBRS9COztBQUVBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEIsa0JBQWtCLFdBQVc7QUFDN0Isa0JBQWtCLE9BQU87QUFDekI7O0FBRUE7QUFDQSxpQkFBaUIsT0FBTztBQUN4QixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckI7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFVBQVU7QUFDekIsZUFBZSxPQUFPO0FBQ3RCLGdCQUFnQjtBQUNoQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFVBQVU7QUFDekIsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsT0FBTztBQUN0QixlQUFlLFVBQVU7QUFDekIsZ0JBQWdCO0FBQ2hCOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFVBQVU7QUFDekIsZUFBZSxPQUFPO0FBQ3RCLGdCQUFnQixZQUFZO0FBQzVCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixXQUFXO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLFVBQVU7QUFDekIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsUUFBUTtBQUN2QixnQkFBZ0IsWUFBWTtBQUM1Qjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTs7QUFFQSxxQkFBcUIsV0FBVztBQUNoQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsZUFBZSxPQUFPO0FBQ3RCLGdCQUFnQjtBQUNoQjs7O0FBR0E7QUFDQSwyQkFBMkI7O0FBRTNCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7O0FBR1A7O0FBRUEscUJBQXFCLE9BQU87QUFDNUI7QUFDQTtBQUNBLE9BQU87OztBQUdQOztBQUVBLHlCQUF5QixLQUFLO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxZQUFZO0FBQzNCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxVQUFVO0FBQ3pCLGlCQUFpQjtBQUNqQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsdUNBQXVDLFdBQVc7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix5QkFBeUI7QUFDMUMsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1COztBQUVuQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCLGtCQUFrQjtBQUNsQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEMsV0FBVztBQUN6RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixPQUFPO0FBQ3hCLGlCQUFpQixlQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDhDQUE4QyxXQUFXO0FBQ3pEO0FBQ0Esb0RBQW9EOztBQUVwRDs7QUFFQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEIsaUJBQWlCLE9BQU87QUFDeEIsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsT0FBTztBQUN4QixrQkFBa0I7QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE9BQU87QUFDeEIsa0JBQWtCO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZUFBZSxvREFBb0Q7QUFDbkUsaUJBQWlCO0FBQ2pCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLENBQUM7QUFDRCIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90aW55Z3JhZGllbnQvYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogdGlueWdyYWRpZW50ICh2MS4wLjApXG4gKiBAY29weXJpZ2h0IDIwMTQtMjAxOSBEYW1pZW4gXCJNaXN0aWNcIiBTb3JlbCA8Y29udGFjdEBnaXQuc3RyYW5nZXBsYW5ldC5mcj5cbiAqIEBsaWNlbmNlIE1JVFxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCd0aW55Y29sb3IyJykpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWyd0aW55Y29sb3IyJ10sIGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsID0gZ2xvYmFsIHx8IHNlbGYsIGdsb2JhbC50aW55Z3JhZGllbnQgPSBmYWN0b3J5KGdsb2JhbC50aW55Y29sb3IpKTtcbn0odGhpcywgZnVuY3Rpb24gKHRpbnljb2xvcjIpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdGlueWNvbG9yMiA9IHRpbnljb2xvcjIgJiYgdGlueWNvbG9yMi5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gdGlueWNvbG9yMlsnZGVmYXVsdCddIDogdGlueWNvbG9yMjtcblxuICAgIC8qKlxuICAgICAqIEB0eXBlZGVmIHtPYmplY3R9IFRpbnlHcmFkaWVudC5TdG9wSW5wdXRcbiAgICAgKiBAcHJvcGVydHkge0NvbG9ySW5wdXR9IGNvbG9yXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHBvc1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYge09iamVjdH0gVGlueUdyYWRpZW50LlN0ZXBWYWx1ZVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IFtyXVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IFtnXVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IFtiXVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IFtoXVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IFtzXVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IFt2XVxuICAgICAqIEB0eXBlIHtudW1iZXJ9IFthXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQHR5cGUge1N0ZXBWYWx1ZX1cbiAgICAgKi9cblxuICAgIHZhciBSR0JBX01BWCA9IHtcbiAgICAgIHI6IDI1NixcbiAgICAgIGc6IDI1NixcbiAgICAgIGI6IDI1NixcbiAgICAgIGE6IDFcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEB0eXBlIHtTdGVwVmFsdWV9XG4gICAgICovXG5cbiAgICB2YXIgSFNWQV9NQVggPSB7XG4gICAgICBoOiAzNjAsXG4gICAgICBzOiAxLFxuICAgICAgdjogMSxcbiAgICAgIGE6IDFcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExpbmVhcmx5IGNvbXB1dGUgdGhlIHN0ZXAgc2l6ZSBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmQgKG5vdCBub3JtYWxpemVkKVxuICAgICAqIEBwYXJhbSB7U3RlcFZhbHVlfSBzdGFydFxuICAgICAqIEBwYXJhbSB7U3RlcFZhbHVlfSBlbmRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcHMgLSBudW1iZXIgb2YgZGVzaXJlZCBzdGVwc1xuICAgICAqIEByZXR1cm4ge1N0ZXBWYWx1ZX1cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIHN0ZXBpemUoc3RhcnQsIGVuZCwgc3RlcHMpIHtcbiAgICAgIHZhciBzdGVwID0ge307XG5cbiAgICAgIGZvciAodmFyIGsgaW4gc3RhcnQpIHtcbiAgICAgICAgaWYgKHN0YXJ0Lmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICAgICAgc3RlcFtrXSA9IHN0ZXBzID09PSAwID8gMCA6IChlbmRba10gLSBzdGFydFtrXSkgLyBzdGVwcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RlcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgZmluYWwgc3RlcCBjb2xvclxuICAgICAqIEBwYXJhbSB7U3RlcFZhbHVlfSBzdGVwIC0gZnJvbSBgc3RlcGl6ZWBcbiAgICAgKiBAcGFyYW0ge1N0ZXBWYWx1ZX0gc3RhcnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaSAtIGNvbG9yIGluZGV4XG4gICAgICogQHBhcmFtIHtTdGVwVmFsdWV9IG1heCAtIHJnYmEgb3IgaHN2YSBvZiBtYXhpbXVtIHZhbHVlcyBmb3IgZWFjaCBjaGFubmVsXG4gICAgICogQHJldHVybiB7U3RlcFZhbHVlfVxuICAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShzdGVwLCBzdGFydCwgaSwgbWF4KSB7XG4gICAgICB2YXIgY29sb3IgPSB7fTtcblxuICAgICAgZm9yICh2YXIgayBpbiBzdGFydCkge1xuICAgICAgICBpZiAoc3RhcnQuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICBjb2xvcltrXSA9IHN0ZXBba10gKiBpICsgc3RhcnRba107XG4gICAgICAgICAgY29sb3Jba10gPSBjb2xvcltrXSA8IDAgPyBjb2xvcltrXSArIG1heFtrXSA6IG1heFtrXSAhPT0gMSA/IGNvbG9yW2tdICUgbWF4W2tdIDogY29sb3Jba107XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBncmFkaWVudCB3aXRoIFJHQmEgaW50ZXJwb2xhdGlvblxuICAgICAqIEBwYXJhbSB7U3RvcElucHV0fSBzdG9wMVxuICAgICAqIEBwYXJhbSB7U3RvcElucHV0fSBzdG9wMlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwc1xuICAgICAqIEByZXR1cm4ge3Rpbnljb2xvcltdfSBjb2xvcjEgaW5jbHVkZWQsIGNvbG9yMiBleGNsdWRlZFxuICAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVJnYihzdG9wMSwgc3RvcDIsIHN0ZXBzKSB7XG4gICAgICB2YXIgc3RhcnQgPSBzdG9wMS5jb2xvci50b1JnYigpO1xuICAgICAgdmFyIGVuZCA9IHN0b3AyLmNvbG9yLnRvUmdiKCk7XG4gICAgICB2YXIgc3RlcCA9IHN0ZXBpemUoc3RhcnQsIGVuZCwgc3RlcHMpO1xuICAgICAgdmFyIGdyYWRpZW50ID0gW3N0b3AxLmNvbG9yXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBzdGVwczsgaSsrKSB7XG4gICAgICAgIHZhciBjb2xvciA9IGludGVycG9sYXRlKHN0ZXAsIHN0YXJ0LCBpLCBSR0JBX01BWCk7XG4gICAgICAgIGdyYWRpZW50LnB1c2godGlueWNvbG9yMihjb2xvcikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ3JhZGllbnQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGdyYWRpZW50IHdpdGggSFNWYSBpbnRlcnBvbGF0aW9uXG4gICAgICogQHBhcmFtIHtTdG9wSW5wdXR9IHN0b3AxXG4gICAgICogQHBhcmFtIHtTdG9wSW5wdXR9IHN0b3AyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXBzXG4gICAgICogQHBhcmFtIHtib29sZWFufSB0cmlnb25vbWV0cmljIC0gdHJ1ZSB0byBzdGVwIGluIHRyaWdvbm9tZXRyaWMgb3JkZXJcbiAgICAgKiBAcmV0dXJuIHt0aW55Y29sb3JbXX0gY29sb3IxIGluY2x1ZGVkLCBjb2xvcjIgZXhjbHVkZWRcbiAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGVIc3Yoc3RvcDEsIHN0b3AyLCBzdGVwcywgdHJpZ29ub21ldHJpYykge1xuICAgICAgdmFyIHN0YXJ0ID0gc3RvcDEuY29sb3IudG9Ic3YoKTtcbiAgICAgIHZhciBlbmQgPSBzdG9wMi5jb2xvci50b0hzdigpO1xuICAgICAgdmFyIHN0ZXAgPSBzdGVwaXplKHN0YXJ0LCBlbmQsIHN0ZXBzKTtcbiAgICAgIHZhciBncmFkaWVudCA9IFtzdG9wMS5jb2xvcl07IC8vIHJlY29tcHV0ZSBodWVcblxuICAgICAgdmFyIGRpZmY7XG5cbiAgICAgIGlmIChzdGFydC5oIDw9IGVuZC5oICYmICF0cmlnb25vbWV0cmljIHx8IHN0YXJ0LmggPj0gZW5kLmggJiYgdHJpZ29ub21ldHJpYykge1xuICAgICAgICBkaWZmID0gZW5kLmggLSBzdGFydC5oO1xuICAgICAgfSBlbHNlIGlmICh0cmlnb25vbWV0cmljKSB7XG4gICAgICAgIGRpZmYgPSAzNjAgLSBlbmQuaCArIHN0YXJ0Lmg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaWZmID0gMzYwIC0gc3RhcnQuaCArIGVuZC5oO1xuICAgICAgfVxuXG4gICAgICBzdGVwLmggPSBNYXRoLnBvdygtMSwgdHJpZ29ub21ldHJpYyA/IDEgOiAwKSAqIE1hdGguYWJzKGRpZmYpIC8gc3RlcHM7XG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc3RlcHM7IGkrKykge1xuICAgICAgICB2YXIgY29sb3IgPSBpbnRlcnBvbGF0ZShzdGVwLCBzdGFydCwgaSwgSFNWQV9NQVgpO1xuICAgICAgICBncmFkaWVudC5wdXNoKHRpbnljb2xvcjIoY29sb3IpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdyYWRpZW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlIHN1YnN0ZXBzIGJldHdlZW4gZWFjaCBzdG9wc1xuICAgICAqIEBwYXJhbSB7U3RvcElucHV0W119IHN0b3BzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXBzXG4gICAgICogQHJldHVybiB7bnVtYmVyW119XG4gICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGNvbXB1dGVTdWJzdGVwcyhzdG9wcywgc3RlcHMpIHtcbiAgICAgIHZhciBsID0gc3RvcHMubGVuZ3RoOyAvLyB2YWxpZGF0aW9uXG5cbiAgICAgIHN0ZXBzID0gcGFyc2VJbnQoc3RlcHMsIDEwKTtcblxuICAgICAgaWYgKGlzTmFOKHN0ZXBzKSB8fCBzdGVwcyA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG51bWJlciBvZiBzdGVwcyAoPCAyKScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RlcHMgPCBsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTnVtYmVyIG9mIHN0ZXBzIGNhbm5vdCBiZSBpbmZlcmlvciB0byBudW1iZXIgb2Ygc3RvcHMnKTtcbiAgICAgIH0gLy8gY29tcHV0ZSBzdWJzdGVwcyBmcm9tIHN0b3AgcG9zaXRpb25zXG5cblxuICAgICAgdmFyIHN1YnN0ZXBzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBzdGVwID0gKHN0ZXBzIC0gMSkgKiAoc3RvcHNbaV0ucG9zIC0gc3RvcHNbaSAtIDFdLnBvcyk7XG4gICAgICAgIHN1YnN0ZXBzLnB1c2goTWF0aC5tYXgoMSwgTWF0aC5yb3VuZChzdGVwKSkpO1xuICAgICAgfSAvLyBhZGp1c3QgbnVtYmVyIG9mIHN0ZXBzXG5cblxuICAgICAgdmFyIHRvdGFsU3Vic3RlcHMgPSAxO1xuXG4gICAgICBmb3IgKHZhciBuID0gbCAtIDE7IG4tLTspIHtcbiAgICAgICAgdG90YWxTdWJzdGVwcyArPSBzdWJzdGVwc1tuXTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHRvdGFsU3Vic3RlcHMgIT09IHN0ZXBzKSB7XG4gICAgICAgIGlmICh0b3RhbFN1YnN0ZXBzIDwgc3RlcHMpIHtcbiAgICAgICAgICB2YXIgbWluID0gTWF0aC5taW4uYXBwbHkobnVsbCwgc3Vic3RlcHMpO1xuICAgICAgICAgIHN1YnN0ZXBzW3N1YnN0ZXBzLmluZGV4T2YobWluKV0rKztcbiAgICAgICAgICB0b3RhbFN1YnN0ZXBzKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1heCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIHN1YnN0ZXBzKTtcbiAgICAgICAgICBzdWJzdGVwc1tzdWJzdGVwcy5pbmRleE9mKG1heCldLS07XG4gICAgICAgICAgdG90YWxTdWJzdGVwcy0tO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdWJzdGVwcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcHV0ZSB0aGUgY29sb3IgYXQgYSBzcGVjaWZpYyBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7U3RvcElucHV0W119IHN0b3BzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgKiBAcGFyYW0ge1N0ZXBWYWx1ZX0gbWF4XG4gICAgICogQHJldHVybnMge3Rpbnljb2xvcn1cbiAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZUF0KHN0b3BzLCBwb3MsIG1ldGhvZCwgbWF4KSB7XG4gICAgICBpZiAocG9zIDwgMCB8fCBwb3MgPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUG9zaXRpb24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0YXJ0LCBlbmQ7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gc3RvcHMubGVuZ3RoOyBpIDwgbCAtIDE7IGkrKykge1xuICAgICAgICBpZiAocG9zID49IHN0b3BzW2ldLnBvcyAmJiBwb3MgPCBzdG9wc1tpICsgMV0ucG9zKSB7XG4gICAgICAgICAgc3RhcnQgPSBzdG9wc1tpXTtcbiAgICAgICAgICBlbmQgPSBzdG9wc1tpICsgMV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFzdGFydCkge1xuICAgICAgICBzdGFydCA9IGVuZCA9IHN0b3BzW3N0b3BzLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RlcCA9IHN0ZXBpemUoc3RhcnQuY29sb3JbbWV0aG9kXSgpLCBlbmQuY29sb3JbbWV0aG9kXSgpLCAoZW5kLnBvcyAtIHN0YXJ0LnBvcykgKiAxMDApO1xuICAgICAgdmFyIGNvbG9yID0gaW50ZXJwb2xhdGUoc3RlcCwgc3RhcnQuY29sb3JbbWV0aG9kXSgpLCBNYXRoLnJvdW5kKChwb3MgLSBzdGFydC5wb3MpICogMTAwKSwgbWF4KTtcbiAgICAgIHJldHVybiB0aW55Y29sb3IyKGNvbG9yKTtcbiAgICB9XG5cbiAgICB2YXIgVGlueUdyYWRpZW50ID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgLyoqXG4gICAgICAgKiBAcGFyYW0ge1N0b3BJbnB1dFtdfENvbG9ySW5wdXRbXX0gc3RvcHNcbiAgICAgICAqIEByZXR1cm5zIHtUaW55R3JhZGllbnR9XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIFRpbnlHcmFkaWVudChzdG9wcykge1xuICAgICAgICAvLyB2YWxpZGF0aW9uXG4gICAgICAgIGlmIChzdG9wcy5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG51bWJlciBvZiBzdG9wcyAoPCAyKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhdmluZ1Bvc2l0aW9ucyA9IHN0b3BzWzBdLnBvcyAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbCA9IHN0b3BzLmxlbmd0aDtcbiAgICAgICAgdmFyIHAgPSAtMTsgLy8gY3JlYXRlIHRpbnljb2xvciBvYmplY3RzIGFuZCBjbGVhbiBwb3NpdGlvbnNcblxuICAgICAgICB0aGlzLnN0b3BzID0gc3RvcHMubWFwKGZ1bmN0aW9uIChzdG9wLCBpKSB7XG4gICAgICAgICAgdmFyIGhhc1Bvc2l0aW9uID0gc3RvcC5wb3MgIT09IHVuZGVmaW5lZDtcblxuICAgICAgICAgIGlmIChoYXZpbmdQb3NpdGlvbnMgXiBoYXNQb3NpdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbWl4IHBvc2l0aW9ubmVkIGFuZCBub3QgcG9zaW9ubmVkIGNvbG9yIHN0b3BzJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICBzdG9wID0ge1xuICAgICAgICAgICAgICBjb2xvcjogdGlueWNvbG9yMihzdG9wLmNvbG9yKSxcbiAgICAgICAgICAgICAgcG9zOiBzdG9wLnBvc1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKHN0b3AucG9zIDwgMCB8fCBzdG9wLnBvcyA+IDEpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb2xvciBzdG9wcyBwb3NpdGlvbnMgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDEnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RvcC5wb3MgPD0gcCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbG9yIHN0b3BzIHBvc2l0aW9ucyBhcmUgbm90IG9yZGVyZWQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcCA9IHN0b3AucG9zO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdG9wID0ge1xuICAgICAgICAgICAgICBjb2xvcjogdGlueWNvbG9yMihzdG9wKSxcbiAgICAgICAgICAgICAgcG9zOiBpIC8gKGwgLSAxKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3RvcDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RvcHNbMF0ucG9zICE9PSAwKSB7XG4gICAgICAgICAgdGhpcy5zdG9wcy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGNvbG9yOiB0aGlzLnN0b3BzWzBdLmNvbG9yLFxuICAgICAgICAgICAgcG9zOiAwXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdG9wc1t0aGlzLnN0b3BzLmxlbmd0aCAtIDFdLnBvcyAhPT0gMSkge1xuICAgICAgICAgIHRoaXMuc3RvcHMucHVzaCh7XG4gICAgICAgICAgICBjb2xvcjogdGhpcy5zdG9wc1t0aGlzLnN0b3BzLmxlbmd0aCAtIDFdLmNvbG9yLFxuICAgICAgICAgICAgcG9zOiAxXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJuIG5ldyBpbnN0YW5jZSB3aXRoIHJldmVyc2VkIHN0b3BzXG4gICAgICAgKiBAcmV0dXJuIHtUaW55R3JhZGllbnR9XG4gICAgICAgKi9cblxuXG4gICAgICB2YXIgX3Byb3RvID0gVGlueUdyYWRpZW50LnByb3RvdHlwZTtcblxuICAgICAgX3Byb3RvLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICB2YXIgc3RvcHMgPSBbXTtcbiAgICAgICAgdGhpcy5zdG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9wKSB7XG4gICAgICAgICAgc3RvcHMucHVzaCh7XG4gICAgICAgICAgICBjb2xvcjogc3RvcC5jb2xvcixcbiAgICAgICAgICAgIHBvczogMSAtIHN0b3AucG9zXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3IFRpbnlHcmFkaWVudChzdG9wcy5yZXZlcnNlKCkpO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBHZW5lcmF0ZSBncmFkaWVudCB3aXRoIFJHQmEgaW50ZXJwb2xhdGlvblxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHN0ZXBzXG4gICAgICAgKiBAcmV0dXJuIHt0aW55Y29sb3JbXX1cbiAgICAgICAqL1xuICAgICAgO1xuXG4gICAgICBfcHJvdG8ucmdiID0gZnVuY3Rpb24gcmdiKHN0ZXBzKSB7XG4gICAgICAgIHZhciBzdWJzdGVwcyA9IGNvbXB1dGVTdWJzdGVwcyh0aGlzLnN0b3BzLCBzdGVwcyk7XG4gICAgICAgIHZhciBncmFkaWVudCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy5zdG9wcy5sZW5ndGg7IGkgPCBsIC0gMTsgaSsrKSB7XG4gICAgICAgICAgdmFyIHJnYiA9IGludGVycG9sYXRlUmdiKHRoaXMuc3RvcHNbaV0sIHRoaXMuc3RvcHNbaSArIDFdLCBzdWJzdGVwc1tpXSk7XG4gICAgICAgICAgZ3JhZGllbnQuc3BsaWNlLmFwcGx5KGdyYWRpZW50LCBbZ3JhZGllbnQubGVuZ3RoLCAwXS5jb25jYXQocmdiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBncmFkaWVudC5wdXNoKHRoaXMuc3RvcHNbdGhpcy5zdG9wcy5sZW5ndGggLSAxXS5jb2xvcik7XG4gICAgICAgIHJldHVybiBncmFkaWVudDtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogR2VuZXJhdGUgZ3JhZGllbnQgd2l0aCBIU1ZhIGludGVycG9sYXRpb25cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzdGVwc1xuICAgICAgICogQHBhcmFtIHtib29sZWFufFN0cmluZ30gW21vZGU9ZmFsc2VdXG4gICAgICAgKiAgICAtIGZhbHNlIHRvIHN0ZXAgaW4gY2xvY2t3aXNlXG4gICAgICAgKiAgICAtIHRydWUgdG8gc3RlcCBpbiB0cmlnb25vbWV0cmljIG9yZGVyXG4gICAgICAgKiAgICAtICdzaG9ydCcgdG8gdXNlIHRoZSBzaG9ydGVzdCB3YXlcbiAgICAgICAqICAgIC0gJ2xvbmcnIHRvIHVzZSB0aGUgbG9uZ2VzdCB3YXlcbiAgICAgICAqIEByZXR1cm4ge3Rpbnljb2xvcltdfVxuICAgICAgICovXG4gICAgICA7XG5cbiAgICAgIF9wcm90by5oc3YgPSBmdW5jdGlvbiBoc3Yoc3RlcHMsIG1vZGUpIHtcbiAgICAgICAgdmFyIHN1YnN0ZXBzID0gY29tcHV0ZVN1YnN0ZXBzKHRoaXMuc3RvcHMsIHN0ZXBzKTtcbiAgICAgICAgdmFyIGdyYWRpZW50ID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnN0b3BzLmxlbmd0aDsgaSA8IGwgLSAxOyBpKyspIHtcbiAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnN0b3BzW2ldLmNvbG9yLnRvSHN2KCk7XG4gICAgICAgICAgdmFyIGVuZCA9IHRoaXMuc3RvcHNbaSArIDFdLmNvbG9yLnRvSHN2KCk7IC8vIHJnYiBpbnRlcnBvbGF0aW9uIGlmIG9uZSBvZiB0aGUgc3RlcHMgaW4gZ3JheXNjYWxlXG5cbiAgICAgICAgICB2YXIgaHN2ID0gdm9pZCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXJ0LnMgPT09IDAgfHwgZW5kLnMgPT09IDApIHtcbiAgICAgICAgICAgIGhzdiA9IGludGVycG9sYXRlUmdiKHRoaXMuc3RvcHNbaV0sIHRoaXMuc3RvcHNbaSArIDFdLCBzdWJzdGVwc1tpXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0cmlnb25vbWV0cmljU3RlcCA9IHZvaWQgMDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtb2RlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgICAgdHJpZ29ub21ldHJpY1N0ZXAgPSBtb2RlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIHRyaWdTaG9ydGVzdCA9IHN0YXJ0LmggPCBlbmQuaCAmJiBlbmQuaCAtIHN0YXJ0LmggPCAxODAgfHwgc3RhcnQuaCA+IGVuZC5oICYmIHN0YXJ0LmggLSBlbmQuaCA+IDE4MDtcbiAgICAgICAgICAgICAgdHJpZ29ub21ldHJpY1N0ZXAgPSBtb2RlID09PSAnbG9uZycgJiYgdHJpZ1Nob3J0ZXN0IHx8IG1vZGUgPT09ICdzaG9ydCcgJiYgIXRyaWdTaG9ydGVzdDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaHN2ID0gaW50ZXJwb2xhdGVIc3YodGhpcy5zdG9wc1tpXSwgdGhpcy5zdG9wc1tpICsgMV0sIHN1YnN0ZXBzW2ldLCB0cmlnb25vbWV0cmljU3RlcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZ3JhZGllbnQuc3BsaWNlLmFwcGx5KGdyYWRpZW50LCBbZ3JhZGllbnQubGVuZ3RoLCAwXS5jb25jYXQoaHN2KSk7XG4gICAgICAgIH1cblxuICAgICAgICBncmFkaWVudC5wdXNoKHRoaXMuc3RvcHNbdGhpcy5zdG9wcy5sZW5ndGggLSAxXS5jb2xvcik7XG4gICAgICAgIHJldHVybiBncmFkaWVudDtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogR2VuZXJhdGUgQ1NTMyBjb21tYW5kIChubyBwcmVmaXgpIGZvciB0aGlzIGdyYWRpZW50XG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW21vZGU9bGluZWFyXSAtICdsaW5lYXInIG9yICdyYWRpYWwnXG4gICAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2RpcmVjdGlvbl0gLSBkZWZhdWx0IGlzICd0byByaWdodCcgb3IgJ2VsbGlwc2UgYXQgY2VudGVyJ1xuICAgICAgICogQHJldHVybiB7U3RyaW5nfVxuICAgICAgICovXG4gICAgICA7XG5cbiAgICAgIF9wcm90by5jc3MgPSBmdW5jdGlvbiBjc3MobW9kZSwgZGlyZWN0aW9uKSB7XG4gICAgICAgIG1vZGUgPSBtb2RlIHx8ICdsaW5lYXInO1xuICAgICAgICBkaXJlY3Rpb24gPSBkaXJlY3Rpb24gfHwgKG1vZGUgPT09ICdsaW5lYXInID8gJ3RvIHJpZ2h0JyA6ICdlbGxpcHNlIGF0IGNlbnRlcicpO1xuICAgICAgICB2YXIgY3NzID0gbW9kZSArICctZ3JhZGllbnQoJyArIGRpcmVjdGlvbjtcbiAgICAgICAgdGhpcy5zdG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9wKSB7XG4gICAgICAgICAgY3NzICs9ICcsICcgKyBzdG9wLmNvbG9yLnRvUmdiU3RyaW5nKCkgKyAnICcgKyBzdG9wLnBvcyAqIDEwMCArICclJztcbiAgICAgICAgfSk7XG4gICAgICAgIGNzcyArPSAnKSc7XG4gICAgICAgIHJldHVybiBjc3M7XG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIFJldHVybnMgdGhlIGNvbG9yIGF0IHNwZWNpZmljIHBvc2l0aW9uIHdpdGggUkdCYSBpbnRlcnBvbGF0aW9uXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zLCBiZXR3ZWVuIDAgYW5kIDFcbiAgICAgICAqIEByZXR1cm4ge3Rpbnljb2xvcn1cbiAgICAgICAqL1xuICAgICAgO1xuXG4gICAgICBfcHJvdG8ucmdiQXQgPSBmdW5jdGlvbiByZ2JBdChwb3MpIHtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVBdCh0aGlzLnN0b3BzLCBwb3MsICd0b1JnYicsIFJHQkFfTUFYKTtcbiAgICAgIH1cbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyB0aGUgY29sb3IgYXQgc3BlY2lmaWMgcG9zaXRpb24gd2l0aCBIU1ZhIGludGVycG9sYXRpb25cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwb3MsIGJldHdlZW4gMCBhbmQgMVxuICAgICAgICogQHJldHVybiB7dGlueWNvbG9yfVxuICAgICAgICovXG4gICAgICA7XG5cbiAgICAgIF9wcm90by5oc3ZBdCA9IGZ1bmN0aW9uIGhzdkF0KHBvcykge1xuICAgICAgICByZXR1cm4gY29tcHV0ZUF0KHRoaXMuc3RvcHMsIHBvcywgJ3RvSHN2JywgSFNWQV9NQVgpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFRpbnlHcmFkaWVudDtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtTdG9wSW5wdXRbXXxDb2xvcklucHV0W118U3RvcElucHV0Li4ufENvbG9ySW5wdXQuLi59IHN0b3BzXG4gICAgICogQHJldHVybnMge1RpbnlHcmFkaWVudH1cbiAgICAgKi9cblxuXG4gICAgdmFyIHRpbnlncmFkaWVudCA9IGZ1bmN0aW9uIHRpbnlncmFkaWVudChzdG9wcykge1xuICAgICAgLy8gdmFyYXJnc1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgaWYgKCEoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInN0b3BzXCIgaXMgbm90IGFuIGFycmF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdG9wcyA9IGFyZ3VtZW50c1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0b3BzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBUaW55R3JhZGllbnQoc3RvcHMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGlueWdyYWRpZW50O1xuXG59KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcFxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/tinygradient/browser.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _spacefillingcurve__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./spacefillingcurve */ \"./src/spacefillingcurve.js\");\n/* harmony import */ var _renderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./renderer */ \"./src/renderer.js\");\n\n\nvar gradients = {\n  fivenbow: [{\n    color: \"#C6FFDD\",\n    pos: 0\n  }, {\n    color: \"#FBD786\",\n    pos: 0.25\n  }, {\n    color: \"#F7797D\",\n    pos: 0.5\n  }, {\n    color: \"#6DD5ED\",\n    pos: 0.75\n  }, {\n    color: \"#C6FFDD\",\n    pos: 1\n  }],\n  bisexual: [{\n    color: \"#D60270\",\n    pos: 0\n  }, {\n    color: \"#9B4F96\",\n    pos: 0.25\n  }, {\n    color: \"#0038A8\",\n    pos: 0.75\n  }, {\n    color: \"#D60270\",\n    pos: 1\n  }],\n  oj2p: [{\n    color: \"#ffffff\",\n    pos: 0\n  }, {\n    color: \"#8d83b7\",\n    pos: 0.2\n  }, {\n    color: \"#2d004b\",\n    pos: 0.4\n  }, {\n    color: \"#823c07\",\n    pos: 0.6\n  }, {\n    color: \"#eb9834\",\n    pos: 0.8\n  }, {\n    color: \"#ffffff\",\n    pos: 1\n  }],\n  nostalgia: [{\n    color: \"#ffd9cc\",\n    pos: 0\n  }, {\n    color: \"#8cffa6\",\n    pos: 0.25\n  }, {\n    color: \"#bfb3ff\",\n    pos: 0.75\n  }, {\n    color: \"#ffd9cc\",\n    pos: 1\n  }],\n  spain: [{\n    color: \"#AD1519\",\n    pos: 0\n  }, {\n    color: \"#FABD00\",\n    pos: 0.25\n  }, {\n    color: \"#FABD00\",\n    pos: 0.75\n  }, {\n    color: \"#AD1519\",\n    pos: 1\n  }],\n  greenghost: [{\n    color: \"#ffffff\",\n    pos: 0\n  }, {\n    color: \"#00bf73\",\n    pos: 0.1\n  }, {\n    color: \"#ffffff\",\n    pos: 0.15\n  }, {\n    color: \"#ffffff\",\n    pos: 1\n  }]\n};\nvar MADOX = \"#FF197F\";\nvar params = new URLSearchParams(new URL(window.location).search);\nvar data = {\n  height: parseInt(params.get(\"height\")) || 15,\n  width: parseInt(params.get(\"width\")) || 15,\n  lineWidth: parseInt(params.get(\"lineWidth\")) || 4,\n  step: parseInt(params.get(\"step\")) || 10,\n  resolution: parseInt(params.get(\"resolution\")) || 500,\n  samples: parseInt(params.get(\"samples\")) || 30,\n  colors: gradients[params.get(\"gradient\")] || gradients.nostalgia\n};\nvar CURVE = Object(_spacefillingcurve__WEBPACK_IMPORTED_MODULE_0__[\"generateCurve\"])(data.width, data.height);\n\nwindow.onload = function () {\n  Object(_renderer__WEBPACK_IMPORTED_MODULE_1__[\"draw\"])(CURVE, data);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJncmFkaWVudHMiLCJmaXZlbmJvdyIsImNvbG9yIiwicG9zIiwiYmlzZXh1YWwiLCJvajJwIiwibm9zdGFsZ2lhIiwic3BhaW4iLCJncmVlbmdob3N0IiwiTUFET1giLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJVUkwiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsImRhdGEiLCJoZWlnaHQiLCJwYXJzZUludCIsImdldCIsIndpZHRoIiwibGluZVdpZHRoIiwic3RlcCIsInJlc29sdXRpb24iLCJzYW1wbGVzIiwiY29sb3JzIiwiQ1VSVkUiLCJnZW5lcmF0ZUN1cnZlIiwib25sb2FkIiwiZHJhdyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVBLElBQU1BLFNBQVMsR0FBRztBQUNoQkMsVUFBUSxFQUFFLENBQ1I7QUFBRUMsU0FBSyxFQUFFLFNBQVQ7QUFBb0JDLE9BQUcsRUFBRTtBQUF6QixHQURRLEVBRVI7QUFBRUQsU0FBSyxFQUFFLFNBQVQ7QUFBb0JDLE9BQUcsRUFBRTtBQUF6QixHQUZRLEVBR1I7QUFBRUQsU0FBSyxFQUFFLFNBQVQ7QUFBb0JDLE9BQUcsRUFBRTtBQUF6QixHQUhRLEVBSVI7QUFBRUQsU0FBSyxFQUFFLFNBQVQ7QUFBb0JDLE9BQUcsRUFBRTtBQUF6QixHQUpRLEVBS1I7QUFBRUQsU0FBSyxFQUFFLFNBQVQ7QUFBb0JDLE9BQUcsRUFBRTtBQUF6QixHQUxRLENBRE07QUFRaEJDLFVBQVEsRUFBRSxDQUNSO0FBQUVGLFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FEUSxFQUVSO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FGUSxFQUdSO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FIUSxFQUlSO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FKUSxDQVJNO0FBY2hCRSxNQUFJLEVBQUUsQ0FDSjtBQUFFSCxTQUFLLEVBQUUsU0FBVDtBQUFvQkMsT0FBRyxFQUFFO0FBQXpCLEdBREksRUFFSjtBQUFFRCxTQUFLLEVBQUUsU0FBVDtBQUFvQkMsT0FBRyxFQUFFO0FBQXpCLEdBRkksRUFHSjtBQUFFRCxTQUFLLEVBQUUsU0FBVDtBQUFvQkMsT0FBRyxFQUFFO0FBQXpCLEdBSEksRUFJSjtBQUFFRCxTQUFLLEVBQUUsU0FBVDtBQUFvQkMsT0FBRyxFQUFFO0FBQXpCLEdBSkksRUFLSjtBQUFFRCxTQUFLLEVBQUUsU0FBVDtBQUFvQkMsT0FBRyxFQUFFO0FBQXpCLEdBTEksRUFNSjtBQUFFRCxTQUFLLEVBQUUsU0FBVDtBQUFvQkMsT0FBRyxFQUFFO0FBQXpCLEdBTkksQ0FkVTtBQXNCaEJHLFdBQVMsRUFBRSxDQUNUO0FBQUVKLFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FEUyxFQUVUO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FGUyxFQUdUO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FIUyxFQUlUO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FKUyxDQXRCSztBQTRCaEJJLE9BQUssRUFBRSxDQUNMO0FBQUVMLFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FESyxFQUVMO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FGSyxFQUdMO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FISyxFQUlMO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FKSyxDQTVCUztBQWtDaEJLLFlBQVUsRUFBRSxDQUNWO0FBQUVOLFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FEVSxFQUVWO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FGVSxFQUdWO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FIVSxFQUlWO0FBQUVELFNBQUssRUFBRSxTQUFUO0FBQW9CQyxPQUFHLEVBQUU7QUFBekIsR0FKVTtBQWxDSSxDQUFsQjtBQTBDQSxJQUFNTSxLQUFLLEdBQUcsU0FBZDtBQUNBLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxlQUFKLENBQW9CLElBQUlDLEdBQUosQ0FBUUMsTUFBTSxDQUFDQyxRQUFmLEVBQXlCQyxNQUE3QyxDQUFmO0FBRUEsSUFBTUMsSUFBSSxHQUFHO0FBQ1hDLFFBQU0sRUFBRUMsUUFBUSxDQUFDUixNQUFNLENBQUNTLEdBQVAsQ0FBVyxRQUFYLENBQUQsQ0FBUixJQUFrQyxFQUQvQjtBQUVYQyxPQUFLLEVBQUVGLFFBQVEsQ0FBQ1IsTUFBTSxDQUFDUyxHQUFQLENBQVcsT0FBWCxDQUFELENBQVIsSUFBaUMsRUFGN0I7QUFHWEUsV0FBUyxFQUFFSCxRQUFRLENBQUNSLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXLFdBQVgsQ0FBRCxDQUFSLElBQXFDLENBSHJDO0FBSVhHLE1BQUksRUFBRUosUUFBUSxDQUFDUixNQUFNLENBQUNTLEdBQVAsQ0FBVyxNQUFYLENBQUQsQ0FBUixJQUFnQyxFQUozQjtBQUtYSSxZQUFVLEVBQUVMLFFBQVEsQ0FBQ1IsTUFBTSxDQUFDUyxHQUFQLENBQVcsWUFBWCxDQUFELENBQVIsSUFBc0MsR0FMdkM7QUFNWEssU0FBTyxFQUFFTixRQUFRLENBQUNSLE1BQU0sQ0FBQ1MsR0FBUCxDQUFXLFNBQVgsQ0FBRCxDQUFSLElBQW1DLEVBTmpDO0FBT1hNLFFBQU0sRUFBRXpCLFNBQVMsQ0FBQ1UsTUFBTSxDQUFDUyxHQUFQLENBQVcsVUFBWCxDQUFELENBQVQsSUFBcUNuQixTQUFTLENBQUNNO0FBUDVDLENBQWI7QUFVQSxJQUFNb0IsS0FBSyxHQUFHQyx3RUFBYSxDQUFDWCxJQUFJLENBQUNJLEtBQU4sRUFBYUosSUFBSSxDQUFDQyxNQUFsQixDQUEzQjs7QUFFQUosTUFBTSxDQUFDZSxNQUFQLEdBQWdCLFlBQVc7QUFDekJDLHdEQUFJLENBQUNILEtBQUQsRUFBUVYsSUFBUixDQUFKO0FBQ0QsQ0FGRCIsImZpbGUiOiIuL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdlbmVyYXRlQ3VydmUgfSBmcm9tIFwiLi9zcGFjZWZpbGxpbmdjdXJ2ZVwiO1xuaW1wb3J0IHsgZHJhdyB9IGZyb20gXCIuL3JlbmRlcmVyXCI7XG5cbmNvbnN0IGdyYWRpZW50cyA9IHtcbiAgZml2ZW5ib3c6IFtcbiAgICB7IGNvbG9yOiBcIiNDNkZGRERcIiwgcG9zOiAwIH0sXG4gICAgeyBjb2xvcjogXCIjRkJENzg2XCIsIHBvczogMC4yNSB9LFxuICAgIHsgY29sb3I6IFwiI0Y3Nzk3RFwiLCBwb3M6IDAuNSB9LFxuICAgIHsgY29sb3I6IFwiIzZERDVFRFwiLCBwb3M6IDAuNzUgfSxcbiAgICB7IGNvbG9yOiBcIiNDNkZGRERcIiwgcG9zOiAxIH1cbiAgXSxcbiAgYmlzZXh1YWw6IFtcbiAgICB7IGNvbG9yOiBcIiNENjAyNzBcIiwgcG9zOiAwIH0sXG4gICAgeyBjb2xvcjogXCIjOUI0Rjk2XCIsIHBvczogMC4yNSB9LFxuICAgIHsgY29sb3I6IFwiIzAwMzhBOFwiLCBwb3M6IDAuNzUgfSxcbiAgICB7IGNvbG9yOiBcIiNENjAyNzBcIiwgcG9zOiAxIH1cbiAgXSxcbiAgb2oycDogW1xuICAgIHsgY29sb3I6IFwiI2ZmZmZmZlwiLCBwb3M6IDAgfSxcbiAgICB7IGNvbG9yOiBcIiM4ZDgzYjdcIiwgcG9zOiAwLjIgfSxcbiAgICB7IGNvbG9yOiBcIiMyZDAwNGJcIiwgcG9zOiAwLjQgfSxcbiAgICB7IGNvbG9yOiBcIiM4MjNjMDdcIiwgcG9zOiAwLjYgfSxcbiAgICB7IGNvbG9yOiBcIiNlYjk4MzRcIiwgcG9zOiAwLjggfSxcbiAgICB7IGNvbG9yOiBcIiNmZmZmZmZcIiwgcG9zOiAxIH1cbiAgXSxcbiAgbm9zdGFsZ2lhOiBbXG4gICAgeyBjb2xvcjogXCIjZmZkOWNjXCIsIHBvczogMCB9LFxuICAgIHsgY29sb3I6IFwiIzhjZmZhNlwiLCBwb3M6IDAuMjUgfSxcbiAgICB7IGNvbG9yOiBcIiNiZmIzZmZcIiwgcG9zOiAwLjc1IH0sXG4gICAgeyBjb2xvcjogXCIjZmZkOWNjXCIsIHBvczogMSB9XG4gIF0sXG4gIHNwYWluOiBbXG4gICAgeyBjb2xvcjogXCIjQUQxNTE5XCIsIHBvczogMCB9LFxuICAgIHsgY29sb3I6IFwiI0ZBQkQwMFwiLCBwb3M6IDAuMjUgfSxcbiAgICB7IGNvbG9yOiBcIiNGQUJEMDBcIiwgcG9zOiAwLjc1IH0sXG4gICAgeyBjb2xvcjogXCIjQUQxNTE5XCIsIHBvczogMSB9XG4gIF0sXG4gIGdyZWVuZ2hvc3Q6IFtcbiAgICB7IGNvbG9yOiBcIiNmZmZmZmZcIiwgcG9zOiAwIH0sXG4gICAgeyBjb2xvcjogXCIjMDBiZjczXCIsIHBvczogMC4xIH0sXG4gICAgeyBjb2xvcjogXCIjZmZmZmZmXCIsIHBvczogMC4xNSB9LFxuICAgIHsgY29sb3I6IFwiI2ZmZmZmZlwiLCBwb3M6IDEgfVxuICBdXG59O1xuXG5jb25zdCBNQURPWCA9IFwiI0ZGMTk3RlwiO1xuY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbikuc2VhcmNoKTtcblxuY29uc3QgZGF0YSA9IHtcbiAgaGVpZ2h0OiBwYXJzZUludChwYXJhbXMuZ2V0KFwiaGVpZ2h0XCIpKSB8fCAxNSxcbiAgd2lkdGg6IHBhcnNlSW50KHBhcmFtcy5nZXQoXCJ3aWR0aFwiKSkgfHwgMTUsXG4gIGxpbmVXaWR0aDogcGFyc2VJbnQocGFyYW1zLmdldChcImxpbmVXaWR0aFwiKSkgfHwgNCxcbiAgc3RlcDogcGFyc2VJbnQocGFyYW1zLmdldChcInN0ZXBcIikpIHx8IDEwLFxuICByZXNvbHV0aW9uOiBwYXJzZUludChwYXJhbXMuZ2V0KFwicmVzb2x1dGlvblwiKSkgfHwgNTAwLFxuICBzYW1wbGVzOiBwYXJzZUludChwYXJhbXMuZ2V0KFwic2FtcGxlc1wiKSkgfHwgMzAsXG4gIGNvbG9yczogZ3JhZGllbnRzW3BhcmFtcy5nZXQoXCJncmFkaWVudFwiKV0gfHwgZ3JhZGllbnRzLm5vc3RhbGdpYVxufTtcblxuY29uc3QgQ1VSVkUgPSBnZW5lcmF0ZUN1cnZlKGRhdGEud2lkdGgsIGRhdGEuaGVpZ2h0KTtcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICBkcmF3KENVUlZFLCBkYXRhKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/renderer.js":
/*!*************************!*\
  !*** ./src/renderer.js ***!
  \*************************/
/*! exports provided: draw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"draw\", function() { return draw; });\n/* harmony import */ var _turtle_svg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./turtle_svg */ \"./src/turtle_svg.js\");\n/* harmony import */ var gradient_path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gradient-path */ \"./node_modules/gradient-path/dist/index.js\");\n/* harmony import */ var gradient_path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(gradient_path__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction opposite(dir) {\n  return dir === \"n\" && \"s\" || dir === \"s\" && \"n\" || dir === \"w\" && \"e\" || dir === \"e\" && \"w\";\n}\n/**\n * This is a big messy function that using mostly\n * convoluted boolean logic determines the outgoing\n * direction for a step in a space filling curve\n * drawing step\n * @param x the x coordinate\n * @param y the y coordinate\n * @param from the inward direction\n * @param is_open_edge object containing edge (n, s, e, w)\n * status (open: true, closed: false) for the supersquare\n */\n\n\nfunction outgoing_direction(x, y, from, is_open_edge) {\n  // determine relative position of subgrid square on grid square\n  var is_top = y % 2 === 0;\n  var is_left = x % 2 === 0; // also express this as cardinals\n\n  var vertical = is_top ? \"n\" : \"s\";\n  var horizontal = is_left ? \"w\" : \"e\"; // determine if it's coming from outside this supersquare\n\n  var is_incoming = is_left && from === \"w\" || is_top && from === \"n\" || !is_left && from === \"e\" || !is_top && from === \"s\"; // determine if its headed outside this supersquare\n  // this gave me a big headache\n\n  var is_outgoing = !!is_open_edge[vertical] && (from === opposite(vertical) || from === horizontal) || !!is_open_edge[horizontal] && (from === opposite(horizontal) || from === vertical);\n\n  if (is_incoming !== is_outgoing) {\n    // it's a straight line\n    return opposite(from);\n  } else {\n    // it's a gay line\n    var direction = [\"n\", \"s\"].includes(from) ? horizontal : vertical;\n    return is_outgoing ? direction : opposite(direction);\n  }\n}\n\nfunction mapDirection(cardinal) {\n  var newdir = 0;\n\n  switch (cardinal) {\n    case \"n\":\n      newdir += 90;\n\n    case \"w\":\n      newdir += 90;\n\n    case \"s\":\n      newdir += 90;\n\n    case \"e\":\n      break;\n\n    default:\n      throw \"Invalid direction value \" + cardinal;\n  } // riding with no breaks\n\n\n  return newdir;\n}\n\nvar scale = 0.25;\n\nfunction renderCurve(mst, data) {\n  var turtle = Object(_turtle_svg__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n  var _ref = [data.width, data.height],\n      startx = _ref[0],\n      starty = _ref[1];\n  var x = startx,\n      y = starty;\n  var edges = mst.getEdgeValues([x, y].map(function (number) {\n    return Math.floor(number / 2);\n  })); // set starting incoming direction to a plausible one\n  // if unable to pick an outer edge, we use an inner one\n\n  var from = edges.n && \"n\" || edges.s && \"s\" || edges.e && \"e\" || edges.w && \"w\" || y % 2 === 0 ? \"s\" : \"n\"; // initialize turtle graphics\n\n  turtle.begin(0, 0);\n  turtle.lookAt(mapDirection(opposite(from))); // draw\n\n  do {\n    var to = outgoing_direction(x, y, from, edges);\n    turtle.lookAt(mapDirection(to));\n    turtle.step(data.step);\n\n    switch (to) {\n      case \"n\":\n        y -= 1;\n        break;\n\n      case \"s\":\n        y += 1;\n        break;\n\n      case \"w\":\n        x -= 1;\n        break;\n\n      case \"e\":\n        x += 1;\n        break;\n\n      default:\n        throw \"Invalid direction value\";\n    }\n\n    from = opposite(to);\n    edges = mst.getEdgeValues([x, y].map(function (number) {\n      return Math.floor(number / 2);\n    }));\n  } while (startx !== x || starty !== y);\n\n  turtle.end();\n  var draw = SVG(\"drawing\").viewbox({\n    x: -document.documentElement.clientWidth / 2,\n    y: -document.documentElement.clientHeight / 2,\n    width: document.documentElement.clientWidth,\n    height: document.documentElement.clientHeight\n  });\n  var path = draw.path(turtle.getPath());\n  var gp = new gradient_path__WEBPACK_IMPORTED_MODULE_1___default.a({\n    path: path[\"native\"](),\n    segments: data.resolution,\n    samples: data.samples\n  });\n  gp.render({\n    type: \"path\",\n    fill: data.colors,\n    width: data.lineWidth,\n    stroke: data.colors,\n    strokeWidth: 1\n  });\n}\n\nfunction draw(curve, params) {\n  renderCurve(curve, params);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyZXIuanM/ODhjMCJdLCJuYW1lcyI6WyJvcHBvc2l0ZSIsImRpciIsIm91dGdvaW5nX2RpcmVjdGlvbiIsIngiLCJ5IiwiZnJvbSIsImlzX29wZW5fZWRnZSIsImlzX3RvcCIsImlzX2xlZnQiLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJpc19pbmNvbWluZyIsImlzX291dGdvaW5nIiwiZGlyZWN0aW9uIiwiaW5jbHVkZXMiLCJtYXBEaXJlY3Rpb24iLCJjYXJkaW5hbCIsIm5ld2RpciIsInNjYWxlIiwicmVuZGVyQ3VydmUiLCJtc3QiLCJkYXRhIiwidHVydGxlIiwiVHVydGxlIiwid2lkdGgiLCJoZWlnaHQiLCJzdGFydHgiLCJzdGFydHkiLCJlZGdlcyIsImdldEVkZ2VWYWx1ZXMiLCJtYXAiLCJudW1iZXIiLCJNYXRoIiwiZmxvb3IiLCJuIiwicyIsImUiLCJ3IiwiYmVnaW4iLCJsb29rQXQiLCJ0byIsInN0ZXAiLCJlbmQiLCJkcmF3IiwiU1ZHIiwidmlld2JveCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJwYXRoIiwiZ2V0UGF0aCIsImdwIiwiR3JhZGllbnRQYXRoIiwic2VnbWVudHMiLCJyZXNvbHV0aW9uIiwic2FtcGxlcyIsInJlbmRlciIsInR5cGUiLCJmaWxsIiwiY29sb3JzIiwibGluZVdpZHRoIiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJjdXJ2ZSIsInBhcmFtcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUEsU0FBU0EsUUFBVCxDQUFrQkMsR0FBbEIsRUFBdUI7QUFDckIsU0FDR0EsR0FBRyxLQUFLLEdBQVIsSUFBZSxHQUFoQixJQUNDQSxHQUFHLEtBQUssR0FBUixJQUFlLEdBRGhCLElBRUNBLEdBQUcsS0FBSyxHQUFSLElBQWUsR0FGaEIsSUFHQ0EsR0FBRyxLQUFLLEdBQVIsSUFBZSxHQUpsQjtBQU1EO0FBRUQ7Ozs7Ozs7Ozs7Ozs7QUFXQSxTQUFTQyxrQkFBVCxDQUE0QkMsQ0FBNUIsRUFBK0JDLENBQS9CLEVBQWtDQyxJQUFsQyxFQUF3Q0MsWUFBeEMsRUFBc0Q7QUFDcEQ7QUFDQSxNQUFNQyxNQUFNLEdBQUdILENBQUMsR0FBRyxDQUFKLEtBQVUsQ0FBekI7QUFDQSxNQUFNSSxPQUFPLEdBQUdMLENBQUMsR0FBRyxDQUFKLEtBQVUsQ0FBMUIsQ0FIb0QsQ0FJcEQ7O0FBQ0EsTUFBTU0sUUFBUSxHQUFHRixNQUFNLEdBQUcsR0FBSCxHQUFTLEdBQWhDO0FBQ0EsTUFBTUcsVUFBVSxHQUFHRixPQUFPLEdBQUcsR0FBSCxHQUFTLEdBQW5DLENBTm9ELENBUXBEOztBQUNBLE1BQU1HLFdBQVcsR0FDZEgsT0FBTyxJQUFJSCxJQUFJLEtBQUssR0FBckIsSUFDQ0UsTUFBTSxJQUFJRixJQUFJLEtBQUssR0FEcEIsSUFFQyxDQUFDRyxPQUFELElBQVlILElBQUksS0FBSyxHQUZ0QixJQUdDLENBQUNFLE1BQUQsSUFBV0YsSUFBSSxLQUFLLEdBSnZCLENBVG9ELENBY3BEO0FBQ0E7O0FBQ0EsTUFBTU8sV0FBVyxHQUNkLENBQUMsQ0FBQ04sWUFBWSxDQUFDRyxRQUFELENBQWQsS0FDRUosSUFBSSxLQUFLTCxRQUFRLENBQUNTLFFBQUQsQ0FBakIsSUFBK0JKLElBQUksS0FBS0ssVUFEMUMsQ0FBRCxJQUVDLENBQUMsQ0FBQ0osWUFBWSxDQUFDSSxVQUFELENBQWQsS0FDRUwsSUFBSSxLQUFLTCxRQUFRLENBQUNVLFVBQUQsQ0FBakIsSUFBaUNMLElBQUksS0FBS0ksUUFENUMsQ0FISDs7QUFNQSxNQUFJRSxXQUFXLEtBQUtDLFdBQXBCLEVBQWlDO0FBQy9CO0FBQ0EsV0FBT1osUUFBUSxDQUFDSyxJQUFELENBQWY7QUFDRCxHQUhELE1BR087QUFDTDtBQUNBLFFBQU1RLFNBQVMsR0FBRyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVdDLFFBQVgsQ0FBb0JULElBQXBCLElBQTRCSyxVQUE1QixHQUF5Q0QsUUFBM0Q7QUFDQSxXQUFPRyxXQUFXLEdBQUdDLFNBQUgsR0FBZWIsUUFBUSxDQUFDYSxTQUFELENBQXpDO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTRSxZQUFULENBQXNCQyxRQUF0QixFQUFnQztBQUM5QixNQUFJQyxNQUFNLEdBQUcsQ0FBYjs7QUFDQSxVQUFRRCxRQUFSO0FBQ0UsU0FBSyxHQUFMO0FBQ0VDLFlBQU0sSUFBSSxFQUFWOztBQUNGLFNBQUssR0FBTDtBQUNFQSxZQUFNLElBQUksRUFBVjs7QUFDRixTQUFLLEdBQUw7QUFDRUEsWUFBTSxJQUFJLEVBQVY7O0FBQ0YsU0FBSyxHQUFMO0FBQ0U7O0FBQ0Y7QUFDRSxZQUFNLDZCQUE2QkQsUUFBbkM7QUFWSixHQUY4QixDQWE1Qjs7O0FBQ0YsU0FBT0MsTUFBUDtBQUNEOztBQUVELElBQUlDLEtBQUssR0FBRyxJQUFaOztBQUVBLFNBQVNDLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCQyxJQUExQixFQUFnQztBQUM5QixNQUFNQyxNQUFNLEdBQUdDLDJEQUFNLEVBQXJCO0FBRDhCLGFBR0wsQ0FBQ0YsSUFBSSxDQUFDRyxLQUFOLEVBQWFILElBQUksQ0FBQ0ksTUFBbEIsQ0FISztBQUFBLE1BR3ZCQyxNQUh1QjtBQUFBLE1BR2ZDLE1BSGU7QUFBQSxNQUl6QnhCLENBSnlCLEdBSWhCdUIsTUFKZ0I7QUFBQSxNQUl0QnRCLENBSnNCLEdBSVJ1QixNQUpRO0FBSzlCLE1BQUlDLEtBQUssR0FBR1IsR0FBRyxDQUFDUyxhQUFKLENBQ1YsQ0FBQzFCLENBQUQsRUFBSUMsQ0FBSixFQUFPMEIsR0FBUCxDQUFXLFVBQVNDLE1BQVQsRUFBaUI7QUFDMUIsV0FBT0MsSUFBSSxDQUFDQyxLQUFMLENBQVdGLE1BQU0sR0FBRyxDQUFwQixDQUFQO0FBQ0QsR0FGRCxDQURVLENBQVosQ0FMOEIsQ0FXOUI7QUFDQTs7QUFDQSxNQUFJMUIsSUFBSSxHQUNMdUIsS0FBSyxDQUFDTSxDQUFOLElBQVcsR0FBWixJQUNDTixLQUFLLENBQUNPLENBQU4sSUFBVyxHQURaLElBRUNQLEtBQUssQ0FBQ1EsQ0FBTixJQUFXLEdBRlosSUFHQ1IsS0FBSyxDQUFDUyxDQUFOLElBQVcsR0FIWixJQUlBakMsQ0FBQyxHQUFHLENBQUosS0FBVSxDQUpWLEdBS0ksR0FMSixHQU1JLEdBUE4sQ0FiOEIsQ0FzQjlCOztBQUNBa0IsUUFBTSxDQUFDZ0IsS0FBUCxDQUFhLENBQWIsRUFBZ0IsQ0FBaEI7QUFDQWhCLFFBQU0sQ0FBQ2lCLE1BQVAsQ0FBY3hCLFlBQVksQ0FBQ2YsUUFBUSxDQUFDSyxJQUFELENBQVQsQ0FBMUIsRUF4QjhCLENBMEI5Qjs7QUFDQSxLQUFHO0FBQ0QsUUFBTW1DLEVBQUUsR0FBR3RDLGtCQUFrQixDQUFDQyxDQUFELEVBQUlDLENBQUosRUFBT0MsSUFBUCxFQUFhdUIsS0FBYixDQUE3QjtBQUNBTixVQUFNLENBQUNpQixNQUFQLENBQWN4QixZQUFZLENBQUN5QixFQUFELENBQTFCO0FBQ0FsQixVQUFNLENBQUNtQixJQUFQLENBQVlwQixJQUFJLENBQUNvQixJQUFqQjs7QUFFQSxZQUFRRCxFQUFSO0FBQ0UsV0FBSyxHQUFMO0FBQ0VwQyxTQUFDLElBQUksQ0FBTDtBQUNBOztBQUNGLFdBQUssR0FBTDtBQUNFQSxTQUFDLElBQUksQ0FBTDtBQUNBOztBQUNGLFdBQUssR0FBTDtBQUNFRCxTQUFDLElBQUksQ0FBTDtBQUNBOztBQUNGLFdBQUssR0FBTDtBQUNFQSxTQUFDLElBQUksQ0FBTDtBQUNBOztBQUNGO0FBQ0UsY0FBTSx5QkFBTjtBQWRKOztBQWlCQUUsUUFBSSxHQUFHTCxRQUFRLENBQUN3QyxFQUFELENBQWY7QUFDQVosU0FBSyxHQUFHUixHQUFHLENBQUNTLGFBQUosQ0FBa0IsQ0FBQzFCLENBQUQsRUFBSUMsQ0FBSixFQUFPMEIsR0FBUCxDQUFXLFVBQUFDLE1BQU07QUFBQSxhQUFJQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0YsTUFBTSxHQUFHLENBQXBCLENBQUo7QUFBQSxLQUFqQixDQUFsQixDQUFSO0FBQ0QsR0F4QkQsUUF3QlNMLE1BQU0sS0FBS3ZCLENBQVgsSUFBZ0J3QixNQUFNLEtBQUt2QixDQXhCcEM7O0FBMEJBa0IsUUFBTSxDQUFDb0IsR0FBUDtBQUVBLE1BQU1DLElBQUksR0FBR0MsR0FBRyxDQUFDLFNBQUQsQ0FBSCxDQUFlQyxPQUFmLENBQXVCO0FBQ2xDMUMsS0FBQyxFQUFFLENBQUMyQyxRQUFRLENBQUNDLGVBQVQsQ0FBeUJDLFdBQTFCLEdBQXdDLENBRFQ7QUFFbEM1QyxLQUFDLEVBQUUsQ0FBQzBDLFFBQVEsQ0FBQ0MsZUFBVCxDQUF5QkUsWUFBMUIsR0FBeUMsQ0FGVjtBQUdsQ3pCLFNBQUssRUFBRXNCLFFBQVEsQ0FBQ0MsZUFBVCxDQUF5QkMsV0FIRTtBQUlsQ3ZCLFVBQU0sRUFBRXFCLFFBQVEsQ0FBQ0MsZUFBVCxDQUF5QkU7QUFKQyxHQUF2QixDQUFiO0FBTUEsTUFBTUMsSUFBSSxHQUFHUCxJQUFJLENBQUNPLElBQUwsQ0FBVTVCLE1BQU0sQ0FBQzZCLE9BQVAsRUFBVixDQUFiO0FBRUEsTUFBTUMsRUFBRSxHQUFHLElBQUlDLG9EQUFKLENBQWlCO0FBQzFCSCxRQUFJLEVBQUVBLElBQUksVUFBSixFQURvQjtBQUUxQkksWUFBUSxFQUFFakMsSUFBSSxDQUFDa0MsVUFGVztBQUcxQkMsV0FBTyxFQUFFbkMsSUFBSSxDQUFDbUM7QUFIWSxHQUFqQixDQUFYO0FBTUFKLElBQUUsQ0FBQ0ssTUFBSCxDQUFVO0FBQ1JDLFFBQUksRUFBRSxNQURFO0FBRVJDLFFBQUksRUFBRXRDLElBQUksQ0FBQ3VDLE1BRkg7QUFHUnBDLFNBQUssRUFBRUgsSUFBSSxDQUFDd0MsU0FISjtBQUlSQyxVQUFNLEVBQUV6QyxJQUFJLENBQUN1QyxNQUpMO0FBS1JHLGVBQVcsRUFBRTtBQUxMLEdBQVY7QUFPRDs7QUFFRCxTQUFTcEIsSUFBVCxDQUFjcUIsS0FBZCxFQUFxQkMsTUFBckIsRUFBNkI7QUFDM0I5QyxhQUFXLENBQUM2QyxLQUFELEVBQVFDLE1BQVIsQ0FBWDtBQUNEIiwiZmlsZSI6Ii4vc3JjL3JlbmRlcmVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFR1cnRsZSBmcm9tIFwiLi90dXJ0bGVfc3ZnXCI7XG5pbXBvcnQgR3JhZGllbnRQYXRoIGZyb20gXCJncmFkaWVudC1wYXRoXCI7XG5cbmZ1bmN0aW9uIG9wcG9zaXRlKGRpcikge1xuICByZXR1cm4gKFxuICAgIChkaXIgPT09IFwiblwiICYmIFwic1wiKSB8fFxuICAgIChkaXIgPT09IFwic1wiICYmIFwiblwiKSB8fFxuICAgIChkaXIgPT09IFwid1wiICYmIFwiZVwiKSB8fFxuICAgIChkaXIgPT09IFwiZVwiICYmIFwid1wiKVxuICApO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgYSBiaWcgbWVzc3kgZnVuY3Rpb24gdGhhdCB1c2luZyBtb3N0bHlcbiAqIGNvbnZvbHV0ZWQgYm9vbGVhbiBsb2dpYyBkZXRlcm1pbmVzIHRoZSBvdXRnb2luZ1xuICogZGlyZWN0aW9uIGZvciBhIHN0ZXAgaW4gYSBzcGFjZSBmaWxsaW5nIGN1cnZlXG4gKiBkcmF3aW5nIHN0ZXBcbiAqIEBwYXJhbSB4IHRoZSB4IGNvb3JkaW5hdGVcbiAqIEBwYXJhbSB5IHRoZSB5IGNvb3JkaW5hdGVcbiAqIEBwYXJhbSBmcm9tIHRoZSBpbndhcmQgZGlyZWN0aW9uXG4gKiBAcGFyYW0gaXNfb3Blbl9lZGdlIG9iamVjdCBjb250YWluaW5nIGVkZ2UgKG4sIHMsIGUsIHcpXG4gKiBzdGF0dXMgKG9wZW46IHRydWUsIGNsb3NlZDogZmFsc2UpIGZvciB0aGUgc3VwZXJzcXVhcmVcbiAqL1xuZnVuY3Rpb24gb3V0Z29pbmdfZGlyZWN0aW9uKHgsIHksIGZyb20sIGlzX29wZW5fZWRnZSkge1xuICAvLyBkZXRlcm1pbmUgcmVsYXRpdmUgcG9zaXRpb24gb2Ygc3ViZ3JpZCBzcXVhcmUgb24gZ3JpZCBzcXVhcmVcbiAgY29uc3QgaXNfdG9wID0geSAlIDIgPT09IDA7XG4gIGNvbnN0IGlzX2xlZnQgPSB4ICUgMiA9PT0gMDtcbiAgLy8gYWxzbyBleHByZXNzIHRoaXMgYXMgY2FyZGluYWxzXG4gIGNvbnN0IHZlcnRpY2FsID0gaXNfdG9wID8gXCJuXCIgOiBcInNcIjtcbiAgY29uc3QgaG9yaXpvbnRhbCA9IGlzX2xlZnQgPyBcIndcIiA6IFwiZVwiO1xuXG4gIC8vIGRldGVybWluZSBpZiBpdCdzIGNvbWluZyBmcm9tIG91dHNpZGUgdGhpcyBzdXBlcnNxdWFyZVxuICBjb25zdCBpc19pbmNvbWluZyA9XG4gICAgKGlzX2xlZnQgJiYgZnJvbSA9PT0gXCJ3XCIpIHx8XG4gICAgKGlzX3RvcCAmJiBmcm9tID09PSBcIm5cIikgfHxcbiAgICAoIWlzX2xlZnQgJiYgZnJvbSA9PT0gXCJlXCIpIHx8XG4gICAgKCFpc190b3AgJiYgZnJvbSA9PT0gXCJzXCIpO1xuICAvLyBkZXRlcm1pbmUgaWYgaXRzIGhlYWRlZCBvdXRzaWRlIHRoaXMgc3VwZXJzcXVhcmVcbiAgLy8gdGhpcyBnYXZlIG1lIGEgYmlnIGhlYWRhY2hlXG4gIGNvbnN0IGlzX291dGdvaW5nID1cbiAgICAoISFpc19vcGVuX2VkZ2VbdmVydGljYWxdICYmXG4gICAgICAoZnJvbSA9PT0gb3Bwb3NpdGUodmVydGljYWwpIHx8IGZyb20gPT09IGhvcml6b250YWwpKSB8fFxuICAgICghIWlzX29wZW5fZWRnZVtob3Jpem9udGFsXSAmJlxuICAgICAgKGZyb20gPT09IG9wcG9zaXRlKGhvcml6b250YWwpIHx8IGZyb20gPT09IHZlcnRpY2FsKSk7XG5cbiAgaWYgKGlzX2luY29taW5nICE9PSBpc19vdXRnb2luZykge1xuICAgIC8vIGl0J3MgYSBzdHJhaWdodCBsaW5lXG4gICAgcmV0dXJuIG9wcG9zaXRlKGZyb20pO1xuICB9IGVsc2Uge1xuICAgIC8vIGl0J3MgYSBnYXkgbGluZVxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IFtcIm5cIiwgXCJzXCJdLmluY2x1ZGVzKGZyb20pID8gaG9yaXpvbnRhbCA6IHZlcnRpY2FsO1xuICAgIHJldHVybiBpc19vdXRnb2luZyA/IGRpcmVjdGlvbiA6IG9wcG9zaXRlKGRpcmVjdGlvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFwRGlyZWN0aW9uKGNhcmRpbmFsKSB7XG4gIGxldCBuZXdkaXIgPSAwO1xuICBzd2l0Y2ggKGNhcmRpbmFsKSB7XG4gICAgY2FzZSBcIm5cIjpcbiAgICAgIG5ld2RpciArPSA5MDtcbiAgICBjYXNlIFwid1wiOlxuICAgICAgbmV3ZGlyICs9IDkwO1xuICAgIGNhc2UgXCJzXCI6XG4gICAgICBuZXdkaXIgKz0gOTA7XG4gICAgY2FzZSBcImVcIjpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBcIkludmFsaWQgZGlyZWN0aW9uIHZhbHVlIFwiICsgY2FyZGluYWw7XG4gIH0gLy8gcmlkaW5nIHdpdGggbm8gYnJlYWtzXG4gIHJldHVybiBuZXdkaXI7XG59XG5cbmxldCBzY2FsZSA9IDAuMjU7XG5cbmZ1bmN0aW9uIHJlbmRlckN1cnZlKG1zdCwgZGF0YSkge1xuICBjb25zdCB0dXJ0bGUgPSBUdXJ0bGUoKTtcblxuICBjb25zdCBbc3RhcnR4LCBzdGFydHldID0gW2RhdGEud2lkdGgsIGRhdGEuaGVpZ2h0XTtcbiAgbGV0IFt4LCB5XSA9IFtzdGFydHgsIHN0YXJ0eV07XG4gIGxldCBlZGdlcyA9IG1zdC5nZXRFZGdlVmFsdWVzKFxuICAgIFt4LCB5XS5tYXAoZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIgLyAyKTtcbiAgICB9KVxuICApO1xuXG4gIC8vIHNldCBzdGFydGluZyBpbmNvbWluZyBkaXJlY3Rpb24gdG8gYSBwbGF1c2libGUgb25lXG4gIC8vIGlmIHVuYWJsZSB0byBwaWNrIGFuIG91dGVyIGVkZ2UsIHdlIHVzZSBhbiBpbm5lciBvbmVcbiAgbGV0IGZyb20gPVxuICAgIChlZGdlcy5uICYmIFwiblwiKSB8fFxuICAgIChlZGdlcy5zICYmIFwic1wiKSB8fFxuICAgIChlZGdlcy5lICYmIFwiZVwiKSB8fFxuICAgIChlZGdlcy53ICYmIFwid1wiKSB8fFxuICAgIHkgJSAyID09PSAwXG4gICAgICA/IFwic1wiXG4gICAgICA6IFwiblwiO1xuXG4gIC8vIGluaXRpYWxpemUgdHVydGxlIGdyYXBoaWNzXG4gIHR1cnRsZS5iZWdpbigwLCAwKTtcbiAgdHVydGxlLmxvb2tBdChtYXBEaXJlY3Rpb24ob3Bwb3NpdGUoZnJvbSkpKTtcblxuICAvLyBkcmF3XG4gIGRvIHtcbiAgICBjb25zdCB0byA9IG91dGdvaW5nX2RpcmVjdGlvbih4LCB5LCBmcm9tLCBlZGdlcyk7XG4gICAgdHVydGxlLmxvb2tBdChtYXBEaXJlY3Rpb24odG8pKTtcbiAgICB0dXJ0bGUuc3RlcChkYXRhLnN0ZXApO1xuXG4gICAgc3dpdGNoICh0bykge1xuICAgICAgY2FzZSBcIm5cIjpcbiAgICAgICAgeSAtPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzXCI6XG4gICAgICAgIHkgKz0gMTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwid1wiOlxuICAgICAgICB4IC09IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVcIjpcbiAgICAgICAgeCArPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IFwiSW52YWxpZCBkaXJlY3Rpb24gdmFsdWVcIjtcbiAgICB9XG5cbiAgICBmcm9tID0gb3Bwb3NpdGUodG8pO1xuICAgIGVkZ2VzID0gbXN0LmdldEVkZ2VWYWx1ZXMoW3gsIHldLm1hcChudW1iZXIgPT4gTWF0aC5mbG9vcihudW1iZXIgLyAyKSkpO1xuICB9IHdoaWxlIChzdGFydHggIT09IHggfHwgc3RhcnR5ICE9PSB5KTtcblxuICB0dXJ0bGUuZW5kKCk7XG5cbiAgY29uc3QgZHJhdyA9IFNWRyhcImRyYXdpbmdcIikudmlld2JveCh7XG4gICAgeDogLWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAvIDIsXG4gICAgeTogLWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgLyAyLFxuICAgIHdpZHRoOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgaGVpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gIH0pO1xuICBjb25zdCBwYXRoID0gZHJhdy5wYXRoKHR1cnRsZS5nZXRQYXRoKCkpO1xuXG4gIGNvbnN0IGdwID0gbmV3IEdyYWRpZW50UGF0aCh7XG4gICAgcGF0aDogcGF0aC5uYXRpdmUoKSxcbiAgICBzZWdtZW50czogZGF0YS5yZXNvbHV0aW9uLFxuICAgIHNhbXBsZXM6IGRhdGEuc2FtcGxlcyxcbiAgfSk7XG5cbiAgZ3AucmVuZGVyKHtcbiAgICB0eXBlOiBcInBhdGhcIixcbiAgICBmaWxsOiBkYXRhLmNvbG9ycyxcbiAgICB3aWR0aDogZGF0YS5saW5lV2lkdGgsXG4gICAgc3Ryb2tlOiBkYXRhLmNvbG9ycyxcbiAgICBzdHJva2VXaWR0aDogMVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZHJhdyhjdXJ2ZSwgcGFyYW1zKSB7XG4gIHJlbmRlckN1cnZlKGN1cnZlLCBwYXJhbXMpO1xufVxuXG5leHBvcnQgeyBkcmF3IH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/renderer.js\n");

/***/ }),

/***/ "./src/spacefillingcurve.js":
/*!**********************************!*\
  !*** ./src/spacefillingcurve.js ***!
  \**********************************/
/*! exports provided: generateCurve */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"generateCurve\", function() { return generateCurve; });\n/* harmony import */ var _tyriar_fibonacci_heap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tyriar/fibonacci-heap */ \"./node_modules/@tyriar/fibonacci-heap/lib/fibonacciHeap.js\");\n/* harmony import */ var _tyriar_fibonacci_heap__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_tyriar_fibonacci_heap__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./src/util.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * This generates a closed space-filling curve.\n * It works by having a grid with random weighted connections between adjacent squares.\n * Then a minimum spaning tree is calculated over the grid.\n * Afterwards we subdivide every square on four smaller ones and consider that we have\n * a new closed square joining the centers of those smaller squares.\n * Following the connections established by our minimum spanning tree, we join these new\n * squares together until every node has been visited, forming a closed space filling curve\n * over the subdivided grid.\n * @author Nirei\n */\n\n\n/**\n * This representes the edges connecting\n * every square in a grid of any dimensions\n * with an associated value\n */\n\nfunction Lattice(H, V) {\n  /*\n   * It took a bit of drawing to figure out that\n   * all the edges connecting a grid are actually\n   * two grids of H-1 * V and H * V-1 sizes.\n   */\n  var horizontal = [];\n  var vertical = [];\n  /**\n   * Fill the lattice's edges with values provided by a generator function.\n   * @param {*} generator a function taking no parameters and returning a value\n   */\n\n  var fill = function fill(generator) {\n    for (var y = 0; y < V; y++) {\n      horizontal[y] = [];\n\n      for (var x = 0; x < H - 1; x++) {\n        horizontal[y][x] = generator([\"h\", x, y]);\n      }\n    }\n\n    for (var _y = 0; _y < V - 1; _y++) {\n      vertical[_y] = [];\n\n      for (var _x = 0; _x < H; _x++) {\n        vertical[_y][_x] = generator([\"v\", _x, _y]);\n      }\n    }\n  };\n\n  var getValue = function getValue(_ref) {\n    var _ref2 = _slicedToArray(_ref, 3),\n        axis = _ref2[0],\n        x = _ref2[1],\n        y = _ref2[2];\n\n    if (axis === \"h\") {\n      return horizontal[y][x];\n    } else if (axis === \"v\") {\n      return vertical[y][x];\n    } else {\n      throw \"Invalid axis value: \" + dir;\n    }\n  };\n  /**\n   * Get edge values for the edges connected to a vertex\n   * @param {[int, int]} coords x and y coords of the vertex\n   * @returns {{n: *, s: *, e: *, w: *}} object with the edges' values\n   */\n\n\n  function getEdgeValues(_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        x = _ref4[0],\n        y = _ref4[1];\n\n    if (!Number.isInteger(x) || !Number.isInteger(y)) {\n      throw \"Coordinates must be integers\";\n    }\n\n    if (x > H - 1 || x < 0) {\n      throw \"Coordinate out of range: x = \".concat(x);\n    }\n\n    if (y > V - 1 || y < 0) {\n      throw \"Coordinate out of range: y = \".concat(y);\n    }\n\n    var edges = {};\n\n    if (x !== 0) {\n      edges.w = horizontal[y][x - 1];\n    }\n\n    if (x < H - 1) {\n      edges.e = horizontal[y][x];\n    }\n\n    if (y !== 0) {\n      edges.n = vertical[y - 1][x];\n    }\n\n    if (y < V - 1) {\n      edges.s = vertical[y][x];\n    }\n\n    return edges;\n  }\n  /**\n   * Make a list of the edges connected to a vertex\n   * @param {[int, int]} coords x and y coords of the vertex\n   */\n\n\n  function getEdgeList(_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n        x = _ref6[0],\n        y = _ref6[1];\n\n    if (!Number.isInteger(x) || !Number.isInteger(y)) {\n      throw \"Coordinates must be integers\";\n    }\n\n    if (x > H - 1 || x < 0) {\n      throw \"Coordinate out of range: x = \".concat(x);\n    }\n\n    if (y > V - 1 || y < 0) {\n      throw \"Coordinate out of range: y = \".concat(y);\n    }\n\n    var edges = [];\n\n    if (x !== 0) {\n      edges.push([\"h\", x - 1, y]);\n    }\n\n    if (x < H - 1) {\n      edges.push([\"h\", x, y]);\n    }\n\n    if (y !== 0) {\n      edges.push([\"v\", x, y - 1]);\n    }\n\n    if (y < V - 1) {\n      edges.push([\"v\", x, y]);\n    }\n\n    return edges;\n  }\n  /**\n   * Given an edge, return vertices connected by it\n   * @param {*} edge - in [axis, x, y] format for which to return the vertices\n   * @returns array containing both vertices in [x,y] format\n   */\n\n\n  function connectedVertices(_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 3),\n        axis = _ref8[0],\n        x = _ref8[1],\n        y = _ref8[2];\n\n    if (axis === \"h\") {\n      return [[x, y], [x + 1, y]];\n    } else if (axis === \"v\") {\n      return [[x, y], [x, y + 1]];\n    } else {\n      throw \"Invalid axis value: \" + dir;\n    }\n  }\n\n  var getDimensions = function getDimensions() {\n    return [H, V];\n  };\n\n  var setValue = function setValue(_ref9, value) {\n    var _ref10 = _slicedToArray(_ref9, 3),\n        axis = _ref10[0],\n        x = _ref10[1],\n        y = _ref10[2];\n\n    if (axis === \"h\") {\n      horizontal[y][x] = value;\n    } else if (axis === \"v\") {\n      vertical[y][x] = value;\n    } else {\n      throw \"Invalid axis value: \" + dir;\n    }\n  };\n\n  return {\n    fill: fill,\n    getDimensions: getDimensions,\n    getValue: getValue,\n    getEdgeValues: getEdgeValues,\n    getEdgeList: getEdgeList,\n    setValue: setValue,\n    connectedVertices: connectedVertices\n  };\n}\n/**\n * Executes Prim's minimum spanning tree algorithm over\n * a Lattice with integer values for the edges\n * @param {*} lattice the lattice to calculate the MST\n */\n\n\nfunction prim(lattice) {\n  var open = new _tyriar_fibonacci_heap__WEBPACK_IMPORTED_MODULE_0__[\"FibonacciHeap\"](); // edges still open\n\n  var visited = {}; // visited vertices\n\n  var nvisited = 0; // number of visited vertices\n  // minimum spanning tree represented as a binary lattice\n\n  var _lattice$getDimension = lattice.getDimensions(),\n      _lattice$getDimension2 = _slicedToArray(_lattice$getDimension, 2),\n      H = _lattice$getDimension2[0],\n      V = _lattice$getDimension2[1];\n\n  var tree = Lattice(H, V);\n  tree.fill(function () {\n    return false;\n  }); // pick a random vertex to start\n\n  var vertex = [Object(_util__WEBPACK_IMPORTED_MODULE_1__[\"getRandomInt\"])(0, H), Object(_util__WEBPACK_IMPORTED_MODULE_1__[\"getRandomInt\"])(0, V)]; // add it to visited\n\n  visited[\"\".concat(vertex[0], \" \").concat(vertex[1])] = true;\n  nvisited += 1; // add its edges to the heap\n\n  lattice.getEdgeList(vertex).forEach(function (edge) {\n    open.insert(lattice.getValue(edge), edge);\n  });\n\n  while (nvisited < H * V) {\n    var _open$extractMinimum = open.extractMinimum(),\n        value = _open$extractMinimum.value;\n\n    var _lattice$connectedVer = lattice.connectedVertices(value),\n        _lattice$connectedVer2 = _slicedToArray(_lattice$connectedVer, 2),\n        v1 = _lattice$connectedVer2[0],\n        v2 = _lattice$connectedVer2[1];\n\n    if (!(\"\".concat(v1[0], \" \").concat(v1[1]) in visited && \"\".concat(v2[0], \" \").concat(v2[1]) in visited)) {\n      // is a new vertex, add edge to the tree\n      tree.setValue(value, true); // find out which was the new vertex and add it to visited\n\n      if (!(\"\".concat(v1[0], \" \").concat(v1[1]) in visited)) {\n        visited[\"\".concat(v1[0], \" \").concat(v1[1])] = true;\n        nvisited += 1;\n        vertex = v1;\n      } else {\n        visited[\"\".concat(v2[0], \" \").concat(v2[1])] = true;\n        nvisited += 1;\n        vertex = v2;\n      } // put edges in the heap\n\n\n      lattice.getEdgeList(vertex).forEach(function (edge) {\n        open.insert(lattice.getValue(edge), edge);\n      });\n    }\n  }\n\n  return tree;\n}\n\nfunction generateCurve(h, v) {\n  var lattice = Lattice(h, v); // fill the lattice with random integers\n\n  lattice.fill(function () {\n    return Object(_util__WEBPACK_IMPORTED_MODULE_1__[\"getRandomInt\"])(0, Number.MAX_SAFE_INTEGER);\n  });\n  return prim(lattice);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/spacefillingcurve.js\n");

/***/ }),

/***/ "./src/turtle_svg.js":
/*!***************************!*\
  !*** ./src/turtle_svg.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! svg.js */ \"./node_modules/svg.js/dist/svg.js\");\n/* harmony import */ var svg_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(svg_js__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\n * Adapter to draw turtle graphics as SVG paths\n */\n\nfunction Turtle() {\n  var cursorx = 0; // canvas coordinates\n\n  var cursory = 0; // canvas coordinates\n\n  var direction = 0; // degrees\n\n  var svgPath = null;\n\n  var begin = function begin(x, y) {\n    // begin a path and place turtle cursor at its start\n    cursorx = x;\n    cursory = y;\n    svgPath = \"M \".concat(x, \" \").concat(y);\n  };\n\n  var end = function end() {\n    svgPath += \" Z\";\n  };\n\n  var step = function step(size) {\n    cursorx += size * Math.cos(direction * Math.PI / 180);\n    cursory += size * Math.sin(direction * Math.PI / 180);\n    svgPath += \" L \".concat(cursorx, \" \").concat(cursory);\n  };\n\n  var lookAt = function lookAt(newdir) {\n    direction = newdir;\n  };\n\n  var turn = function turn(amount) {\n    direction += amount;\n    direction %= 360;\n  };\n\n  var turnLeft = function turnLeft() {\n    turn(90);\n  };\n\n  var turnRight = function turnRight() {\n    turn(-90);\n  };\n\n  var getPath = function getPath() {\n    return svgPath;\n  };\n\n  return {\n    begin: begin,\n    step: step,\n    lookAt: lookAt,\n    turn: turn,\n    turnLeft: turnLeft,\n    turnRight: turnRight,\n    end: end,\n    getPath: getPath\n  };\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Turtle);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdHVydGxlX3N2Zy5qcz82N2Y1Il0sIm5hbWVzIjpbIlR1cnRsZSIsImN1cnNvcngiLCJjdXJzb3J5IiwiZGlyZWN0aW9uIiwic3ZnUGF0aCIsImJlZ2luIiwieCIsInkiLCJlbmQiLCJzdGVwIiwic2l6ZSIsIk1hdGgiLCJjb3MiLCJQSSIsInNpbiIsImxvb2tBdCIsIm5ld2RpciIsInR1cm4iLCJhbW91bnQiLCJ0dXJuTGVmdCIsInR1cm5SaWdodCIsImdldFBhdGgiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUE7Ozs7QUFHQSxTQUFTQSxNQUFULEdBQWtCO0FBQ2hCLE1BQUlDLE9BQU8sR0FBRyxDQUFkLENBRGdCLENBQ0M7O0FBQ2pCLE1BQUlDLE9BQU8sR0FBRyxDQUFkLENBRmdCLENBRUM7O0FBQ2pCLE1BQUlDLFNBQVMsR0FBRyxDQUFoQixDQUhnQixDQUdHOztBQUNuQixNQUFJQyxPQUFPLEdBQUcsSUFBZDs7QUFFQSxNQUFNQyxLQUFLLEdBQUcsU0FBUkEsS0FBUSxDQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZTtBQUMzQjtBQUNBTixXQUFPLEdBQUdLLENBQVY7QUFDQUosV0FBTyxHQUFHSyxDQUFWO0FBQ0FILFdBQU8sZUFBUUUsQ0FBUixjQUFhQyxDQUFiLENBQVA7QUFDRCxHQUxEOztBQU9BLE1BQU1DLEdBQUcsR0FBRyxTQUFOQSxHQUFNLEdBQVc7QUFDckJKLFdBQU8sSUFBSSxJQUFYO0FBQ0QsR0FGRDs7QUFJQSxNQUFNSyxJQUFJLEdBQUcsU0FBUEEsSUFBTyxDQUFTQyxJQUFULEVBQWU7QUFDMUJULFdBQU8sSUFBSVMsSUFBSSxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBVVQsU0FBUyxHQUFHUSxJQUFJLENBQUNFLEVBQWxCLEdBQXdCLEdBQWpDLENBQWxCO0FBQ0FYLFdBQU8sSUFBSVEsSUFBSSxHQUFHQyxJQUFJLENBQUNHLEdBQUwsQ0FBVVgsU0FBUyxHQUFHUSxJQUFJLENBQUNFLEVBQWxCLEdBQXdCLEdBQWpDLENBQWxCO0FBQ0FULFdBQU8saUJBQVVILE9BQVYsY0FBcUJDLE9BQXJCLENBQVA7QUFDRCxHQUpEOztBQU1BLE1BQU1hLE1BQU0sR0FBRyxTQUFUQSxNQUFTLENBQVNDLE1BQVQsRUFBaUI7QUFDOUJiLGFBQVMsR0FBR2EsTUFBWjtBQUNELEdBRkQ7O0FBSUEsTUFBTUMsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBU0MsTUFBVCxFQUFpQjtBQUM1QmYsYUFBUyxJQUFJZSxNQUFiO0FBQ0FmLGFBQVMsSUFBSSxHQUFiO0FBQ0QsR0FIRDs7QUFLQSxNQUFNZ0IsUUFBUSxHQUFHLFNBQVhBLFFBQVcsR0FBVztBQUMxQkYsUUFBSSxDQUFDLEVBQUQsQ0FBSjtBQUNELEdBRkQ7O0FBSUEsTUFBTUcsU0FBUyxHQUFHLFNBQVpBLFNBQVksR0FBVztBQUMzQkgsUUFBSSxDQUFDLENBQUMsRUFBRixDQUFKO0FBQ0QsR0FGRDs7QUFJQSxNQUFNSSxPQUFPLEdBQUcsU0FBVkEsT0FBVSxHQUFXO0FBQ3pCLFdBQU9qQixPQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPO0FBQ0xDLFNBQUssRUFBRUEsS0FERjtBQUVMSSxRQUFJLEVBQUVBLElBRkQ7QUFHTE0sVUFBTSxFQUFFQSxNQUhIO0FBSUxFLFFBQUksRUFBRUEsSUFKRDtBQUtMRSxZQUFRLEVBQUVBLFFBTEw7QUFNTEMsYUFBUyxFQUFFQSxTQU5OO0FBT0xaLE9BQUcsRUFBRUEsR0FQQTtBQVFMYSxXQUFPLEVBQVBBO0FBUkssR0FBUDtBQVVEOztBQUVjckIscUVBQWYiLCJmaWxlIjoiLi9zcmMvdHVydGxlX3N2Zy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTVkcgZnJvbSBcInN2Zy5qc1wiO1xuXG4vKipcbiAqIEFkYXB0ZXIgdG8gZHJhdyB0dXJ0bGUgZ3JhcGhpY3MgYXMgU1ZHIHBhdGhzXG4gKi9cbmZ1bmN0aW9uIFR1cnRsZSgpIHtcbiAgbGV0IGN1cnNvcnggPSAwOyAvLyBjYW52YXMgY29vcmRpbmF0ZXNcbiAgbGV0IGN1cnNvcnkgPSAwOyAvLyBjYW52YXMgY29vcmRpbmF0ZXNcbiAgbGV0IGRpcmVjdGlvbiA9IDA7IC8vIGRlZ3JlZXNcbiAgbGV0IHN2Z1BhdGggPSBudWxsO1xuXG4gIGNvbnN0IGJlZ2luID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIC8vIGJlZ2luIGEgcGF0aCBhbmQgcGxhY2UgdHVydGxlIGN1cnNvciBhdCBpdHMgc3RhcnRcbiAgICBjdXJzb3J4ID0geDtcbiAgICBjdXJzb3J5ID0geTtcbiAgICBzdmdQYXRoID0gYE0gJHt4fSAke3l9YDtcbiAgfTtcblxuICBjb25zdCBlbmQgPSBmdW5jdGlvbigpIHtcbiAgICBzdmdQYXRoICs9IFwiIFpcIjtcbiAgfTtcblxuICBjb25zdCBzdGVwID0gZnVuY3Rpb24oc2l6ZSkge1xuICAgIGN1cnNvcnggKz0gc2l6ZSAqIE1hdGguY29zKChkaXJlY3Rpb24gKiBNYXRoLlBJKSAvIDE4MCk7XG4gICAgY3Vyc29yeSArPSBzaXplICogTWF0aC5zaW4oKGRpcmVjdGlvbiAqIE1hdGguUEkpIC8gMTgwKTtcbiAgICBzdmdQYXRoICs9IGAgTCAke2N1cnNvcnh9ICR7Y3Vyc29yeX1gO1xuICB9O1xuXG4gIGNvbnN0IGxvb2tBdCA9IGZ1bmN0aW9uKG5ld2Rpcikge1xuICAgIGRpcmVjdGlvbiA9IG5ld2RpcjtcbiAgfTtcblxuICBjb25zdCB0dXJuID0gZnVuY3Rpb24oYW1vdW50KSB7XG4gICAgZGlyZWN0aW9uICs9IGFtb3VudDtcbiAgICBkaXJlY3Rpb24gJT0gMzYwO1xuICB9O1xuXG4gIGNvbnN0IHR1cm5MZWZ0ID0gZnVuY3Rpb24oKSB7XG4gICAgdHVybig5MCk7XG4gIH07XG5cbiAgY29uc3QgdHVyblJpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgdHVybigtOTApO1xuICB9O1xuXG4gIGNvbnN0IGdldFBhdGggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc3ZnUGF0aDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJlZ2luOiBiZWdpbixcbiAgICBzdGVwOiBzdGVwLFxuICAgIGxvb2tBdDogbG9va0F0LFxuICAgIHR1cm46IHR1cm4sXG4gICAgdHVybkxlZnQ6IHR1cm5MZWZ0LFxuICAgIHR1cm5SaWdodDogdHVyblJpZ2h0LFxuICAgIGVuZDogZW5kLFxuICAgIGdldFBhdGhcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVHVydGxlO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/turtle_svg.js\n");

/***/ }),

/***/ "./src/util.js":
/*!*********************!*\
  !*** ./src/util.js ***!
  \*********************/
/*! exports provided: getRandomInt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRandomInt\", function() { return getRandomInt; });\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max); // The maximum is exclusive and the minimum is inclusive\n\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbC5qcz9lMGViIl0sIm5hbWVzIjpbImdldFJhbmRvbUludCIsIm1pbiIsIm1heCIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJyYW5kb20iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQSxTQUFTQSxZQUFULENBQXNCQyxHQUF0QixFQUEyQkMsR0FBM0IsRUFBZ0M7QUFDOUJELEtBQUcsR0FBR0UsSUFBSSxDQUFDQyxJQUFMLENBQVVILEdBQVYsQ0FBTjtBQUNBQyxLQUFHLEdBQUdDLElBQUksQ0FBQ0UsS0FBTCxDQUFXSCxHQUFYLENBQU4sQ0FGOEIsQ0FHOUI7O0FBQ0EsU0FBT0MsSUFBSSxDQUFDRSxLQUFMLENBQVdGLElBQUksQ0FBQ0csTUFBTCxNQUFpQkosR0FBRyxHQUFHRCxHQUF2QixDQUFYLElBQTBDQSxHQUFqRDtBQUNEIiwiZmlsZSI6Ii4vc3JjL3V0aWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcbiAgbWluID0gTWF0aC5jZWlsKG1pbik7XG4gIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgLy8gVGhlIG1heGltdW0gaXMgZXhjbHVzaXZlIGFuZCB0aGUgbWluaW11bSBpcyBpbmNsdXNpdmVcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pKSArIG1pbjtcbn1cblxuZXhwb3J0IHsgZ2V0UmFuZG9tSW50IH0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/util.js\n");

/***/ })

/******/ });